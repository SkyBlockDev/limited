export const denodoc = {
	timestamp: '2021-05-03T14:18:55.121Z',
	nodes: [
		{
			kind: 'function',
			name: 'handleInternalGuildRoleCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildRoleDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildRoleUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 51,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildRoleDeletePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildRoleDeletePayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildRolePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildRolePayload',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 7,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'function',
			name: 'createRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 70,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'object',
						props: [
							{
								kind: 'assign',
								key: 'tags',
								value: '<UNIMPLEMENTED>',
							},
							{
								kind: 'rest',
								arg: {
									kind: 'identifier',
									name: 'rest',
									optional: false,
									tsType: null,
								},
							},
						],
						optional: false,
						tsType: {
							repr: 'RoleData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RoleData',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Role',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 87,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'Delete the role',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteRole',
										kind: 'typeQuery',
										typeQuery: 'deleteRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 127,
							col: 2,
						},
						jsDoc: 'Edits the role',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'CreateRoleOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'CreateRoleOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editRole',
										kind: 'typeQuery',
										typeQuery: 'editRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'higherThanRoleID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'Checks if this role is higher than another role.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'position',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
						],
						returnType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 89,
							col: 2,
						},
						jsDoc: 'role id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 91,
							col: 2,
						},
						jsDoc: 'role name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 93,
							col: 2,
						},
						jsDoc: 'integer representation of hexadecimal color code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'if this role is pinned in the user listing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 97,
							col: 2,
						},
						jsDoc: 'position of this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 99,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'whether this role is managed by an integration',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'whether this role is mentionable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'botID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'The bot id that is associated with this role.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'isNitroBoostRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 107,
							col: 2,
						},
						jsDoc: 'If this role is the nitro boost role.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'integrationID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 109,
							col: 2,
						},
						jsDoc: 'The integration id that is associated with this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 114,
							col: 2,
						},
						jsDoc:
							'The guild where this role is. If undefined, the guild is not cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'hexColor',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 116,
							col: 2,
						},
						jsDoc: 'The hex color for this role.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 118,
							col: 2,
						},
						jsDoc: 'The cached members that have this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Member',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Member',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 120,
							col: 2,
						},
						jsDoc: 'The @ mention of the role in a string.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'CreateRoleOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateRoleOptions',
			},
		},
		{
			kind: 'import',
			name: 'RoleData',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'RoleData',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'createNewProp',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'createNewProp',
			},
		},
		{
			kind: 'import',
			name: 'deleteRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'deleteRole',
			},
		},
		{
			kind: 'import',
			name: 'editRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'editRole',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 7,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'function',
			name: 'deleteMessageByID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 17,
				col: 0,
			},
			jsDoc: 'Delete a message with the channel id and message id only.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'delayMilliseconds',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 37,
				col: 0,
			},
			jsDoc: 'Delete a message',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'message',
						optional: false,
						tsType: {
							repr: 'Message',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Message',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'delayMilliseconds',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'pin',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 66,
				col: 0,
			},
			jsDoc:
				'Pin a message in a channel. Requires MANAGE_MESSAGES. Max pins allowed in a channel = 50.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'unpin',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 85,
				col: 0,
			},
			jsDoc: 'Unpin a message in a channel. Requires MANAGE_MESSAGES.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'addReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 104,
				col: 0,
			},
			jsDoc:
				'Create a reaction for the message. Reaction takes the form of **name:id** for custom guild emoji, or Unicode characters. Requires READ_MESSAGE_HISTORY and ADD_REACTIONS',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reaction',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'addReactions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 146,
				col: 0,
			},
			jsDoc:
				'Adds multiple reactions to a message. If `ordered` is true(default is false), it will add the reactions one at a time in the order provided. Note: Reaction takes the form of **name:id** for custom guild emoji, or Unicode characters. Requires READ_MESSAGE_HISTORY and ADD_REACTIONS',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reactions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'ordered',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'removeReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 164,
				col: 0,
			},
			jsDoc:
				'Removes a reaction from the bot on this message. Reaction takes the form of **name:id** for custom guild emoji, or Unicode characters.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reaction',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'removeUserReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 187,
				col: 0,
			},
			jsDoc:
				'Removes a reaction from the specified user on this message. Reaction takes the form of **name:id** for custom guild emoji, or Unicode characters.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reaction',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'userID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'removeAllReactions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 220,
				col: 0,
			},
			jsDoc: 'Removes all reactions for all emojis on this message.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'removeReactionEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 239,
				col: 0,
			},
			jsDoc:
				'Removes all reactions for a single emoji on this message. Reaction takes the form of **name:id** for custom guild emoji, or Unicode characters.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reaction',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getReactions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 268,
				col: 0,
			},
			jsDoc: 'Get a list of users that reacted with this emoji.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'message',
						optional: false,
						tsType: {
							repr: 'Message',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Message',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'reaction',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'DiscordGetReactionsParams',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGetReactionsParams',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 285,
				col: 0,
			},
			jsDoc: 'Edit the message.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'message',
						optional: false,
						tsType: {
							repr: 'Message',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Message',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'content',
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'MessageContent',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageContent',
									},
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'publishMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 331,
				col: 0,
			},
			jsDoc: 'Crosspost a message in a News Channel to following channels.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'botID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botID',
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGetReactionsParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordGetReactionsParams',
			},
		},
		{
			kind: 'import',
			name: 'Errors',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Errors',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'MessageCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'import',
			name: 'botHasChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasChannelPermissions',
			},
		},
		{
			kind: 'import',
			name: 'delay',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'delay',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'Message',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Message',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildBanAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildBanRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildBanPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildBanPayload',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalReady',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 23,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the ready event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalPresenceUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 82,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the presence update event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalTypingStart',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 93,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the typings event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalUserUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 99,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the user update event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalVoiceStateUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 118,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the voice state update event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalWebhooksUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 171,
				col: 0,
			},
			jsDoc:
				'This function is the internal handler for the webhooks update event. Users can override this with controllers if desired.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalIntegrationCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 181,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalIntegrationUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 209,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalIntegrationDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 235,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalInviteCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 251,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalInviteDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 277,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'setApplicationID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'setApplicationID',
			},
		},
		{
			kind: 'import',
			name: 'setBotID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'setBotID',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'IntegrationCreateUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'IntegrationCreateUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'IntegrationDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'IntegrationDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'InviteCreateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'InviteCreateEvent',
			},
		},
		{
			kind: 'import',
			name: 'InviteDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'InviteDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'PresenceUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PresenceUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'ReadyPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ReadyPayload',
			},
		},
		{
			kind: 'import',
			name: 'TypingStartPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'TypingStartPayload',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'VoiceStateUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'VoiceStateUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'WebhookUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'WebhookUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'delay',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'delay',
			},
		},
		{
			kind: 'import',
			name: 'allowNextShard',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				imported: 'allowNextShard',
			},
		},
		{
			kind: 'import',
			name: 'initialMemberLoadQueue',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'initialMemberLoadQueue',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'function',
			name: 'getApplicationInformation',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/oauth.ts',
				line: 6,
				col: 0,
			},
			jsDoc: "Returns the bot's OAuth2 application object without `flags`.",
			functionDef: {
				params: [],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/oauth.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'OAuthApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/oauth.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/oauth.ts',
				imported: 'OAuthApplication',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/oauth.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'typeAlias',
			name: 'TableName',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'guilds',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'guilds',
							},
						},
						{
							repr: 'unavailableGuilds',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'unavailableGuilds',
							},
						},
						{
							repr: 'channels',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'channels',
							},
						},
						{
							repr: 'messages',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'messages',
							},
						},
						{
							repr: 'members',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'members',
							},
						},
						{
							repr: 'presences',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'presences',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'variable',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 120,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: null,
				kind: 'let',
			},
		},
		{
			kind: 'import',
			name: 'PresenceUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PresenceUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Message',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Message',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildMemberAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildMemberRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 31,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildMemberUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 48,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildMembersChunk',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 105,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildBanPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildBanPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildMemberAddPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMemberAddPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildMemberChunkPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMemberChunkPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildMemberUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMemberUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'interface',
			name: 'Channel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 119,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'send',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 181,
							col: 2,
						},
						jsDoc:
							'Send a message to the channel. Requires SEND_MESSAGES permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'disconnect',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 183,
							col: 2,
						},
						jsDoc:
							'Disconnect a member from a voice channel. Requires MOVE_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'kickFromVoiceChannel',
										kind: 'typeQuery',
										typeQuery: 'kickFromVoiceChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 185,
							col: 2,
						},
						jsDoc: 'Delete the channel',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteChannel',
										kind: 'typeQuery',
										typeQuery: 'deleteChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'editOverwrite',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'Edit a channel Overwrite',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwriteID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'Omit',
									kind: 'typeRef',
									typeRef: {
										typeParams: [
											{
												repr: 'Overwrite',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Overwrite',
												},
											},
											{
												repr: 'id',
												kind: 'literal',
												literal: {
													kind: 'string',
													string: 'id',
												},
											},
										],
										typeName: 'Omit',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editChannelOverwrite',
										kind: 'typeQuery',
										typeQuery: 'editChannelOverwrite',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'deleteOverwrite',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 192,
							col: 2,
						},
						jsDoc: 'Delete a channel Overwrite',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwriteID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteChannelOverwrite',
										kind: 'typeQuery',
										typeQuery: 'deleteChannelOverwrite',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'hasPermission',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 196,
							col: 2,
						},
						jsDoc:
							'Checks if a channel overwrite for a user id or a role id has permission in this channel',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwrites',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'RawOverwrite',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'RawOverwrite',
										},
									},
								},
							},
							{
								kind: 'identifier',
								name: 'permissions',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'Permission',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Permission',
										},
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'channelOverwriteHasPermission',
										kind: 'typeQuery',
										typeQuery: 'channelOverwriteHasPermission',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 201,
							col: 2,
						},
						jsDoc: 'Edit the channel',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'ChannelEditOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ChannelEditOptions',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editChannel',
										kind: 'typeQuery',
										typeQuery: 'editChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 121,
							col: 2,
						},
						jsDoc: 'The id of this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 123,
							col: 2,
						},
						jsDoc: 'Sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'The name of the channel (2-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 127,
							col: 2,
						},
						jsDoc: 'The channel topic (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'The bitrate (in bits) of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 131,
							col: 2,
						},
						jsDoc: 'The type of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ChannelType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelType',
							},
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 133,
							col: 2,
						},
						jsDoc: 'The guild id of the channel if it is a guild channel.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'lastMessageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 135,
							col: 2,
						},
						jsDoc: 'The id of the last message sent in this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'userLimit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 137,
							col: 2,
						},
						jsDoc: 'The amount of users allowed in this voice channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rateLimitPerUser',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 139,
							col: 2,
						},
						jsDoc:
							'The rate limit(slowmode) in this text channel that users can send messages.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'parentID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 141,
							col: 2,
						},
						jsDoc: 'The category id for this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'lastPinTimestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 143,
							col: 2,
						},
						jsDoc: 'The last time when a message was pinned in this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissionOverwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 145,
							col: 2,
						},
						jsDoc: 'The permission overwrites for this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RawOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RawOverwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 147,
							col: 2,
						},
						jsDoc: 'Whether this channel is nsfw or not',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 156,
							col: 2,
						},
						jsDoc:
							'Gets the guild object for this channel.\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'messages',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 162,
							col: 2,
						},
						jsDoc:
							'Gets the messages from cache that were sent in this channel\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Message',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Message',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 164,
							col: 2,
						},
						jsDoc: 'The mention of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'voiceStates',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 170,
							col: 2,
						},
						jsDoc:
							'Gets the voice states for this channel\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'CleanVoiceState',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'CleanVoiceState',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'connectedMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 176,
							col: 2,
						},
						jsDoc:
							'Gets the connected members for this channel undefined if member is not cached\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: '',
										kind: 'union',
										union: [
											{
												repr: 'Member',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Member',
												},
											},
											{
												repr: 'undefined',
												kind: 'keyword',
												keyword: 'undefined',
											},
										],
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Message',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 182,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 256,
							col: 2,
						},
						jsDoc: 'Delete the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'delayMilliseconds',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteMessageByID',
										kind: 'typeQuery',
										typeQuery: 'deleteMessageByID',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'Edit the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editMessage',
										kind: 'typeQuery',
										typeQuery: 'editMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'pin',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 263,
							col: 2,
						},
						jsDoc: 'Pins the message in the channel',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'pin',
										kind: 'typeQuery',
										typeQuery: 'pin',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addReaction',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 265,
							col: 2,
						},
						jsDoc: 'Add a reaction to the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addReaction',
										kind: 'typeQuery',
										typeQuery: 'addReaction',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addReactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 267,
							col: 2,
						},
						jsDoc:
							'Add multiple reactions to the message without or without order.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reactions',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'ordered',
								optional: true,
								tsType: {
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addReactions',
										kind: 'typeQuery',
										typeQuery: 'addReactions',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'reply',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'Send a inline reply to this message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'send',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'Send a message to this channel where this message is',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'alert',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 276,
							col: 2,
						},
						jsDoc:
							'Send a message to this channel and then delete it after a bit. By default it will delete after 10 seconds with no reason provided.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
							{
								kind: 'identifier',
								name: 'timeout',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'Promise',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'void',
										kind: 'keyword',
										keyword: 'void',
									},
								],
								typeName: 'Promise',
							},
						},
						typeParams: [],
					},
					{
						name: 'alertReply',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 282,
							col: 2,
						},
						jsDoc:
							'Send a inline reply to this message but then delete it after a bit. By default it will delete after 10 seconds with no reason provided.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
							{
								kind: 'identifier',
								name: 'timeout',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'Promise',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'unknown',
										kind: 'keyword',
										keyword: 'unknown',
									},
								],
								typeName: 'Promise',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeAllReactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeAllReactions',
										kind: 'typeQuery',
										typeQuery: 'removeAllReactions',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeReactionEmoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeReactionEmoji',
										kind: 'typeQuery',
										typeQuery: 'removeReactionEmoji',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeReaction',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 292,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeReaction',
										kind: 'typeQuery',
										typeQuery: 'removeReaction',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 184,
							col: 2,
						},
						jsDoc: 'The id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 186,
							col: 2,
						},
						jsDoc: 'The id of the channel the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 188,
							col: 2,
						},
						jsDoc: 'The id of the guild the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 190,
							col: 2,
						},
						jsDoc:
							'The author of this message (not guaranteed to be a valid user such as a webhook.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 192,
							col: 2,
						},
						jsDoc: 'The contents of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 194,
							col: 2,
						},
						jsDoc: 'When this message was sent',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'editedTimestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'When this message was edited (if it was not edited, null)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'Whether this was a TextToSpeech message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionsEveryone',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 200,
							col: 2,
						},
						jsDoc: 'Whether this message mentions everyone',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 202,
							col: 2,
						},
						jsDoc: 'Users specifically mentioned in the message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionRoleIDs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 204,
							col: 2,
						},
						jsDoc: 'Roles specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionChannelIDs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 206,
							col: 2,
						},
						jsDoc: 'Channels specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'attachments',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 208,
							col: 2,
						},
						jsDoc: 'Any attached files',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Attachment',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Attachment',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 210,
							col: 2,
						},
						jsDoc: 'Any embedded content',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'reactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 212,
							col: 2,
						},
						jsDoc: 'Reactions to the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Reaction',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Reaction',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 214,
							col: 2,
						},
						jsDoc: 'Used for validating a message was sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'pinned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 216,
							col: 2,
						},
						jsDoc: 'Whether this message is pinned',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 218,
							col: 2,
						},
						jsDoc:
							'If the message is generated by a webhook, this is the webhooks id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 220,
							col: 2,
						},
						jsDoc: 'The type of message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '9',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 9,
									},
								},
								{
									repr: '10',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 10,
									},
								},
								{
									repr: '11',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 11,
									},
								},
								{
									repr: '12',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 12,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'activity',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 222,
							col: 2,
						},
						jsDoc:
							'The activities sent with Rich Presence-related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Activity',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Activity',
							},
						},
						typeParams: [],
					},
					{
						name: 'applications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 224,
							col: 2,
						},
						jsDoc:
							'Applications that sent with Rich Presence related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Application',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Application',
							},
						},
						typeParams: [],
					},
					{
						name: 'messageReference',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 226,
							col: 2,
						},
						jsDoc: 'The reference data sent with crossposted messages',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordReferencePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordReferencePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 228,
							col: 2,
						},
						jsDoc:
							'The message flags combined like permission bits describe extra features of the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '16',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 16,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'stickers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 230,
							col: 2,
						},
						jsDoc:
							'the stickers sent with the message (bots currently can only receive messages with stickers, not send)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MessageSticker',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MessageSticker',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'referencedMessageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 232,
							col: 2,
						},
						jsDoc:
							'The message id of the original message if this message was sent as a reply. If null, the original message was deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'MessageCreateOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageCreateOptions',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'channel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 237,
							col: 2,
						},
						jsDoc:
							'The channel where this message was sent. Can be undefined if uncached.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 239,
							col: 2,
						},
						jsDoc:
							'The guild of this message. Can be undefined if not in cache or in DM',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 241,
							col: 2,
						},
						jsDoc:
							'The member for the user who sent the message. Can be undefined if not in cache or in dm.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'guildMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 243,
							col: 2,
						},
						jsDoc:
							'The guild member details for this guild and member. Can be undefined if not in cache or in dm.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'GuildMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GuildMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'link',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 245,
							col: 2,
						},
						jsDoc: 'The url link to this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'mentionedRoles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 247,
							col: 2,
						},
						jsDoc:
							'The role objects for all the roles that were mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionedChannels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 249,
							col: 2,
						},
						jsDoc:
							'The channel objects for all the channels that were mentioned in this message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionedMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 251,
							col: 2,
						},
						jsDoc:
							'The member objects for all the members that were mentioned in this message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 214,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'bannerURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 325,
							col: 2,
						},
						jsDoc: 'The banner url for this server',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'size',
								optional: true,
								tsType: {
									repr: 'ImageSize',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageSize',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'format',
								optional: true,
								tsType: {
									repr: 'ImageFormats',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageFormats',
									},
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'iconURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 327,
							col: 2,
						},
						jsDoc:
							'The full URL of the icon from Discords CDN. Undefined when no icon is set.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'size',
								optional: true,
								tsType: {
									repr: 'ImageSize',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageSize',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'format',
								optional: true,
								tsType: {
									repr: 'ImageFormats',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageFormats',
									},
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 329,
							col: 2,
						},
						jsDoc:
							'Delete a guild permanently. User must be owner. Returns 204 No Content on success. Fires a Guild Delete Gateway event.',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteServer',
										kind: 'typeQuery',
										typeQuery: 'deleteServer',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'leave',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 331,
							col: 2,
						},
						jsDoc: 'Leave a guild',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'leaveGuild',
										kind: 'typeQuery',
										typeQuery: 'leaveGuild',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 333,
							col: 2,
						},
						jsDoc: 'Edit the server. Requires the MANAGE_GUILD permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'GuildEditOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GuildEditOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editGuild',
										kind: 'typeQuery',
										typeQuery: 'editGuild',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'auditLogs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 335,
							col: 2,
						},
						jsDoc:
							'Returns the audit logs for the guild. Requires VIEW AUDIT LOGS permission',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'GetAuditLogsOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetAuditLogsOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getAuditLogs',
										kind: 'typeQuery',
										typeQuery: 'getAuditLogs',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'getBan',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 337,
							col: 2,
						},
						jsDoc:
							'Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getBan',
										kind: 'typeQuery',
										typeQuery: 'getBan',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'bans',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 339,
							col: 2,
						},
						jsDoc:
							'Returns a list of ban objects for the users banned from this guild. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getBans',
										kind: 'typeQuery',
										typeQuery: 'getBans',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'ban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 341,
							col: 2,
						},
						jsDoc:
							'Ban a user from the guild and optionally delete previous messages sent by the user. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'BanOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'BanOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'ban',
										kind: 'typeQuery',
										typeQuery: 'ban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'unban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 343,
							col: 2,
						},
						jsDoc: 'Remove the ban for a user. Requires BAN_MEMBERS permission',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'unban',
										kind: 'typeQuery',
										typeQuery: 'unban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'invites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 345,
							col: 2,
						},
						jsDoc:
							'Get all the invites for this guild. Requires MANAGE_GUILD permission',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getInvites',
										kind: 'typeQuery',
										typeQuery: 'getInvites',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 216,
							col: 2,
						},
						jsDoc: 'The guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 218,
							col: 2,
						},
						jsDoc: 'The guild name 2-100 characters',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 220,
							col: 2,
						},
						jsDoc: 'The guild icon image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 222,
							col: 2,
						},
						jsDoc: 'The guild splash image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'disoverySplash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 224,
							col: 2,
						},
						jsDoc:
							'Discovery splash has; only present for guilds with the "DISCOVERABLE" feature',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 226,
							col: 2,
						},
						jsDoc: 'The voice region id for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'defaultMessageNotifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 228,
							col: 2,
						},
						jsDoc: 'Default message notifications level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'explicitContentFilter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 230,
							col: 2,
						},
						jsDoc: 'Explicit content filter level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 232,
							col: 2,
						},
						jsDoc: 'The custom guild emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Emoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Emoji',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'features',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 234,
							col: 2,
						},
						jsDoc: 'Enabled guild features',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'GuildFeatures',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'GuildFeatures',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'systemChannelFlags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 236,
							col: 2,
						},
						jsDoc: 'System channel flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rulesChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 238,
							col: 2,
						},
						jsDoc:
							'The id of the channel where guilds with the PUBLIC feature can display rules and or guidelines.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 240,
							col: 2,
						},
						jsDoc: 'The description for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 242,
							col: 2,
						},
						jsDoc: 'The banner hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'publicUpdatesChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 244,
							col: 2,
						},
						jsDoc:
							'The id of the channel where admins and moderators of guilds with the PUBLIC feature receive notices from Discord',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'maxVideoChannelUsers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 246,
							col: 2,
						},
						jsDoc: 'The maximum amount of users in a video channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximateMemberCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 248,
							col: 2,
						},
						jsDoc:
							'The approximate number of members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximatePresenceCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 250,
							col: 2,
						},
						jsDoc:
							'The approximate number of non-offline members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'large',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 252,
							col: 2,
						},
						jsDoc: 'Whether this is considered a large guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'unavailable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 254,
							col: 2,
						},
						jsDoc: 'Whether this guild is unavailable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'shardID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 256,
							col: 2,
						},
						jsDoc: 'The shard id that this guild is on',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'ownerID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 258,
							col: 2,
						},
						jsDoc: 'The owner id of the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afkChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 260,
							col: 2,
						},
						jsDoc: 'The afk channel id for this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afkTimeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 262,
							col: 2,
						},
						jsDoc: 'The amount of time before a user is moved to AFK.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'widgetEnabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 264,
							col: 2,
						},
						jsDoc: 'Whether or not the embed is enabled in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'widgetChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 266,
							col: 2,
						},
						jsDoc: 'The channel id for the guild embed in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verificationLevel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 268,
							col: 2,
						},
						jsDoc: 'The verification level for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'mfaLevel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 270,
							col: 2,
						},
						jsDoc: 'The MFA level for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'systemChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'The system channel id for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'maxPresences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'The max presences for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'maxMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 276,
							col: 2,
						},
						jsDoc: 'The maximum members in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'vanityURLCode',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 278,
							col: 2,
						},
						jsDoc: 'The vanity URL code for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premiumTier',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 280,
							col: 2,
						},
						jsDoc: 'The premium tier for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premiumSubscriptionCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 282,
							col: 2,
						},
						jsDoc: 'The subscription count for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'preferredLocale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 284,
							col: 2,
						},
						jsDoc: 'The preferred language in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 286,
							col: 2,
						},
						jsDoc: 'The roles in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Role',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Role',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'joinedAt',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'When this guild was joined at.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'The presences of all the users in the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Presence',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Presence',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'memberCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 292,
							col: 2,
						},
						jsDoc:
							'The total number of members in this guild. This value is updated as members leave and join the server. However, if you do not have the intent enabled to be able to listen to these events, then this will not be accurate.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'voiceStates',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 294,
							col: 2,
						},
						jsDoc:
							'The Voice State data for each user in a voice channel in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'CleanVoiceState',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'CleanVoiceState',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 298,
							col: 2,
						},
						jsDoc: 'Members in this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Member',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Member',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 300,
							col: 2,
						},
						jsDoc: 'Channels in this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Channel',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Channel',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'afkChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 302,
							col: 2,
						},
						jsDoc: 'The afk channel if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'publicUpdatesChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 304,
							col: 2,
						},
						jsDoc: 'The public update channel if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'rulesChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 306,
							col: 2,
						},
						jsDoc: 'The rules channel in this guild if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'systemChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 308,
							col: 2,
						},
						jsDoc: 'The system channel in this guild if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 310,
							col: 2,
						},
						jsDoc: 'The bot member in this guild if cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'botMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 312,
							col: 2,
						},
						jsDoc: 'The bot guild member in this guild if cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'GuildMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GuildMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'botVoice',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 314,
							col: 2,
						},
						jsDoc: 'The bots voice state if there is one in this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'CleanVoiceState',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CleanVoiceState',
							},
						},
						typeParams: [],
					},
					{
						name: 'owner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 316,
							col: 2,
						},
						jsDoc: 'The owner member of this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'partnered',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 318,
							col: 2,
						},
						jsDoc: 'Whether or not this guild is partnered',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 320,
							col: 2,
						},
						jsDoc: 'Whether or not this guild is verified',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Role',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				line: 87,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'Delete the role',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteRole',
										kind: 'typeQuery',
										typeQuery: 'deleteRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 127,
							col: 2,
						},
						jsDoc: 'Edits the role',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'CreateRoleOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'CreateRoleOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editRole',
										kind: 'typeQuery',
										typeQuery: 'editRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'higherThanRoleID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'Checks if this role is higher than another role.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'position',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
						],
						returnType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 89,
							col: 2,
						},
						jsDoc: 'role id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 91,
							col: 2,
						},
						jsDoc: 'role name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 93,
							col: 2,
						},
						jsDoc: 'integer representation of hexadecimal color code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'if this role is pinned in the user listing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 97,
							col: 2,
						},
						jsDoc: 'position of this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 99,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'whether this role is managed by an integration',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'whether this role is mentionable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'botID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'The bot id that is associated with this role.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'isNitroBoostRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 107,
							col: 2,
						},
						jsDoc: 'If this role is the nitro boost role.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'integrationID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 109,
							col: 2,
						},
						jsDoc: 'The integration id that is associated with this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 114,
							col: 2,
						},
						jsDoc:
							'The guild where this role is. If undefined, the guild is not cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'hexColor',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 116,
							col: 2,
						},
						jsDoc: 'The hex color for this role.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 118,
							col: 2,
						},
						jsDoc: 'The cached members that have this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Member',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Member',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
							line: 120,
							col: 2,
						},
						jsDoc: 'The @ mention of the role in a string.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Template',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
				line: 46,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'the template code (unique ID)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'template name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'the description for the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'usageCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 54,
							col: 2,
						},
						jsDoc: 'number of times this template has been used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'createdID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'the ID of the user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'creator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'the user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'createdAt',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 60,
							col: 2,
						},
						jsDoc: 'when this template was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'updatedAt',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'when this template was last synced to the source guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'sourceGuildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 64,
							col: 2,
						},
						jsDoc: 'the ID of the guild this template is based on',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'serializedSourceGuild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 66,
							col: 2,
						},
						jsDoc: 'the guild snapshot this template contains',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'Guild',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Guild',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'isDirty',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 68,
							col: 2,
						},
						jsDoc: 'whether the template has unsynced changes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'sourceGuild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
							line: 72,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'Guild',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'Guild',
									},
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 130,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'makeAvatarURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 169,
							col: 2,
						},
						jsDoc:
							'Returns the avatar url for this member and can be dynamically modified with a size or format',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: '',
									kind: 'typeLiteral',
									typeLiteral: {
										methods: [],
										properties: [
											{
												name: 'size',
												params: [],
												computed: false,
												optional: true,
												tsType: {
													repr: 'ImageSize',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'ImageSize',
													},
												},
												typeParams: [],
											},
											{
												name: 'format',
												params: [],
												computed: false,
												optional: true,
												tsType: {
													repr: 'ImageFormats',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'ImageFormats',
													},
												},
												typeParams: [],
											},
										],
										callSignatures: [],
										indexSignatures: [],
									},
								},
							},
						],
						returnType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 171,
							col: 2,
						},
						jsDoc: 'Returns the guild for this guildID',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'Guild',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'Guild',
									},
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'Get the nickname or the username if no nickname',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'Get the guild member object for the specified guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'GuildMember',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GuildMember',
									},
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'sendDM',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 177,
							col: 2,
						},
						jsDoc: 'Send a direct message to the user is possible',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendDirectMessage',
										kind: 'typeQuery',
										typeQuery: 'sendDirectMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'kick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 181,
							col: 2,
						},
						jsDoc: 'Kick the member from a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'kick',
										kind: 'typeQuery',
										typeQuery: 'kick',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 183,
							col: 2,
						},
						jsDoc: 'Edit the member in a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'EditMemberOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'EditMemberOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editMember',
										kind: 'typeQuery',
										typeQuery: 'editMember',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'ban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 188,
							col: 2,
						},
						jsDoc: 'Ban a member in a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'BanOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'BanOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'ban',
										kind: 'typeQuery',
										typeQuery: 'ban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 190,
							col: 2,
						},
						jsDoc: 'Add a role to the member',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addRole',
										kind: 'typeQuery',
										typeQuery: 'addRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'Remove a role from the member',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeRole',
										kind: 'typeQuery',
										typeQuery: 'removeRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 132,
							col: 2,
						},
						jsDoc: "The user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 134,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 136,
							col: 2,
						},
						jsDoc: "The user's 4 digit discord tag",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 138,
							col: 2,
						},
						jsDoc: "The user's avatar hash",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 140,
							col: 2,
						},
						jsDoc: 'Whether the user is a bot',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'system',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 142,
							col: 2,
						},
						jsDoc:
							'Whether the user is an official discord system user (part of the urgent message system.)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 144,
							col: 2,
						},
						jsDoc: "the user's chosen language option",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 146,
							col: 2,
						},
						jsDoc: 'Whether the email on this account has been verified',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'email',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 148,
							col: 2,
						},
						jsDoc: "The user's email",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 150,
							col: 2,
						},
						jsDoc: "The flags on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'mfaEnabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 152,
							col: 2,
						},
						jsDoc: 'Whether or not this user has 2FA enabled.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'premiumType',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 154,
							col: 2,
						},
						jsDoc: 'The premium type for this user',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'guilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'The guild related data mapped by guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'GuildMember',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'GuildMember',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'avatarURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 160,
							col: 2,
						},
						jsDoc: 'The avatar url using the default format and size.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 162,
							col: 2,
						},
						jsDoc: 'The mention string for this member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'tag',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 164,
							col: 2,
						},
						jsDoc: 'The username#discriminator tag for this member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'variable',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 9,
				col: 0,
			},
			jsDoc:
				'This is the placeholder where the structure creation functions are kept.',
			variableDef: {
				tsType: null,
				kind: 'let',
			},
		},
		{
			kind: 'typeAlias',
			name: 'Structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: 'structures',
					kind: 'typeQuery',
					typeQuery: 'structures',
				},
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'updateStructures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 25,
				col: 0,
			},
			jsDoc:
				'This function is used to update/reload/customize the internal structures of Discordeno.\n\n ⚠️ **ADVANCED USE ONLY: If you customize this incorrectly, you could potentially create many new errors/bugs.\nPlease take caution when using this.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'newStructures',
						optional: false,
						tsType: {
							repr: 'Structures',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Structures',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'createChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				imported: 'createChannel',
			},
		},
		{
			kind: 'import',
			name: 'createGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'createGuild',
			},
		},
		{
			kind: 'import',
			name: 'createMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				imported: 'createMember',
			},
		},
		{
			kind: 'import',
			name: 'createMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				imported: 'createMessage',
			},
		},
		{
			kind: 'import',
			name: 'createRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				imported: 'createRole',
			},
		},
		{
			kind: 'import',
			name: 'createTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/template.ts',
				imported: 'createTemplate',
			},
		},
		{
			kind: 'function',
			name: 'rawAvatarURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 24,
				col: 0,
			},
			jsDoc:
				"The users custom avatar or the default avatar if you don't have a member object.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'userID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'discriminator',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'avatar',
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'size',
							optional: false,
							tsType: {
								repr: 'ImageSize',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ImageSize',
								},
							},
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'identifier',
						name: 'format',
						optional: true,
						tsType: {
							repr: 'ImageFormats',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ImageFormats',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'avatarURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 37,
				col: 0,
			},
			jsDoc: 'The users custom avatar or the default avatar',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'member',
						optional: false,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'size',
							optional: false,
							tsType: {
								repr: 'ImageSize',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ImageSize',
								},
							},
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'identifier',
						name: 'format',
						optional: true,
						tsType: {
							repr: 'ImageFormats',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ImageFormats',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'addRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 52,
				col: 0,
			},
			jsDoc: 'Add a role to the member',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'roleID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'removeRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 87,
				col: 0,
			},
			jsDoc: 'Remove a role from the member',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'roleID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'sendDirectMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 123,
				col: 0,
			},
			jsDoc:
				'Send a message to a users DM. Note: this takes 2 API calls. 1 is to fetch the users dm channel. 2 is to send a message to that channel.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'content',
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'MessageContent',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageContent',
									},
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'kick',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 147,
				col: 0,
			},
			jsDoc: 'Kick a member from the server',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 171,
				col: 0,
			},
			jsDoc: 'Edit the member',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditMemberOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditMemberOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'moveMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 241,
				col: 0,
			},
			jsDoc:
				'Move a member from a voice channel to another.\n@param guildID the id of the guild which the channel exists in\n@param memberID the id of the member to move.\n@param channelID id of channel to move user to (if they are connected to voice)',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'kickFromVoiceChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 250,
				col: 0,
			},
			jsDoc: 'Kicks a member from a voice channel',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editBotProfile',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 257,
				col: 0,
			},
			jsDoc:
				"Modifies the bot's username or avatar.\nNOTE: username: if changed may cause the bot's discriminator to be randomized.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'username',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'botAvatarURL',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editBotNickname',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 289,
				col: 0,
			},
			jsDoc: 'Edit the nickname of the bot in this guild',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'nickname',
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'botID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botID',
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'DMChannelCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DMChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'EditMemberOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditMemberOptions',
			},
		},
		{
			kind: 'import',
			name: 'Errors',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Errors',
			},
		},
		{
			kind: 'import',
			name: 'ImageFormats',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageFormats',
			},
		},
		{
			kind: 'import',
			name: 'ImageSize',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageSize',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'import',
			name: 'botHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasPermission',
			},
		},
		{
			kind: 'import',
			name: 'higherRolePosition',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'higherRolePosition',
			},
		},
		{
			kind: 'import',
			name: 'highestRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'highestRole',
			},
		},
		{
			kind: 'import',
			name: 'formatImageURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'formatImageURL',
			},
		},
		{
			kind: 'import',
			name: 'urlToBase64',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'urlToBase64',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'sendMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				line: 21,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				imported: 'sendMessage',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalChannelCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalChannelDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 21,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalChannelUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 56,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'ChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 7,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'function',
			name: 'allowNextShard',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 24,
				col: 0,
			},
			jsDoc:
				'This function is meant to be used on the ready event to alert the library to start the next shard.',
			functionDef: {
				params: [
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'enabled',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'spawnShards',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 28,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordBotGatewayData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordBotGatewayData',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'DiscordIdentify',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIdentify',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
					{
						kind: 'identifier',
						name: 'lastShardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
					{
						kind: 'identifier',
						name: 'skipChecks',
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleDiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 74,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'requestAllMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 94,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'resolve',
						optional: false,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'void',
									kind: 'keyword',
									keyword: 'void',
								},
								params: [
									{
										kind: 'identifier',
										name: 'value',
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'Collection',
													kind: 'typeRef',
													typeRef: {
														typeParams: [
															{
																repr: 'string',
																kind: 'keyword',
																keyword: 'string',
															},
															{
																repr: 'Member',
																kind: 'typeRef',
																typeRef: {
																	typeParams: null,
																	typeName: 'Member',
																},
															},
														],
														typeName: 'Collection',
													},
												},
												{
													repr: 'PromiseLike',
													kind: 'typeRef',
													typeRef: {
														typeParams: [
															{
																repr: 'Collection',
																kind: 'typeRef',
																typeRef: {
																	typeParams: [
																		{
																			repr: 'string',
																			kind: 'keyword',
																			keyword: 'string',
																		},
																		{
																			repr: 'Member',
																			kind: 'typeRef',
																			typeRef: {
																				typeParams: null,
																				typeName: 'Member',
																			},
																		},
																	],
																	typeName: 'Collection',
																},
															},
														],
														typeName: 'PromiseLike',
													},
												},
											],
										},
									},
								],
								typeParams: [],
							},
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'FetchMembersOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'FetchMembersOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'sendGatewayCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 112,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'type',
						optional: false,
						tsType: {
							repr: 'EDIT_BOTS_STATUS',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'EDIT_BOTS_STATUS',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'any',
										kind: 'keyword',
										keyword: 'any',
									},
								],
								typeName: 'Record',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'controllers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				imported: 'controllers',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'DiscordBotGatewayData',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordBotGatewayData',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIdentify',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordIdentify',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'FetchMembersOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'FetchMembersOptions',
			},
		},
		{
			kind: 'import',
			name: 'GatewayOpcode',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GatewayOpcode',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'BotStatusRequest',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'BotStatusRequest',
			},
		},
		{
			kind: 'import',
			name: 'delay',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'delay',
			},
		},
		{
			kind: 'import',
			name: 'botGatewayStatusRequest',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/mod.ts',
				imported: 'botGatewayStatusRequest',
			},
		},
		{
			kind: 'import',
			name: 'createShard',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/mod.ts',
				imported: 'createShard',
			},
		},
		{
			kind: 'import',
			name: 'requestGuildMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/mod.ts',
				imported: 'requestGuildMembers',
			},
		},
		{
			kind: 'interface',
			name: 'BasicShard',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 23,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'ws',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 24,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'WebSocket',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'WebSocket',
							},
						},
						typeParams: [],
					},
					{
						name: 'resumeInterval',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 25,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'sessionID',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 26,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'previousSequenceNumber',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 27,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'needToResume',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
							line: 28,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createShard',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 38,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordBotGatewayData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordBotGatewayData',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'identifyPayload',
						optional: false,
						tsType: {
							repr: 'DiscordIdentify',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIdentify',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'resuming',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'shardID',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'requestGuildMembers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 279,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
					{
						kind: 'identifier',
						name: 'nonce',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'FetchMembersOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'FetchMembersOptions',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'queuedRequest',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'botGatewayStatusRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 386,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'BotStatusRequest',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'BotStatusRequest',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'sendWS',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 406,
				col: 0,
			},
			jsDoc:
				'Enqueues the specified data to be transmitted to the server over the WebSocket connection,',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'shardID',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'closeWS',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 417,
				col: 0,
			},
			jsDoc: 'Closes the WebSocket connection or connection attempt',
			functionDef: {
				params: [
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'shardID',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'botGatewayData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botGatewayData',
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'proxyWSURL',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'proxyWSURL',
			},
		},
		{
			kind: 'import',
			name: 'DiscordBotGatewayData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordBotGatewayData',
			},
		},
		{
			kind: 'import',
			name: 'DiscordHeartbeatPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordHeartbeatPayload',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIdentify',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordIdentify',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'FetchMembersOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'FetchMembersOptions',
			},
		},
		{
			kind: 'import',
			name: 'GatewayOpcode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GatewayOpcode',
			},
		},
		{
			kind: 'import',
			name: 'ReadyPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ReadyPayload',
			},
		},
		{
			kind: 'import',
			name: 'BotStatusRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'BotStatusRequest',
			},
		},
		{
			kind: 'import',
			name: 'delay',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'delay',
			},
		},
		{
			kind: 'import',
			name: 'decompressWith',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/deps.ts',
				imported: 'decompressWith',
			},
		},
		{
			kind: 'import',
			name: 'handleDiscordPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				imported: 'handleDiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 39,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 67,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalGuildEmojisUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 110,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildDeletePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildDeletePayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildEmojisUpdatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildEmojisUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'GuildUpdateChange',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildUpdateChange',
			},
		},
		{
			kind: 'import',
			name: 'UpdateGuildPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UpdateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'variable',
			name: 'authorization',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: '',
					kind: 'keyword',
					keyword: 'string',
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'restAuthorization',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: '',
					kind: 'keyword',
					keyword: 'string',
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'botID',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: '',
					kind: 'keyword',
					keyword: 'string',
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'applicationID',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: '',
					kind: 'keyword',
					keyword: 'string',
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'eventHandlers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'EventHandlers',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'EventHandlers',
					},
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'botGatewayData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'DiscordBotGatewayData',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'DiscordBotGatewayData',
					},
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'proxyWSURL',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'string',
					kind: 'keyword',
					keyword: 'string',
				},
				kind: 'let',
			},
		},
		{
			kind: 'variable',
			name: 'identifyPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'DiscordIdentify',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'DiscordIdentify',
					},
				},
				kind: 'const',
			},
		},
		{
			kind: 'interface',
			name: 'IdentifyPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 35,
				col: 0,
			},
			jsDoc: '@deprecated Use "DiscordIdentify" instead',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'token',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 36,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'compress',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 37,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'properties',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 38,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: '$os',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
									{
										name: '$browser',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
									{
										name: '$device',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'intents',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 43,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'shard',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 44,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'startBot',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'config',
						optional: false,
						tsType: {
							repr: 'BotConfig',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'BotConfig',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'updateEventHandlers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 69,
				col: 0,
			},
			jsDoc:
				'Allows you to dynamically update the event handlers by passing in new eventHandlers',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'newEventHandlers',
						optional: false,
						tsType: {
							repr: 'EventHandlers',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EventHandlers',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'setBotID',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 77,
				col: 0,
			},
			jsDoc:
				'INTERNAL LIB function used to set the bot ID once the READY event is sent by Discord.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'setApplicationID',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 82,
				col: 0,
			},
			jsDoc:
				'INTERNAL LIB function used to set the application ID once the READY event is sent by Discord.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'startBigBrainBot',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 94,
				col: 0,
			},
			jsDoc:
				'This function should be used only by bot developers whose bots are in over 25,000 servers.\nPlease be aware if you are a beginner developer using this, things will not work as per the guides. This is for advanced developers only!\n\nAdvanced Devs: This function will allow you to have an insane amount of customization potential as when you get to large bots you need to be able to optimize every tiny detail to make you bot work the way you need.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'BigBrainBotConfig',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'BigBrainBotConfig',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BigBrainBotConfig',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 127,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BotConfig',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BotConfig',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'firstShardID',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 129,
							col: 2,
						},
						jsDoc:
							'The first shard to start at for this worker. Use this to control which shards to run in each worker.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'lastShardID',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 131,
							col: 2,
						},
						jsDoc:
							'The last shard to start for this worker. By default it will be 25 + the firstShardID.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'wsURL',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 133,
							col: 2,
						},
						jsDoc: 'This can be used to forward the ws handling to a proxy.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'restURL',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 135,
							col: 2,
						},
						jsDoc: 'This can be used to forward the REST handling to a proxy.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cdnURL',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 137,
							col: 2,
						},
						jsDoc: 'This can be used to forward the CDN handling to a proxy.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'restAuthorization',
						location: {
							filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
							line: 139,
							col: 2,
						},
						jsDoc:
							'This is the authorization header that your rest proxy will validate',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'getGatewayBot',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/gateway.ts',
				imported: 'getGatewayBot',
			},
		},
		{
			kind: 'import',
			name: 'BotConfig',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BotConfig',
			},
		},
		{
			kind: 'import',
			name: 'DiscordBotGatewayData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordBotGatewayData',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIdentify',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordIdentify',
			},
		},
		{
			kind: 'import',
			name: 'EventHandlers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'Intents',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Intents',
			},
		},
		{
			kind: 'import',
			name: 'baseEndpoints',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'baseEndpoints',
			},
		},
		{
			kind: 'import',
			name: 'GATEWAY_VERSION',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'GATEWAY_VERSION',
			},
		},
		{
			kind: 'import',
			name: 'spawnShards',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				imported: 'spawnShards',
			},
		},
		{
			kind: 'interface',
			name: 'CacheData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'isReady',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 6,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'guilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 7,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Guild',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Guild',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 8,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Channel',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Channel',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'messages',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 9,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Message',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Message',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 10,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Member',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Member',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'unavailableGuilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 11,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'number',
										kind: 'keyword',
										keyword: 'number',
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 12,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'PresenceUpdatePayload',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'PresenceUpdatePayload',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'fetchAllMembersProcessingRequests',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 13,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'void',
												kind: 'keyword',
												keyword: 'void',
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: '',
														kind: 'union',
														union: [
															{
																repr: 'Collection',
																kind: 'typeRef',
																typeRef: {
																	typeParams: [
																		{
																			repr: 'string',
																			kind: 'keyword',
																			keyword: 'string',
																		},
																		{
																			repr: 'Member',
																			kind: 'typeRef',
																			typeRef: {
																				typeParams: null,
																				typeName: 'Member',
																			},
																		},
																	],
																	typeName: 'Collection',
																},
															},
															{
																repr: 'PromiseLike',
																kind: 'typeRef',
																typeRef: {
																	typeParams: [
																		{
																			repr: 'Collection',
																			kind: 'typeRef',
																			typeRef: {
																				typeParams: [
																					{
																						repr: 'string',
																						kind: 'keyword',
																						keyword: 'string',
																					},
																					{
																						repr: 'Member',
																						kind: 'typeRef',
																						typeRef: {
																							typeParams: null,
																							typeName: 'Member',
																						},
																					},
																				],
																				typeName: 'Collection',
																			},
																		},
																	],
																	typeName: 'PromiseLike',
																},
															},
														],
													},
												},
											],
											typeParams: [],
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'executedSlashCommands',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
							line: 21,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'variable',
			name: 'cache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'CacheData',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'CacheData',
					},
				},
				kind: 'const',
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Message',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Message',
			},
		},
		{
			kind: 'import',
			name: 'PresenceUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PresenceUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'class',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			classDef: {
				isAbstract: false,
				constructors: [],
				properties: [
					{
						jsDoc: null,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						readonly: false,
						accessibility: null,
						optional: true,
						isAbstract: false,
						isStatic: false,
						name: 'maxSize',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 4,
							col: 2,
						},
					},
				],
				indexSignatures: [],
				methods: [
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'set',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'key',
									optional: false,
									tsType: {
										repr: 'K',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'K',
										},
									},
								},
								{
									kind: 'identifier',
									name: 'value',
									optional: false,
									tsType: {
										repr: 'V',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'V',
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 6,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'array',
						kind: 'method',
						functionDef: {
							params: [],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 15,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'first',
						kind: 'method',
						functionDef: {
							params: [],
							returnType: {
								repr: 'V',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'V',
								},
							},
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 19,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'last',
						kind: 'method',
						functionDef: {
							params: [],
							returnType: {
								repr: 'V',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'V',
								},
							},
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 23,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'random',
						kind: 'method',
						functionDef: {
							params: [],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 27,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'find',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'boolean',
												kind: 'keyword',
												keyword: 'boolean',
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 31,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'filter',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'boolean',
												kind: 'keyword',
												keyword: 'boolean',
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 40,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'map',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'T',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'T',
												},
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [
								{
									name: 'T',
								},
							],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 49,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'some',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'boolean',
												kind: 'keyword',
												keyword: 'boolean',
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 58,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'every',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'boolean',
												kind: 'keyword',
												keyword: 'boolean',
											},
											params: [
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
							],
							returnType: null,
							isAsync: false,
							isGenerator: false,
							typeParams: [],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 67,
							col: 2,
						},
					},
					{
						jsDoc: null,
						accessibility: null,
						optional: false,
						isAbstract: false,
						isStatic: false,
						name: 'reduce',
						kind: 'method',
						functionDef: {
							params: [
								{
									kind: 'identifier',
									name: 'callback',
									optional: false,
									tsType: {
										repr: '',
										kind: 'fnOrConstructor',
										fnOrConstructor: {
											constructor: false,
											tsType: {
												repr: 'T',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'T',
												},
											},
											params: [
												{
													kind: 'identifier',
													name: 'accumulator',
													optional: false,
													tsType: {
														repr: 'T',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'T',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'value',
													optional: false,
													tsType: {
														repr: 'V',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'V',
														},
													},
												},
												{
													kind: 'identifier',
													name: 'key',
													optional: false,
													tsType: {
														repr: 'K',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'K',
														},
													},
												},
											],
											typeParams: [],
										},
									},
								},
								{
									kind: 'identifier',
									name: 'initialValue',
									optional: true,
									tsType: {
										repr: 'T',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'T',
										},
									},
								},
							],
							returnType: {
								repr: 'T',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'T',
								},
							},
							isAsync: false,
							isGenerator: false,
							typeParams: [
								{
									name: 'T',
								},
							],
						},
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
							line: 76,
							col: 2,
						},
					},
				],
				extends: 'Map',
				implements: [],
				typeParams: [
					{
						name: 'K',
					},
					{
						name: 'V',
					},
				],
				superTypeParams: [
					{
						repr: 'K',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'K',
						},
					},
					{
						repr: 'V',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'V',
						},
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'chooseRandom',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'chooseRandom',
			},
		},
		{
			kind: 'function',
			name: 'startRESTServer',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 8,
				col: 0,
			},
			jsDoc: 'Begins an http server that will handle incoming requests.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'RestServerOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RestServerOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'restCache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/cache.ts',
				imported: 'restCache',
			},
		},
		{
			kind: 'import',
			name: 'serve',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/deps.ts',
				imported: 'serve',
			},
		},
		{
			kind: 'import',
			name: 'ServerRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/deps.ts',
				imported: 'ServerRequest',
			},
		},
		{
			kind: 'import',
			name: 'serveTLS',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/deps.ts',
				imported: 'serveTLS',
			},
		},
		{
			kind: 'import',
			name: 'processRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				imported: 'processRequest',
			},
		},
		{
			kind: 'import',
			name: 'RestServerOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/server.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'RestServerOptions',
			},
		},
		{
			kind: 'variable',
			name: 'restCache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/cache.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'RestCache',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'RestCache',
					},
				},
				kind: 'const',
			},
		},
		{
			kind: 'import',
			name: 'RestCache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/cache.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'RestCache',
			},
		},
		{
			kind: 'function',
			name: 'processQueue',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 7,
				col: 0,
			},
			jsDoc:
				'Processes the queue by looping over each path separately until the queues are empty.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'cleanupQueues',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 160,
				col: 0,
			},
			jsDoc:
				'Cleans up the queues by checking if there is nothing left and removing it.',
			functionDef: {
				params: [],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'checkRateLimits',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 172,
				col: 0,
			},
			jsDoc: 'Check the rate limits for a url or a bucket.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'url',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'delay',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'delay',
			},
		},
		{
			kind: 'import',
			name: 'restCache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/cache.ts',
				imported: 'restCache',
			},
		},
		{
			kind: 'import',
			name: 'createRequestBody',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				imported: 'createRequestBody',
			},
		},
		{
			kind: 'import',
			name: 'processRequestHeaders',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				imported: 'processRequestHeaders',
			},
		},
		{
			kind: 'import',
			name: 'HttpResponseCode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'HttpResponseCode',
			},
		},
		{
			kind: 'function',
			name: 'processRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 12,
				col: 0,
			},
			jsDoc:
				'Processes a request and assigns it to a queue or creates a queue if none exists for it.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'request',
						optional: false,
						tsType: {
							repr: 'ServerRequest',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ServerRequest',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'payload',
						optional: false,
						tsType: {
							repr: 'RunMethodOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RunMethodOptions',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'RestServerOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RestServerOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createRequestBody',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 46,
				col: 0,
			},
			jsDoc:
				'Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'queuedRequest',
						optional: false,
						tsType: {
							repr: 'QueuedRequest',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'QueuedRequest',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'processRequestHeaders',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 93,
				col: 0,
			},
			jsDoc:
				'Processes the rate limit headers and determines if it needs to be ratelimited and returns the bucket id if available',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'url',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'headers',
						optional: false,
						tsType: {
							repr: 'Headers',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Headers',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'BASE_URL',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'BASE_URL',
			},
		},
		{
			kind: 'import',
			name: 'USER_AGENT',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'USER_AGENT',
			},
		},
		{
			kind: 'import',
			name: 'restCache',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/cache.ts',
				imported: 'restCache',
			},
		},
		{
			kind: 'import',
			name: 'ServerRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/deps.ts',
				imported: 'ServerRequest',
			},
		},
		{
			kind: 'import',
			name: 'processQueue',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/queue.ts',
				imported: 'processQueue',
			},
		},
		{
			kind: 'import',
			name: 'QueuedRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'QueuedRequest',
			},
		},
		{
			kind: 'import',
			name: 'RestServerOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'RestServerOptions',
			},
		},
		{
			kind: 'import',
			name: 'RunMethodOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/rest/request.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/rest/types/mod.ts',
				imported: 'RunMethodOptions',
			},
		},
		{
			kind: 'function',
			name: 'createServer',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 47,
				col: 0,
			},
			jsDoc:
				'Create a new guild. Returns a guild object on success. Fires a Guild Create Gateway event. This endpoint can be used only by bots in less than 10 guilds.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateServerOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateServerOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteServer',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 58,
				col: 0,
			},
			jsDoc:
				'Delete a guild permanently. User must be owner. Returns 204 No Content on success. Fires a Guild Delete Gateway event.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'categoryChildrenIDs',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 65,
				col: 0,
			},
			jsDoc:
				'Gets an array of all the channels ids that are the children of this category.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'guildIconURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 73,
				col: 0,
			},
			jsDoc:
				'The full URL of the icon from Discords CDN. Undefined when no icon is set.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'size',
							optional: false,
							tsType: {
								repr: 'ImageSize',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ImageSize',
								},
							},
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'identifier',
						name: 'format',
						optional: true,
						tsType: {
							repr: 'ImageFormats',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ImageFormats',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'guildSplashURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 84,
				col: 0,
			},
			jsDoc:
				'The full URL of the splash from Discords CDN. Undefined if no splash is set.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'size',
							optional: false,
							tsType: {
								repr: 'ImageSize',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ImageSize',
								},
							},
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'identifier',
						name: 'format',
						optional: true,
						tsType: {
							repr: 'ImageFormats',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ImageFormats',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'guildBannerURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 99,
				col: 0,
			},
			jsDoc:
				'The full URL of the banner from Discords CDN. Undefined if no banner is set.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'size',
							optional: false,
							tsType: {
								repr: 'ImageSize',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ImageSize',
								},
							},
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
					{
						kind: 'identifier',
						name: 'format',
						optional: true,
						tsType: {
							repr: 'ImageFormats',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ImageFormats',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createGuildChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 114,
				col: 0,
			},
			jsDoc:
				'Create a channel in your server. Bot needs MANAGE_CHANNEL permissions in the server.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'name',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'ChannelCreateOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelCreateOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 148,
				col: 0,
			},
			jsDoc:
				'Delete a channel in your server. Bot needs MANAGE_CHANNEL permissions in the server.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getChannels',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 184,
				col: 0,
			},
			jsDoc:
				'Returns a list of guild channel objects.\n\n⚠️ **If you need this, you are probably doing something wrong. This is not intended for use. Your channels will be cached in your guild.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'addToCache',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 203,
				col: 0,
			},
			jsDoc:
				'Fetches a single channel object from the api.\n\n⚠️ **If you need this, you are probably doing something wrong. This is not intended for use. Your channels will be cached in your guild.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'addToCache',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'swapChannels',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 217,
				col: 0,
			},
			jsDoc:
				'Modify the positions of channels on the guild. Requires MANAGE_CHANNELS permisison.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'channelPositions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'PositionSwap',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'PositionSwap',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editChannelOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 234,
				col: 0,
			},
			jsDoc:
				'Edit the channel permission overwrites for a user or role in this channel. Requires `MANAGE_ROLES` permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'overwriteID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'Omit',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'Overwrite',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Overwrite',
										},
									},
									{
										repr: 'id',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'id',
										},
									},
								],
								typeName: 'Omit',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteChannelOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 261,
				col: 0,
			},
			jsDoc:
				'Delete the channel permission overwrites for a user or role in this channel. Requires `MANAGE_ROLES` permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'overwriteID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 285,
				col: 0,
			},
			jsDoc:
				'Returns a guild member object for the specified user.\n\n⚠️ **ADVANCED USE ONLY: Your members will be cached in your guild most likely. Only use this when you are absolutely sure the member is not cached.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'force',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: 'boolean',
											kind: 'keyword',
											keyword: 'boolean',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getMembersByQuery',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 308,
				col: 0,
			},
			jsDoc:
				'Returns guild member objects for the specified user by their nickname/username.\n\n⚠️ **ADVANCED USE ONLY: Your members will be cached in your guild most likely. Only use this when you are absolutely sure the member is not cached.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'name',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'limit',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 322,
				col: 0,
			},
			jsDoc:
				'Create an emoji in the server. Emojis and animated emojis have a maximum file size of 256kb. Attempting to upload an emoji larger than this limit will fail and return 400 Bad Request and an error message, but not a JSON status code. If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'name',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'image',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateEmojisOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateEmojisOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 347,
				col: 0,
			},
			jsDoc: 'Modify the given emoji. Requires the MANAGE_EMOJIS permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditEmojisOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditEmojisOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 369,
				col: 0,
			},
			jsDoc:
				'Delete the given emoji. Requires the MANAGE_EMOJIS permission. Returns 204 No Content on success.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'emojiURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 388,
				col: 0,
			},
			jsDoc: 'Creates a url to the emoji from the Discord CDN.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'animated',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getEmojis',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 397,
				col: 0,
			},
			jsDoc:
				'Returns a list of emojis for the given guild.\n\n⚠️ **If you need this, you are probably doing something wrong. Always use cache.guilds.get()?.emojis',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'addToCache',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 417,
				col: 0,
			},
			jsDoc:
				'Returns an emoji for the given guild and emoji ID.\n\n⚠️ **If you need this, you are probably doing something wrong. Always use cache.guilds.get()?.emojis',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'emojiID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'addToCache',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createGuildRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 441,
				col: 0,
			},
			jsDoc:
				'Create a new role for the guild. Requires the MANAGE_ROLES permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateRoleOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateRoleOptions',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 469,
				col: 0,
			},
			jsDoc: 'Edit a guild role. Requires the MANAGE_ROLES permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateRoleOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateRoleOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 490,
				col: 0,
			},
			jsDoc: 'Delete a guild role. Requires the MANAGE_ROLES permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getRoles',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 505,
				col: 0,
			},
			jsDoc:
				'Returns a list of role objects for the guild.\n\n⚠️ **If you need this, you are probably doing something wrong. This is not intended for use. Your roles will be cached in your guild.**',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'swapRoles',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 517,
				col: 0,
			},
			jsDoc:
				'Modify the positions of a set of role objects for the guild. Requires the MANAGE_ROLES permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'rolePositons',
						optional: false,
						tsType: {
							repr: 'PositionSwap',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'PositionSwap',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getPruneCount',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 532,
				col: 0,
			},
			jsDoc:
				'Check how many members would be removed from the server in a prune operation. Requires the KICK_MEMBERS permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'PruneOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'PruneOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'pruneMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 556,
				col: 0,
			},
			jsDoc:
				"Begin a prune operation. Requires the KICK_MEMBERS permission. Returns an object with one 'pruned' key indicating the number of members that were removed in the prune operation. For large guilds it's recommended to set the computePruneCount option to false, forcing 'pruned' to null. Fires multiple Guild Member Remove Gateway events.\n\nBy default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the roles (resolved to include_roles internally) parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'object',
						props: [
							{
								kind: 'assign',
								key: 'roles',
								value: null,
							},
							{
								kind: 'assign',
								key: 'computePruneCount',
								value: null,
							},
							{
								kind: 'rest',
								arg: {
									kind: 'identifier',
									name: 'options',
									optional: false,
									tsType: null,
								},
							},
						],
						optional: false,
						tsType: {
							repr: 'PruneOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'PruneOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'fetchMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 588,
				col: 0,
			},
			jsDoc:
				'⚠️ BEGINNER DEVS!! YOU SHOULD ALMOST NEVER NEED THIS AND YOU CAN GET FROM cache.members.get()\n\nADVANCED:\nHighly recommended to use this function to fetch members instead of getMember from REST.\nREST: 50/s global(across all shards) rate limit with ALL requests this included\nGW(this function): 120/m(PER shard) rate limit. Meaning if you have 8 shards your limit is now 960/m.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'FetchMembersOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'FetchMembersOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 614,
				col: 0,
			},
			jsDoc:
				'⚠️ BEGINNER DEVS!! YOU SHOULD ALMOST NEVER NEED THIS AND YOU CAN GET FROM cache.members.get()\n\nADVANCED:\nHighly recommended to **NOT** use this function to get members instead use fetchMembers().\nREST(this function): 50/s global(across all shards) rate limit with ALL requests this included\nGW(fetchMembers): 120/m(PER shard) rate limit. Meaning if you have 8 shards your limit is 960/m.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: 'GetMemberOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GetMemberOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getAuditLogs',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 674,
				col: 0,
			},
			jsDoc:
				'Returns the audit logs for the guild. Requires VIEW AUDIT LOGS permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'GetAuditLogsOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GetAuditLogsOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getEmbed',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 697,
				col: 0,
			},
			jsDoc:
				'Returns the guild embed object. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editEmbed',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 709,
				col: 0,
			},
			jsDoc:
				'Modify a guild embed object for the guild. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'enabled',
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
					},
					{
						kind: 'identifier',
						name: 'channelID',
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getVanityURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 728,
				col: 0,
			},
			jsDoc:
				'Returns the code and uses of the vanity url for this server if it is enabled. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getIntegrations',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 735,
				col: 0,
			},
			jsDoc:
				'Returns a list of integrations for the guild. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 749,
				col: 0,
			},
			jsDoc:
				'Modify the behavior and settings of an integration object for the guild. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditIntegrationOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditIntegrationOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 768,
				col: 0,
			},
			jsDoc:
				'Delete the attached integration object for the guild with this id. Requires MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'syncIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 782,
				col: 0,
			},
			jsDoc: 'Sync an integration. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getBans',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 796,
				col: 0,
			},
			jsDoc:
				'Returns a list of ban objects for the users banned from this guild. Requires the BAN_MEMBERS permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getBan',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 812,
				col: 0,
			},
			jsDoc:
				'Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the BAN_MEMBERS permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'ban',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 826,
				col: 0,
			},
			jsDoc:
				'Ban a user from the guild and optionally delete previous messages sent by the user. Requires the BAN_MEMBERS permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'BanOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'BanOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'unban',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 841,
				col: 0,
			},
			jsDoc: 'Remove the ban for a user. Requires BAN_MEMBERS permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getGuildPreview',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 853,
				col: 0,
			},
			jsDoc:
				'Returns the guild preview object for the given id. If the bot is not in the guild, then the guild must be Discoverable.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 860,
				col: 0,
			},
			jsDoc: 'Modify a guilds settings. Requires the MANAGE_GUILD permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'GuildEditOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GuildEditOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getInvites',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 887,
				col: 0,
			},
			jsDoc:
				'Get all the invites for this guild. Requires MANAGE_GUILD permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'leaveGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 899,
				col: 0,
			},
			jsDoc: 'Leave a guild',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getAvailableVoiceRegions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 906,
				col: 0,
			},
			jsDoc:
				'Returns an array of voice regions that can be used when creating servers.',
			functionDef: {
				params: [],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getVoiceRegions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 913,
				col: 0,
			},
			jsDoc:
				'Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getWebhooks',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 920,
				col: 0,
			},
			jsDoc:
				'Returns a list of guild webhooks objects. Requires the MANAGE_WEBHOOKs permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 935,
				col: 0,
			},
			jsDoc:
				'This function will return the raw user payload in the rare cases you need to fetch a user directly from the API.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'userID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 950,
				col: 0,
			},
			jsDoc:
				"⚠️ **If you need this, you are probably doing something wrong. Always use cache.guilds.get()\n\nAdvanced Devs:\nThis function fetches a guild's data. This is not the same data as a GUILD_CREATE.\nSo it does not cache the guild, you must do it manually.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'counts',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 960,
				col: 0,
			},
			jsDoc: 'Returns the guild template if it exists',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 973,
				col: 0,
			},
			jsDoc:
				'Returns the guild template if it exists\n@deprecated will get removed in v11 use `getTemplate` instead',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createGuildFromTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 984,
				col: 0,
			},
			jsDoc:
				'Create a new guild based on a template\nNOTE: This endpoint can be used only by bots in less than 10 guilds.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'CreateGuildFromTemplate',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateGuildFromTemplate',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getGuildTemplates',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1010,
				col: 0,
			},
			jsDoc:
				'Returns an array of templates.\nRequires the `MANAGE_GUILD` permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1025,
				col: 0,
			},
			jsDoc:
				'Deletes a template from a guild.\nRequires the `MANAGE_GUILD` permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1045,
				col: 0,
			},
			jsDoc:
				'Creates a template for the guild.\nRequires the `MANAGE_GUILD` permission.\n@param name name of the template (1-100 characters)\n@param description description for the template (0-120 characters',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'CreateGuildTemplate',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateGuildTemplate',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'syncGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1075,
				col: 0,
			},
			jsDoc:
				"Syncs the template to the guild's current state.\nRequires the `MANAGE_GUILD` permission.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1090,
				col: 0,
			},
			jsDoc:
				"Edit a template's metadata.\nRequires the `MANAGE_GUILD` permission.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'templateCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'EditGuildTemplate',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditGuildTemplate',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'identifyPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'identifyPayload',
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'AuditLogs',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'AuditLogs',
			},
		},
		{
			kind: 'import',
			name: 'BannedUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BannedUser',
			},
		},
		{
			kind: 'import',
			name: 'BanOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BanOptions',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'ChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'CreateEmojisOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateEmojisOptions',
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildFromTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateGuildFromTemplate',
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateGuildTemplate',
			},
		},
		{
			kind: 'import',
			name: 'CreateRoleOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateRoleOptions',
			},
		},
		{
			kind: 'import',
			name: 'CreateServerOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateServerOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditEmojisOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditEmojisOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditGuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditGuildTemplate',
			},
		},
		{
			kind: 'import',
			name: 'EditIntegrationOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditIntegrationOptions',
			},
		},
		{
			kind: 'import',
			name: 'Emoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Emoji',
			},
		},
		{
			kind: 'import',
			name: 'Errors',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Errors',
			},
		},
		{
			kind: 'import',
			name: 'FetchMembersOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'FetchMembersOptions',
			},
		},
		{
			kind: 'import',
			name: 'GetAuditLogsOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetAuditLogsOptions',
			},
		},
		{
			kind: 'import',
			name: 'GetMemberOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetMemberOptions',
			},
		},
		{
			kind: 'import',
			name: 'GuildEditOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildEditOptions',
			},
		},
		{
			kind: 'import',
			name: 'GuildTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildTemplate',
			},
		},
		{
			kind: 'import',
			name: 'ImageFormats',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageFormats',
			},
		},
		{
			kind: 'import',
			name: 'ImageSize',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageSize',
			},
		},
		{
			kind: 'import',
			name: 'Intents',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Intents',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'Overwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Overwrite',
			},
		},
		{
			kind: 'import',
			name: 'PositionSwap',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PositionSwap',
			},
		},
		{
			kind: 'import',
			name: 'PruneOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PruneOptions',
			},
		},
		{
			kind: 'import',
			name: 'PrunePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'PrunePayload',
			},
		},
		{
			kind: 'import',
			name: 'RoleData',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'RoleData',
			},
		},
		{
			kind: 'import',
			name: 'UpdateGuildPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UpdateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 38,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 39,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'import',
			name: 'botHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 40,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasPermission',
			},
		},
		{
			kind: 'import',
			name: 'calculateBits',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 40,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'calculateBits',
			},
		},
		{
			kind: 'import',
			name: 'formatImageURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 41,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'formatImageURL',
			},
		},
		{
			kind: 'import',
			name: 'urlToBase64',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 41,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'urlToBase64',
			},
		},
		{
			kind: 'import',
			name: 'requestAllMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 42,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				imported: 'requestAllMembers',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 43,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 44,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 44,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				line: 44,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'function',
			name: 'createChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 80,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'ChannelCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelCreatePayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Channel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 119,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'send',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 181,
							col: 2,
						},
						jsDoc:
							'Send a message to the channel. Requires SEND_MESSAGES permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'disconnect',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 183,
							col: 2,
						},
						jsDoc:
							'Disconnect a member from a voice channel. Requires MOVE_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'kickFromVoiceChannel',
										kind: 'typeQuery',
										typeQuery: 'kickFromVoiceChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 185,
							col: 2,
						},
						jsDoc: 'Delete the channel',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteChannel',
										kind: 'typeQuery',
										typeQuery: 'deleteChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'editOverwrite',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'Edit a channel Overwrite',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwriteID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'Omit',
									kind: 'typeRef',
									typeRef: {
										typeParams: [
											{
												repr: 'Overwrite',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Overwrite',
												},
											},
											{
												repr: 'id',
												kind: 'literal',
												literal: {
													kind: 'string',
													string: 'id',
												},
											},
										],
										typeName: 'Omit',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editChannelOverwrite',
										kind: 'typeQuery',
										typeQuery: 'editChannelOverwrite',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'deleteOverwrite',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 192,
							col: 2,
						},
						jsDoc: 'Delete a channel Overwrite',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwriteID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteChannelOverwrite',
										kind: 'typeQuery',
										typeQuery: 'deleteChannelOverwrite',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'hasPermission',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 196,
							col: 2,
						},
						jsDoc:
							'Checks if a channel overwrite for a user id or a role id has permission in this channel',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'overwrites',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'RawOverwrite',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'RawOverwrite',
										},
									},
								},
							},
							{
								kind: 'identifier',
								name: 'permissions',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'Permission',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Permission',
										},
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'channelOverwriteHasPermission',
										kind: 'typeQuery',
										typeQuery: 'channelOverwriteHasPermission',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 201,
							col: 2,
						},
						jsDoc: 'Edit the channel',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'ChannelEditOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ChannelEditOptions',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editChannel',
										kind: 'typeQuery',
										typeQuery: 'editChannel',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 121,
							col: 2,
						},
						jsDoc: 'The id of this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 123,
							col: 2,
						},
						jsDoc: 'Sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'The name of the channel (2-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 127,
							col: 2,
						},
						jsDoc: 'The channel topic (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'The bitrate (in bits) of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 131,
							col: 2,
						},
						jsDoc: 'The type of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ChannelType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelType',
							},
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 133,
							col: 2,
						},
						jsDoc: 'The guild id of the channel if it is a guild channel.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'lastMessageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 135,
							col: 2,
						},
						jsDoc: 'The id of the last message sent in this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'userLimit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 137,
							col: 2,
						},
						jsDoc: 'The amount of users allowed in this voice channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rateLimitPerUser',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 139,
							col: 2,
						},
						jsDoc:
							'The rate limit(slowmode) in this text channel that users can send messages.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'parentID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 141,
							col: 2,
						},
						jsDoc: 'The category id for this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'lastPinTimestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 143,
							col: 2,
						},
						jsDoc: 'The last time when a message was pinned in this channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissionOverwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 145,
							col: 2,
						},
						jsDoc: 'The permission overwrites for this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RawOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RawOverwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 147,
							col: 2,
						},
						jsDoc: 'Whether this channel is nsfw or not',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 156,
							col: 2,
						},
						jsDoc:
							'Gets the guild object for this channel.\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'messages',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 162,
							col: 2,
						},
						jsDoc:
							'Gets the messages from cache that were sent in this channel\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Message',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Message',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 164,
							col: 2,
						},
						jsDoc: 'The mention of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'voiceStates',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 170,
							col: 2,
						},
						jsDoc:
							'Gets the voice states for this channel\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'CleanVoiceState',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'CleanVoiceState',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'connectedMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
							line: 176,
							col: 2,
						},
						jsDoc:
							'Gets the connected members for this channel undefined if member is not cached\n\n⚠️ ADVANCED: If you use the custom cache, these will not work for you. Getters can not be async and custom cache requires async.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: '',
										kind: 'union',
										union: [
											{
												repr: 'Member',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Member',
												},
											},
											{
												repr: 'undefined',
												kind: 'keyword',
												keyword: 'undefined',
											},
										],
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'ChannelEditOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelEditOptions',
			},
		},
		{
			kind: 'import',
			name: 'ChannelType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelType',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'Overwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Overwrite',
			},
		},
		{
			kind: 'import',
			name: 'Permission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Permission',
			},
		},
		{
			kind: 'import',
			name: 'RawOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'RawOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'createNewProp',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'createNewProp',
			},
		},
		{
			kind: 'import',
			name: 'channelOverwriteHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				imported: 'channelOverwriteHasPermission',
			},
		},
		{
			kind: 'import',
			name: 'editChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				imported: 'editChannel',
			},
		},
		{
			kind: 'import',
			name: 'sendMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				imported: 'sendMessage',
			},
		},
		{
			kind: 'import',
			name: 'deleteChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'deleteChannel',
			},
		},
		{
			kind: 'import',
			name: 'deleteChannelOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'deleteChannelOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'editChannelOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'editChannelOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'kickFromVoiceChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 23,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'kickFromVoiceChannel',
			},
		},
		{
			kind: 'import',
			name: 'CleanVoiceState',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'CleanVoiceState',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 25,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Message',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				line: 26,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				imported: 'Message',
			},
		},
		{
			kind: 'variable',
			name: 'sleep',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: null,
				kind: 'const',
			},
		},
		{
			kind: 'interface',
			name: 'BotStatusRequest',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
							line: 15,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
					{
						name: 'game',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
							line: 16,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'name',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
									{
										name: 'type',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'ActivityType',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'ActivityType',
											},
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editBotsStatus',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'status',
						optional: false,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'name',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'assign',
						left: {
							kind: 'identifier',
							name: 'type',
							optional: false,
							tsType: null,
						},
						right: '<UNIMPLEMENTED>',
						tsType: null,
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'chooseRandom',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 30,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'array',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'T',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'T',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [
					{
						name: 'T',
					},
				],
			},
		},
		{
			kind: 'function',
			name: 'urlToBase64',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'url',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createNewProp',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 43,
				col: 0,
			},
			jsDoc:
				'Allows easy way to add a prop to a base object when needing to use complicated getters solution.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'value',
						optional: false,
						tsType: {
							repr: 'any',
							kind: 'keyword',
							keyword: 'any',
						},
					},
				],
				returnType: {
					repr: 'Partial',
					kind: 'typeRef',
					typeRef: {
						typeParams: [
							{
								repr: 'PropertyDescriptor',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'PropertyDescriptor',
								},
							},
						],
						typeName: 'Partial',
					},
				},
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'delay',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'ms',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: {
					repr: 'Promise',
					kind: 'typeRef',
					typeRef: {
						typeParams: [
							{
								repr: 'void',
								kind: 'keyword',
								keyword: 'void',
							},
						],
						typeName: 'Promise',
					},
				},
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'variable',
			name: 'formatImageURL',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 55,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: null,
				kind: 'const',
			},
		},
		{
			kind: 'function',
			name: 'camelKeysToSnakeCase',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 83,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'obj',
						optional: false,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'any',
										kind: 'keyword',
										keyword: 'any',
									},
								],
								typeName: 'Record',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'snakeKeysToCamelCase',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 101,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'obj',
						optional: false,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'any',
										kind: 'keyword',
										keyword: 'any',
									},
								],
								typeName: 'Record',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'encode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/deps.ts',
				imported: 'encode',
			},
		},
		{
			kind: 'import',
			name: 'ActivityType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ActivityType',
			},
		},
		{
			kind: 'import',
			name: 'ImageFormats',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageFormats',
			},
		},
		{
			kind: 'import',
			name: 'ImageSize',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageSize',
			},
		},
		{
			kind: 'import',
			name: 'StatusType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'StatusType',
			},
		},
		{
			kind: 'import',
			name: 'sendGatewayCommand',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/ws/shard_manager.ts',
				imported: 'sendGatewayCommand',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageReactionAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageReactionRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 65,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageReactionRemoveAll',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 121,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageReactionRemoveEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 138,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'botID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botID',
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'BaseMessageReactionPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BaseMessageReactionPayload',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageReactionPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageReactionPayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageReactionRemoveEmojiPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageReactionRemoveEmojiPayload',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'function',
			name: 'createWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 33,
				col: 0,
			},
			jsDoc:
				"Create a new webhook. Requires the MANAGE_WEBHOOKS permission. Returns a webhook object on success. Webhook names follow our naming restrictions that can be found in our Usernames and Nicknames documentation, with the following additional stipulations:\n\nWebhook names cannot be: 'clyde'",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'WebhookCreateOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'WebhookCreateOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 68,
				col: 0,
			},
			jsDoc:
				'Edit a webhook. Requires the `MANAGE_WEBHOOKS` permission. Returns the updated webhook object on success.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'WebhookEditOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'WebhookEditOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editWebhookWithToken',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 92,
				col: 0,
			},
			jsDoc: 'Edit a webhook. Returns the updated webhook object on success.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookToken',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'Omit',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'WebhookEditOptions',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'WebhookEditOptions',
										},
									},
									{
										repr: 'channelID',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'channelID',
										},
									},
								],
								typeName: 'Omit',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 106,
				col: 0,
			},
			jsDoc:
				'Delete a webhook permanently. Requires the `MANAGE_WEBHOOKS` permission. Returns a undefined on success',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteWebhookWithToken',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 123,
				col: 0,
			},
			jsDoc: 'Delete a webhook permanently. Returns a undefined on success',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookToken',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 135,
				col: 0,
			},
			jsDoc: 'Returns the new webhook object for the given id.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getWebhookWithToken',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 142,
				col: 0,
			},
			jsDoc:
				'Returns the new webhook object for the given id, this call does not require authentication and returns no user in the webhook object.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'token',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'executeWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 151,
				col: 0,
			},
			jsDoc: 'Execute a webhook with webhook ID and webhook token',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookToken',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'ExecuteWebhookOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ExecuteWebhookOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editWebhookMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 209,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookToken',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditWebhookMessageOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditWebhookMessageOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteWebhookMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 263,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'webhookID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'webhookToken',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 362,
				col: 0,
			},
			jsDoc:
				"There are two kinds of Slash Commands: global commands and guild commands. Global commands are available for every guild that adds your app; guild commands are specific to the guild you specify when making them. Command names are unique per application within each scope (global and guild). That means:\n\n- Your app **cannot** have two global commands with the same name\n- Your app **cannot** have two guild commands within the same name **on the same guild**\n- Your app **can** have a global and guild command with the same name\n- Multiple apps **can** have commands with the same names\n\nGlobal commands are cached for **1 hour**. That means that new global commands will fan out slowly across all guilds, and will be guaranteed to be updated in an hour.\nGuild commands update **instantly**. We recommend you use guild commands for quick testing, and global commands when they're ready for public use.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateSlashCommandOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateSlashCommandOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 378,
				col: 0,
			},
			jsDoc:
				'Fetchs the global command for the given ID. If a guildID is provided, the guild command will be fetched.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'commandID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getSlashCommands',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 389,
				col: 0,
			},
			jsDoc: 'Fetch all of the global commands for your application.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'upsertSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 403,
				col: 0,
			},
			jsDoc:
				'Edit an existing slash command. If this command did not exist, it will create it.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'commandID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'UpsertSlashCommandOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UpsertSlashCommandOptions',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'upsertSlashCommands',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 429,
				col: 0,
			},
			jsDoc:
				"Bulk edit existing slash commands. If a command does not exist, it will create it.\n\n**NOTE:** Any slash commands that are not specified in this function will be **deleted**. If you don't provide the commandID and rename your command, the command gets a new ID.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'UpsertSlashCommandsOptions',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'UpsertSlashCommandsOptions',
								},
							},
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 450,
				col: 0,
			},
			jsDoc:
				'Edit an existing slash command. \n@deprecated This function will be removed in v11. Use `upsertSlashCommand()` instead',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'commandID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditSlashCommandOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditSlashCommandOptions',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 480,
				col: 0,
			},
			jsDoc: 'Deletes a slash command.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'executeSlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 495,
				col: 0,
			},
			jsDoc:
				'Send a response to a users slash command. The command data will have the id and token necessary to respond.\nInteraction `tokens` are valid for **15 minutes** and can be used to send followup messages.\n\nNOTE: By default we will suppress mentions. To enable mentions, just pass any mentions object.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'token',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'SlashCommandResponseOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'SlashCommandResponseOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteSlashResponse',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 533,
				col: 0,
			},
			jsDoc:
				'To delete your response to a slash command. If a message id is not provided, it will default to deleting the original response.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'token',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'messageID',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editSlashResponse',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 551,
				col: 0,
			},
			jsDoc:
				'To edit your response to a slash command. If a messageID is not provided it will default to editing the original response.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'token',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'EditSlashResponseOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EditSlashResponseOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'applicationID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'applicationID',
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'CreateSlashCommandOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateSlashCommandOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditSlashCommandOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditSlashCommandOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditSlashResponseOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditSlashResponseOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditWebhookMessageOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditWebhookMessageOptions',
			},
		},
		{
			kind: 'import',
			name: 'Errors',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Errors',
			},
		},
		{
			kind: 'import',
			name: 'ExecuteWebhookOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ExecuteWebhookOptions',
			},
		},
		{
			kind: 'import',
			name: 'MessageCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'SlashCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'SlashCommand',
			},
		},
		{
			kind: 'import',
			name: 'SlashCommandOption',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'SlashCommandOption',
			},
		},
		{
			kind: 'import',
			name: 'SlashCommandOptionChoice',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'SlashCommandOptionChoice',
			},
		},
		{
			kind: 'import',
			name: 'SlashCommandOptionType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'SlashCommandOptionType',
			},
		},
		{
			kind: 'import',
			name: 'SlashCommandResponseOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'SlashCommandResponseOptions',
			},
		},
		{
			kind: 'import',
			name: 'UpsertSlashCommandOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UpsertSlashCommandOptions',
			},
		},
		{
			kind: 'import',
			name: 'UpsertSlashCommandsOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UpsertSlashCommandsOptions',
			},
		},
		{
			kind: 'import',
			name: 'WebhookCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'WebhookCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'WebhookEditOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'WebhookEditOptions',
			},
		},
		{
			kind: 'import',
			name: 'WebhookPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'WebhookPayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 23,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'import',
			name: 'SLASH_COMMANDS_NAME_REGEX',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 23,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'SLASH_COMMANDS_NAME_REGEX',
			},
		},
		{
			kind: 'import',
			name: 'botHasChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasChannelPermissions',
			},
		},
		{
			kind: 'import',
			name: 'urlToBase64',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 25,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'urlToBase64',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/webhook.ts',
				line: 26,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'function',
			name: 'createMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 75,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 130,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'makeAvatarURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 169,
							col: 2,
						},
						jsDoc:
							'Returns the avatar url for this member and can be dynamically modified with a size or format',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: '',
									kind: 'typeLiteral',
									typeLiteral: {
										methods: [],
										properties: [
											{
												name: 'size',
												params: [],
												computed: false,
												optional: true,
												tsType: {
													repr: 'ImageSize',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'ImageSize',
													},
												},
												typeParams: [],
											},
											{
												name: 'format',
												params: [],
												computed: false,
												optional: true,
												tsType: {
													repr: 'ImageFormats',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'ImageFormats',
													},
												},
												typeParams: [],
											},
										],
										callSignatures: [],
										indexSignatures: [],
									},
								},
							},
						],
						returnType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 171,
							col: 2,
						},
						jsDoc: 'Returns the guild for this guildID',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'Guild',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'Guild',
									},
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'Get the nickname or the username if no nickname',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'Get the guild member object for the specified guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'GuildMember',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GuildMember',
									},
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'sendDM',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 177,
							col: 2,
						},
						jsDoc: 'Send a direct message to the user is possible',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendDirectMessage',
										kind: 'typeQuery',
										typeQuery: 'sendDirectMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'kick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 181,
							col: 2,
						},
						jsDoc: 'Kick the member from a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'kick',
										kind: 'typeQuery',
										typeQuery: 'kick',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 183,
							col: 2,
						},
						jsDoc: 'Edit the member in a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'EditMemberOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'EditMemberOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editMember',
										kind: 'typeQuery',
										typeQuery: 'editMember',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'ban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 188,
							col: 2,
						},
						jsDoc: 'Ban a member in a guild',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'BanOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'BanOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'ban',
										kind: 'typeQuery',
										typeQuery: 'ban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 190,
							col: 2,
						},
						jsDoc: 'Add a role to the member',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addRole',
										kind: 'typeQuery',
										typeQuery: 'addRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeRole',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'Remove a role from the member',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'guildID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'roleID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeRole',
										kind: 'typeQuery',
										typeQuery: 'removeRole',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 132,
							col: 2,
						},
						jsDoc: "The user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 134,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 136,
							col: 2,
						},
						jsDoc: "The user's 4 digit discord tag",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 138,
							col: 2,
						},
						jsDoc: "The user's avatar hash",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 140,
							col: 2,
						},
						jsDoc: 'Whether the user is a bot',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'system',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 142,
							col: 2,
						},
						jsDoc:
							'Whether the user is an official discord system user (part of the urgent message system.)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 144,
							col: 2,
						},
						jsDoc: "the user's chosen language option",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 146,
							col: 2,
						},
						jsDoc: 'Whether the email on this account has been verified',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'email',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 148,
							col: 2,
						},
						jsDoc: "The user's email",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 150,
							col: 2,
						},
						jsDoc: "The flags on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'mfaEnabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 152,
							col: 2,
						},
						jsDoc: 'Whether or not this user has 2FA enabled.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'premiumType',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 154,
							col: 2,
						},
						jsDoc: 'The premium type for this user',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'guilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'The guild related data mapped by guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'GuildMember',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'GuildMember',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'avatarURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 160,
							col: 2,
						},
						jsDoc: 'The avatar url using the default format and size.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'mention',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 162,
							col: 2,
						},
						jsDoc: 'The mention string for this member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'tag',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
							line: 164,
							col: 2,
						},
						jsDoc: 'The username#discriminator tag for this member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'BanOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BanOptions',
			},
		},
		{
			kind: 'import',
			name: 'EditMemberOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'EditMemberOptions',
			},
		},
		{
			kind: 'import',
			name: 'GuildMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMember',
			},
		},
		{
			kind: 'import',
			name: 'ImageFormats',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageFormats',
			},
		},
		{
			kind: 'import',
			name: 'ImageSize',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageSize',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'createNewProp',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 12,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'createNewProp',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 13,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'ban',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 14,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'ban',
			},
		},
		{
			kind: 'import',
			name: 'addRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'addRole',
			},
		},
		{
			kind: 'import',
			name: 'editMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'editMember',
			},
		},
		{
			kind: 'import',
			name: 'kick',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'kick',
			},
		},
		{
			kind: 'import',
			name: 'rawAvatarURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'rawAvatarURL',
			},
		},
		{
			kind: 'import',
			name: 'removeRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'removeRole',
			},
		},
		{
			kind: 'import',
			name: 'sendDirectMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'sendDirectMessage',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				line: 23,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'variable',
			name: 'initialMemberLoadQueue',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 36,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: {
					repr: 'Map',
					kind: 'typeRef',
					typeRef: {
						typeParams: null,
						typeName: 'Map',
					},
				},
				kind: 'const',
			},
		},
		{
			kind: 'function',
			name: 'createGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 110,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'CreateGuildPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateGuildPayload',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'shardID',
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 214,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'bannerURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 325,
							col: 2,
						},
						jsDoc: 'The banner url for this server',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'size',
								optional: true,
								tsType: {
									repr: 'ImageSize',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageSize',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'format',
								optional: true,
								tsType: {
									repr: 'ImageFormats',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageFormats',
									},
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'iconURL',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 327,
							col: 2,
						},
						jsDoc:
							'The full URL of the icon from Discords CDN. Undefined when no icon is set.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'size',
								optional: true,
								tsType: {
									repr: 'ImageSize',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageSize',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'format',
								optional: true,
								tsType: {
									repr: 'ImageFormats',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'ImageFormats',
									},
								},
							},
						],
						returnType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 329,
							col: 2,
						},
						jsDoc:
							'Delete a guild permanently. User must be owner. Returns 204 No Content on success. Fires a Guild Delete Gateway event.',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteServer',
										kind: 'typeQuery',
										typeQuery: 'deleteServer',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'leave',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 331,
							col: 2,
						},
						jsDoc: 'Leave a guild',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'leaveGuild',
										kind: 'typeQuery',
										typeQuery: 'leaveGuild',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 333,
							col: 2,
						},
						jsDoc: 'Edit the server. Requires the MANAGE_GUILD permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'GuildEditOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GuildEditOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editGuild',
										kind: 'typeQuery',
										typeQuery: 'editGuild',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'auditLogs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 335,
							col: 2,
						},
						jsDoc:
							'Returns the audit logs for the guild. Requires VIEW AUDIT LOGS permission',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'GetAuditLogsOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetAuditLogsOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getAuditLogs',
										kind: 'typeQuery',
										typeQuery: 'getAuditLogs',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'getBan',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 337,
							col: 2,
						},
						jsDoc:
							'Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getBan',
										kind: 'typeQuery',
										typeQuery: 'getBan',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'bans',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 339,
							col: 2,
						},
						jsDoc:
							'Returns a list of ban objects for the users banned from this guild. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getBans',
										kind: 'typeQuery',
										typeQuery: 'getBans',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'ban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 341,
							col: 2,
						},
						jsDoc:
							'Ban a user from the guild and optionally delete previous messages sent by the user. Requires the BAN_MEMBERS permission.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'options',
								optional: false,
								tsType: {
									repr: 'BanOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'BanOptions',
									},
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'ban',
										kind: 'typeQuery',
										typeQuery: 'ban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'unban',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 343,
							col: 2,
						},
						jsDoc: 'Remove the ban for a user. Requires BAN_MEMBERS permission',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'memberID',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'unban',
										kind: 'typeQuery',
										typeQuery: 'unban',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'invites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 345,
							col: 2,
						},
						jsDoc:
							'Get all the invites for this guild. Requires MANAGE_GUILD permission',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'getInvites',
										kind: 'typeQuery',
										typeQuery: 'getInvites',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 216,
							col: 2,
						},
						jsDoc: 'The guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 218,
							col: 2,
						},
						jsDoc: 'The guild name 2-100 characters',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 220,
							col: 2,
						},
						jsDoc: 'The guild icon image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 222,
							col: 2,
						},
						jsDoc: 'The guild splash image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'disoverySplash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 224,
							col: 2,
						},
						jsDoc:
							'Discovery splash has; only present for guilds with the "DISCOVERABLE" feature',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 226,
							col: 2,
						},
						jsDoc: 'The voice region id for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'defaultMessageNotifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 228,
							col: 2,
						},
						jsDoc: 'Default message notifications level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'explicitContentFilter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 230,
							col: 2,
						},
						jsDoc: 'Explicit content filter level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 232,
							col: 2,
						},
						jsDoc: 'The custom guild emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Emoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Emoji',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'features',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 234,
							col: 2,
						},
						jsDoc: 'Enabled guild features',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'GuildFeatures',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'GuildFeatures',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'systemChannelFlags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 236,
							col: 2,
						},
						jsDoc: 'System channel flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rulesChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 238,
							col: 2,
						},
						jsDoc:
							'The id of the channel where guilds with the PUBLIC feature can display rules and or guidelines.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 240,
							col: 2,
						},
						jsDoc: 'The description for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 242,
							col: 2,
						},
						jsDoc: 'The banner hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'publicUpdatesChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 244,
							col: 2,
						},
						jsDoc:
							'The id of the channel where admins and moderators of guilds with the PUBLIC feature receive notices from Discord',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'maxVideoChannelUsers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 246,
							col: 2,
						},
						jsDoc: 'The maximum amount of users in a video channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximateMemberCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 248,
							col: 2,
						},
						jsDoc:
							'The approximate number of members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximatePresenceCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 250,
							col: 2,
						},
						jsDoc:
							'The approximate number of non-offline members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'large',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 252,
							col: 2,
						},
						jsDoc: 'Whether this is considered a large guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'unavailable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 254,
							col: 2,
						},
						jsDoc: 'Whether this guild is unavailable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'shardID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 256,
							col: 2,
						},
						jsDoc: 'The shard id that this guild is on',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'ownerID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 258,
							col: 2,
						},
						jsDoc: 'The owner id of the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afkChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 260,
							col: 2,
						},
						jsDoc: 'The afk channel id for this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afkTimeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 262,
							col: 2,
						},
						jsDoc: 'The amount of time before a user is moved to AFK.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'widgetEnabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 264,
							col: 2,
						},
						jsDoc: 'Whether or not the embed is enabled in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'widgetChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 266,
							col: 2,
						},
						jsDoc: 'The channel id for the guild embed in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verificationLevel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 268,
							col: 2,
						},
						jsDoc: 'The verification level for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'mfaLevel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 270,
							col: 2,
						},
						jsDoc: 'The MFA level for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'systemChannelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'The system channel id for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'maxPresences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'The max presences for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'maxMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 276,
							col: 2,
						},
						jsDoc: 'The maximum members in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'vanityURLCode',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 278,
							col: 2,
						},
						jsDoc: 'The vanity URL code for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premiumTier',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 280,
							col: 2,
						},
						jsDoc: 'The premium tier for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premiumSubscriptionCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 282,
							col: 2,
						},
						jsDoc: 'The subscription count for this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'preferredLocale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 284,
							col: 2,
						},
						jsDoc: 'The preferred language in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 286,
							col: 2,
						},
						jsDoc: 'The roles in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Role',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Role',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'joinedAt',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'When this guild was joined at.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'The presences of all the users in the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Presence',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Presence',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'memberCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 292,
							col: 2,
						},
						jsDoc:
							'The total number of members in this guild. This value is updated as members leave and join the server. However, if you do not have the intent enabled to be able to listen to these events, then this will not be accurate.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'voiceStates',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 294,
							col: 2,
						},
						jsDoc:
							'The Voice State data for each user in a voice channel in this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'CleanVoiceState',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'CleanVoiceState',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 298,
							col: 2,
						},
						jsDoc: 'Members in this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Member',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Member',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 300,
							col: 2,
						},
						jsDoc: 'Channels in this guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Collection',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Channel',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Channel',
										},
									},
								],
								typeName: 'Collection',
							},
						},
						typeParams: [],
					},
					{
						name: 'afkChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 302,
							col: 2,
						},
						jsDoc: 'The afk channel if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'publicUpdatesChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 304,
							col: 2,
						},
						jsDoc: 'The public update channel if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'rulesChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 306,
							col: 2,
						},
						jsDoc: 'The rules channel in this guild if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'systemChannel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 308,
							col: 2,
						},
						jsDoc: 'The system channel in this guild if one is set',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 310,
							col: 2,
						},
						jsDoc: 'The bot member in this guild if cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'botMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 312,
							col: 2,
						},
						jsDoc: 'The bot guild member in this guild if cached',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'GuildMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GuildMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'botVoice',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 314,
							col: 2,
						},
						jsDoc: 'The bots voice state if there is one in this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'CleanVoiceState',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CleanVoiceState',
							},
						},
						typeParams: [],
					},
					{
						name: 'owner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 316,
							col: 2,
						},
						jsDoc: 'The owner member of this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'partnered',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 318,
							col: 2,
						},
						jsDoc: 'Whether or not this guild is partnered',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 320,
							col: 2,
						},
						jsDoc: 'Whether or not this guild is verified',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CleanVoiceState',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 348,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'VoiceState',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'VoiceState',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 350,
							col: 2,
						},
						jsDoc: 'The guild id where this voice state is from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 352,
							col: 2,
						},
						jsDoc: 'The channel id where this voice state is from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'userID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 354,
							col: 2,
						},
						jsDoc: 'The user id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'sessionID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 356,
							col: 2,
						},
						jsDoc: 'The unique random session id for this voice session',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'selfDeaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 358,
							col: 2,
						},
						jsDoc: 'Whether the user has deafened themself',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'selfMute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 360,
							col: 2,
						},
						jsDoc: 'Whether the user has muted themself',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'selfStream',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
							line: 362,
							col: 2,
						},
						jsDoc: 'Whether the user is streaming on go live',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'botID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botID',
			},
		},
		{
			kind: 'import',
			name: 'BanOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'BanOptions',
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'Emoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Emoji',
			},
		},
		{
			kind: 'import',
			name: 'GetAuditLogsOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetAuditLogsOptions',
			},
		},
		{
			kind: 'import',
			name: 'GuildEditOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildEditOptions',
			},
		},
		{
			kind: 'import',
			name: 'GuildFeatures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildFeatures',
			},
		},
		{
			kind: 'import',
			name: 'GuildMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMember',
			},
		},
		{
			kind: 'import',
			name: 'ImageFormats',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageFormats',
			},
		},
		{
			kind: 'import',
			name: 'ImageSize',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ImageSize',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'Presence',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Presence',
			},
		},
		{
			kind: 'import',
			name: 'VoiceState',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'VoiceState',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'Collection',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/collection.ts',
				imported: 'Collection',
			},
		},
		{
			kind: 'import',
			name: 'createNewProp',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'createNewProp',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'ban',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'ban',
			},
		},
		{
			kind: 'import',
			name: 'deleteServer',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'deleteServer',
			},
		},
		{
			kind: 'import',
			name: 'editGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'editGuild',
			},
		},
		{
			kind: 'import',
			name: 'getAuditLogs',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'getAuditLogs',
			},
		},
		{
			kind: 'import',
			name: 'getBan',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'getBan',
			},
		},
		{
			kind: 'import',
			name: 'getBans',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'getBans',
			},
		},
		{
			kind: 'import',
			name: 'getInvites',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'getInvites',
			},
		},
		{
			kind: 'import',
			name: 'guildBannerURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'guildBannerURL',
			},
		},
		{
			kind: 'import',
			name: 'guildIconURL',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'guildIconURL',
			},
		},
		{
			kind: 'import',
			name: 'leaveGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'leaveGuild',
			},
		},
		{
			kind: 'import',
			name: 'unban',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/guild.ts',
				imported: 'unban',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 33,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'Role',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Role',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 51,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageDeleteBulk',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 66,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'handleInternalMessageUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 82,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'DiscordPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPayload',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'eventHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'eventHandlers',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'MessageDeleteBulkPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageDeleteBulkPayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageDeletePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageDeletePayload',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'interface',
			name: 'ChannelEditOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 6,
							col: 2,
						},
						jsDoc: '2-100 character channel name. All',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the position of the channel in the left-hand listing\tAll',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 10,
							col: 2,
						},
						jsDoc: '0-1024 character channel topic. Text',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'whether the channel is nsfw\tText',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'slowmode',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 14,
							col: 2,
						},
						jsDoc:
							'amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected\tText',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 16,
							col: 2,
						},
						jsDoc:
							'the bitrate (in bits) of the voice channel; 8000 to 96000 (128000 for VIP servers)\tVoice',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'userLimit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 18,
							col: 2,
						},
						jsDoc:
							'the user limit of the voice channel; 0 refers to no limit, 1 to 99 refers to a user limit\tVoice',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'overwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'channel or category-specific permissions\tAll',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Overwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Overwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'parentID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'id of the new parent category for a channel\tText, Voice',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BaseChannelCreate',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 25,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 27,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 29,
							col: 2,
						},
						jsDoc: 'Sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'The name of the channel (2-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 33,
							col: 2,
						},
						jsDoc: 'The channel topic (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 35,
							col: 2,
						},
						jsDoc: 'Whether the channel is nsfw',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'last_message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 37,
							col: 2,
						},
						jsDoc:
							'The id of the last message sent in this channel (may not point to an existing or valid message)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 39,
							col: 2,
						},
						jsDoc: 'The bitrate (in bits) of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 41,
							col: 2,
						},
						jsDoc: 'The user limit of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rate_limit_per_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 43,
							col: 2,
						},
						jsDoc:
							'Amount of seconds a user has to wait before sending another message (0-21600) Bots and users with the permission MANAGE_MESSAGES or MANAGE_CHANNEL are unaffected.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'parent_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 45,
							col: 2,
						},
						jsDoc: 'The parent category id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'last_pin_timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'When the last pinned message was pinned',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DMChannelCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 50,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'This is a unique channel id. It is NOT the users id.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'last_message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 54,
							col: 2,
						},
						jsDoc: 'The id of the last message sent in this dm channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'The type of channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '1',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 1,
							},
						},
						typeParams: [],
					},
					{
						name: 'recipients',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'The user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'typeLiteral',
								typeLiteral: {
									methods: [],
									properties: [
										{
											name: 'id',
											params: [],
											computed: false,
											optional: false,
											tsType: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
											typeParams: [],
										},
										{
											name: 'username',
											params: [],
											computed: false,
											optional: false,
											tsType: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
											typeParams: [],
										},
										{
											name: 'avatar',
											params: [],
											computed: false,
											optional: false,
											tsType: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
											typeParams: [],
										},
										{
											name: 'discriminator',
											params: [],
											computed: false,
											optional: false,
											tsType: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
											typeParams: [],
										},
										{
											name: 'public_flags',
											params: [],
											computed: false,
											optional: false,
											tsType: {
												repr: 'number',
												kind: 'keyword',
												keyword: 'number',
											},
											typeParams: [],
										},
									],
									callSignatures: [],
									indexSignatures: [],
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ChannelCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 68,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BaseChannelCreate',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BaseChannelCreate',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 70,
							col: 2,
						},
						jsDoc: 'The id of this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 72,
							col: 2,
						},
						jsDoc: 'The type of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ChannelType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelType',
							},
						},
						typeParams: [],
					},
					{
						name: 'permission_overwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'Explicit permission overwrites for members and roles',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RawOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RawOverwrite',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'ChannelType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 77,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: '0',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 0,
							},
						},
						{
							repr: '1',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 1,
							},
						},
						{
							repr: '2',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 2,
							},
						},
						{
							repr: '4',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 4,
							},
						},
						{
							repr: '5',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 5,
							},
						},
						{
							repr: '6',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 6,
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'ChannelTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 79,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'GUILD_TEXT',
						jsDoc: 'A text channel within a server',
					},
					{
						name: 'DM',
						jsDoc: 'A direct message between users',
					},
					{
						name: 'GUILD_VOICE',
						jsDoc: 'A voice channel within a server',
					},
					{
						name: 'GROUP_DM',
						jsDoc: 'A direct message between multiple users.',
					},
					{
						name: 'GUILD_CATEGORY',
						jsDoc: 'An organizational category that contains channels',
					},
					{
						name: 'GUILD_NEWS',
						jsDoc:
							'A channel that users can follow and cross post into their own server.',
					},
					{
						name: 'GUILD_STORE',
						jsDoc:
							'A channel in which game developers can sell their game on Discord.',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'MessageContent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 96,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 97,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'parse',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: '',
												kind: 'parenthesized',
												parenthesized: {
													repr: '',
													kind: 'union',
													union: [
														{
															repr: 'roles',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'roles',
															},
														},
														{
															repr: 'users',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'users',
															},
														},
														{
															repr: 'everyone',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'everyone',
															},
														},
													],
												},
											},
										},
										typeParams: [],
									},
									{
										name: 'roles',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
										},
										typeParams: [],
									},
									{
										name: 'users',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
										},
										typeParams: [],
									},
									{
										name: 'repliedUser',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: 'boolean',
											kind: 'keyword',
											keyword: 'boolean',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 108,
							col: 2,
						},
						jsDoc: 'The message contents, up to 2000 characters',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 110,
							col: 2,
						},
						jsDoc: 'A nonce that can be used for optimistic message sending.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 112,
							col: 2,
						},
						jsDoc: 'Whether this is a TextToSpeech message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'file',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'The contents of the file being sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'FileContent',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'FileContent',
									},
								},
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'FileContent',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'FileContent',
										},
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'embed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 116,
							col: 2,
						},
						jsDoc: 'Embed object',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Embed',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Embed',
							},
						},
						typeParams: [],
					},
					{
						name: 'payload_json',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 118,
							col: 2,
						},
						jsDoc: 'JSON encoded body of any additional request fields.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'replyMessageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 120,
							col: 2,
						},
						jsDoc:
							'If you want to send a reply message, provide the original message id here',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'failReplyIfNotExists',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 122,
							col: 2,
						},
						jsDoc:
							'When sending a reply to a message that was deleted, should Discord fail and throw an error. By default we make this false to prevent your bot from crashing.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'FileContent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 125,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'blob',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 126,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'unknown',
							kind: 'keyword',
							keyword: 'unknown',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 127,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'AllowedMentions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 130,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'parse',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 132,
							col: 2,
						},
						jsDoc:
							'An array of allowed mention types to parse from the content.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'roles',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'roles',
											},
										},
										{
											repr: 'users',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'users',
											},
										},
										{
											repr: 'everyone',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'everyone',
											},
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 134,
							col: 2,
						},
						jsDoc: 'Array of role_ids to mention (Max size of 100)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 136,
							col: 2,
						},
						jsDoc: 'Array of user_ids to mention (Max size of 100)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetMessages',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 139,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 141,
							col: 2,
						},
						jsDoc: 'Max number of messages to return(1-100). Defaults to 50.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetMessagesAfter',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 144,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'GetMessages',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'GetMessages',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 146,
							col: 2,
						},
						jsDoc: 'Get messages after this message id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetMessagesBefore',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 149,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'GetMessages',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'GetMessages',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 151,
							col: 2,
						},
						jsDoc: 'Get messages before this message id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetMessagesAround',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 154,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'GetMessages',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'GetMessages',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'around',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'Get messages around this message id.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateInviteOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 160,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'max_age',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 162,
							col: 2,
						},
						jsDoc:
							'Duration of invite in seconds before expiry, or 0 for never. Between 0-604800 (7 days). Defaults to 86400 (24 hours).',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 164,
							col: 2,
						},
						jsDoc:
							'Max number of uses or 0 for unlimited. Between 0-100. Default 0',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'temporary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 166,
							col: 2,
						},
						jsDoc: 'Whether this invite only grants temporary membership.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'unique',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 168,
							col: 2,
						},
						jsDoc:
							"If true, don't try to reuse a similar invite (useful for creating many unique one time use invites.)",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'FollowedChannelPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 171,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'The source channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'The webhook id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'Overwrite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'Overwrite',
			},
		},
		{
			kind: 'import',
			name: 'RawOverwrite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'RawOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'Embed',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Embed',
			},
		},
		{
			kind: 'interface',
			name: 'ClientStatusPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'desktop',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
							line: 5,
							col: 2,
						},
						jsDoc:
							"The user's status set for an active desktop (Windows, Linux, Mac) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
					{
						name: 'mobile',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
							line: 8,
							col: 2,
						},
						jsDoc:
							"The user's status set for an active mobile (iOS, Android) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
					{
						name: 'web',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
							line: 11,
							col: 2,
						},
						jsDoc:
							"The user's status set for an active web (browser, bot account) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'StatusType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'StatusType',
			},
		},
		{
			kind: 'typeAlias',
			name: 'ImageSize',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/cdn.ts',
				line: 3,
				col: 0,
			},
			jsDoc: '@deprecated Use DiscordImageSize',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: '16',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 16,
							},
						},
						{
							repr: '32',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 32,
							},
						},
						{
							repr: '64',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 64,
							},
						},
						{
							repr: '128',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 128,
							},
						},
						{
							repr: '256',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 256,
							},
						},
						{
							repr: '512',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 512,
							},
						},
						{
							repr: '1024',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 1024,
							},
						},
						{
							repr: '2048',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 2048,
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'ImageFormats',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/cdn.ts',
				line: 6,
				col: 0,
			},
			jsDoc: '@deprecated Use DiscordImageFormat',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'jpg',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'jpg',
							},
						},
						{
							repr: 'jpeg',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'jpeg',
							},
						},
						{
							repr: 'png',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'png',
							},
						},
						{
							repr: 'webp',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'webp',
							},
						},
						{
							repr: 'gif',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'gif',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'op',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 13,
							col: 2,
						},
						jsDoc: 'OP code for the payload',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'd',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 15,
							col: 2,
						},
						jsDoc: 'The real event data. Any JSON value basically.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'unknown',
							kind: 'keyword',
							keyword: 'unknown',
						},
						typeParams: [],
					},
					{
						name: 's',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 17,
							col: 2,
						},
						jsDoc:
							'The sequence number, used for resuming sessions and heartbeats. ONLY for OPCode 0',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 't',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 19,
							col: 2,
						},
						jsDoc: 'The event name for this payload. ONLY for OPCode 0',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'APPLICATION_COMMAND_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'APPLICATION_COMMAND_CREATE',
									},
								},
								{
									repr: 'APPLICATION_COMMAND_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'APPLICATION_COMMAND_UPDATE',
									},
								},
								{
									repr: 'APPLICATION_COMMAND_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'APPLICATION_COMMAND_DELETE',
									},
								},
								{
									repr: 'CHANNEL_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'CHANNEL_CREATE',
									},
								},
								{
									repr: 'CHANNEL_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'CHANNEL_DELETE',
									},
								},
								{
									repr: 'CHANNEL_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'CHANNEL_UPDATE',
									},
								},
								{
									repr: 'GUILD_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_CREATE',
									},
								},
								{
									repr: 'GUILD_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_DELETE',
									},
								},
								{
									repr: 'GUILD_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_UPDATE',
									},
								},
								{
									repr: 'GUILD_BAN_ADD',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_BAN_ADD',
									},
								},
								{
									repr: 'GUILD_BAN_REMOVE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_BAN_REMOVE',
									},
								},
								{
									repr: 'GUILD_EMOJIS_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_EMOJIS_UPDATE',
									},
								},
								{
									repr: 'GUILD_MEMBER_ADD',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_MEMBER_ADD',
									},
								},
								{
									repr: 'GUILD_MEMBER_REMOVE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_MEMBER_REMOVE',
									},
								},
								{
									repr: 'GUILD_MEMBER_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_MEMBER_UPDATE',
									},
								},
								{
									repr: 'GUILD_MEMBERS_CHUNK',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_MEMBERS_CHUNK',
									},
								},
								{
									repr: 'GUILD_ROLE_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_ROLE_CREATE',
									},
								},
								{
									repr: 'GUILD_ROLE_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_ROLE_DELETE',
									},
								},
								{
									repr: 'GUILD_ROLE_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'GUILD_ROLE_UPDATE',
									},
								},
								{
									repr: 'INTERACTION_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INTERACTION_CREATE',
									},
								},
								{
									repr: 'MESSAGE_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_CREATE',
									},
								},
								{
									repr: 'MESSAGE_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_DELETE',
									},
								},
								{
									repr: 'MESSAGE_DELETE_BULK',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_DELETE_BULK',
									},
								},
								{
									repr: 'MESSAGE_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_UPDATE',
									},
								},
								{
									repr: 'MESSAGE_REACTION_ADD',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_REACTION_ADD',
									},
								},
								{
									repr: 'MESSAGE_REACTION_REMOVE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_REACTION_REMOVE',
									},
								},
								{
									repr: 'MESSAGE_REACTION_REMOVE_ALL',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_REACTION_REMOVE_ALL',
									},
								},
								{
									repr: 'MESSAGE_REACTION_REMOVE_EMOJI',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'MESSAGE_REACTION_REMOVE_EMOJI',
									},
								},
								{
									repr: 'PRESENCE_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'PRESENCE_UPDATE',
									},
								},
								{
									repr: 'READY',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'READY',
									},
								},
								{
									repr: 'TYPING_START',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'TYPING_START',
									},
								},
								{
									repr: 'USER_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'USER_UPDATE',
									},
								},
								{
									repr: 'VOICE_STATE_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'VOICE_STATE_UPDATE',
									},
								},
								{
									repr: 'WEBHOOKS_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'WEBHOOKS_UPDATE',
									},
								},
								{
									repr: 'INTEGRATION_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INTEGRATION_CREATE',
									},
								},
								{
									repr: 'INTEGRATION_UPDATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INTEGRATION_UPDATE',
									},
								},
								{
									repr: 'INTEGRATION_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INTEGRATION_DELETE',
									},
								},
								{
									repr: 'INVITE_CREATE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INVITE_CREATE',
									},
								},
								{
									repr: 'INVITE_DELETE',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'INVITE_DELETE',
									},
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBotGatewayData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 61,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 63,
							col: 2,
						},
						jsDoc:
							'The WSS URL that can be used for connecting to the gateway.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'shards',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 65,
							col: 2,
						},
						jsDoc: 'The recommended number of shards to use when connecting.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'session_start_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 67,
							col: 2,
						},
						jsDoc: 'Info on the current start limit.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'total',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
									{
										name: 'remaining',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
									{
										name: 'reset_after',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
									{
										name: 'max_concurrency',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordHeartbeatPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 82,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'heartbeat_interval',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 83,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'GatewayOpcode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 86,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'Dispatch',
						jsDoc: null,
					},
					{
						name: 'Heartbeat',
						jsDoc: null,
					},
					{
						name: 'Identify',
						jsDoc: null,
					},
					{
						name: 'StatusUpdate',
						jsDoc: null,
					},
					{
						name: 'VoiceStateUpdate',
						jsDoc: null,
					},
					{
						name: 'Resume',
						jsDoc: null,
					},
					{
						name: 'Reconnect',
						jsDoc: null,
					},
					{
						name: 'RequestGuildMembers',
						jsDoc: null,
					},
					{
						name: 'InvalidSession',
						jsDoc: null,
					},
					{
						name: 'Hello',
						jsDoc: null,
					},
					{
						name: 'HeartbeatACK',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'GatewayCloseEventCode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 100,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'UnknownError',
						jsDoc: null,
					},
					{
						name: 'UnknownOpcode',
						jsDoc: null,
					},
					{
						name: 'DecodeError',
						jsDoc: null,
					},
					{
						name: 'NotAuthenticated',
						jsDoc: null,
					},
					{
						name: 'AuthenticationFailed',
						jsDoc: null,
					},
					{
						name: 'AlreadyAuthenticated',
						jsDoc: null,
					},
					{
						name: 'InvalidSeq',
						jsDoc: null,
					},
					{
						name: 'RateLimited',
						jsDoc: null,
					},
					{
						name: 'SessionTimeout',
						jsDoc: null,
					},
					{
						name: 'InvalidShard',
						jsDoc: null,
					},
					{
						name: 'ShardingRequired',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'VoiceOpcode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 114,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'Identify',
						jsDoc: null,
					},
					{
						name: 'SelectProtocol',
						jsDoc: null,
					},
					{
						name: 'Ready',
						jsDoc: null,
					},
					{
						name: 'Heartbeat',
						jsDoc: null,
					},
					{
						name: 'SessionDescription',
						jsDoc: null,
					},
					{
						name: 'Speaking',
						jsDoc: null,
					},
					{
						name: 'HeartbeatACK',
						jsDoc: null,
					},
					{
						name: 'Resume',
						jsDoc: null,
					},
					{
						name: 'Hello',
						jsDoc: null,
					},
					{
						name: 'Resumed',
						jsDoc: null,
					},
					{
						name: 'ClientDisconnect',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'VoiceCloseEventCode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 128,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'UnknownOpcode',
						jsDoc: null,
					},
					{
						name: 'NotAuthenticated',
						jsDoc: null,
					},
					{
						name: 'AuthenticationFailed',
						jsDoc: null,
					},
					{
						name: 'AlreadyAuthenticated',
						jsDoc: null,
					},
					{
						name: 'SessionNoLongerValid',
						jsDoc: null,
					},
					{
						name: 'SessionTimeout',
						jsDoc: null,
					},
					{
						name: 'ServerNotFound',
						jsDoc: null,
					},
					{
						name: 'UnknownProtocol',
						jsDoc: null,
					},
					{
						name: 'Disconnected',
						jsDoc: null,
					},
					{
						name: 'VoiceServerCrashed',
						jsDoc: null,
					},
					{
						name: 'UnknownEncryptionMode',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'HttpResponseCode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 142,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'Ok',
						jsDoc: null,
					},
					{
						name: 'Created',
						jsDoc: null,
					},
					{
						name: 'NoContent',
						jsDoc: null,
					},
					{
						name: 'NotModified',
						jsDoc: null,
					},
					{
						name: 'BadRequest',
						jsDoc: null,
					},
					{
						name: 'Unauthorized',
						jsDoc: null,
					},
					{
						name: 'Forbidden',
						jsDoc: null,
					},
					{
						name: 'NotFound',
						jsDoc: null,
					},
					{
						name: 'MethodNotAllowed',
						jsDoc: null,
					},
					{
						name: 'TooManyRequests',
						jsDoc: null,
					},
					{
						name: 'GatewayUnavailable',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'JSONErrorCode',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 157,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'UnknownAccount',
						jsDoc: null,
					},
					{
						name: 'UnknownApplication',
						jsDoc: null,
					},
					{
						name: 'UnknownChannel',
						jsDoc: null,
					},
					{
						name: 'UnknownGuild',
						jsDoc: null,
					},
					{
						name: 'UnknownIntegration',
						jsDoc: null,
					},
					{
						name: 'UnknownInvite',
						jsDoc: null,
					},
					{
						name: 'UnknownMember',
						jsDoc: null,
					},
					{
						name: 'UnknownMessge',
						jsDoc: null,
					},
					{
						name: 'UnknownOverwrite',
						jsDoc: null,
					},
					{
						name: 'UnknownProvider',
						jsDoc: null,
					},
					{
						name: 'UnknownRole',
						jsDoc: null,
					},
					{
						name: 'UnknownToken',
						jsDoc: null,
					},
					{
						name: 'UnknownUser',
						jsDoc: null,
					},
					{
						name: 'UnknownEmoji',
						jsDoc: null,
					},
					{
						name: 'UnknownWebhook',
						jsDoc: null,
					},
					{
						name: 'BotsCannotUse',
						jsDoc: null,
					},
					{
						name: 'OnlyBotsCanUse',
						jsDoc: null,
					},
					{
						name: 'MaxGuildsReached',
						jsDoc: null,
					},
					{
						name: 'MaxFriendsReached',
						jsDoc: null,
					},
					{
						name: 'MaxPinsReached',
						jsDoc: null,
					},
					{
						name: 'MaxGuildRolesReached',
						jsDoc: null,
					},
					{
						name: 'MaxReactionsReached',
						jsDoc: null,
					},
					{
						name: 'MaxGuildChannelsReached',
						jsDoc: null,
					},
					{
						name: 'MaxInvitesReached',
						jsDoc: null,
					},
					{
						name: 'Unathorized',
						jsDoc: null,
					},
					{
						name: 'UserIsBannedFromGuild',
						jsDoc: null,
					},
					{
						name: 'MissingAccess',
						jsDoc: null,
					},
					{
						name: 'InvalidAccountType',
						jsDoc: null,
					},
					{
						name: 'CannotExecuteOnDMChannel',
						jsDoc: null,
					},
					{
						name: 'WidgetDisabled',
						jsDoc: null,
					},
					{
						name: 'CannotEditMessageByAnotherUser',
						jsDoc: null,
					},
					{
						name: 'CannotSendEmptyMessage',
						jsDoc: null,
					},
					{
						name: 'CannotSendMessageToUser',
						jsDoc: null,
					},
					{
						name: 'CannotSendMessageInVoiceChannel',
						jsDoc: null,
					},
					{
						name: 'ChannelVerificationTooHigh',
						jsDoc: null,
					},
					{
						name: 'OAuth2ApplicationNoBot',
						jsDoc: null,
					},
					{
						name: 'OAuth2ApplicationLimitReached',
						jsDoc: null,
					},
					{
						name: 'InvalidOAuthState',
						jsDoc: null,
					},
					{
						name: 'MissingPermissions',
						jsDoc: null,
					},
					{
						name: 'InvalidAuthenticationToken',
						jsDoc: null,
					},
					{
						name: 'NoteIsTooLong',
						jsDoc: null,
					},
					{
						name: 'TooFewOrTooManyMessagesToDelete',
						jsDoc: null,
					},
					{
						name: 'MessageCanOnlyBePinnedInParentChannel',
						jsDoc: null,
					},
					{
						name: 'InviteCodeTakenOrInvalid',
						jsDoc: null,
					},
					{
						name: 'CannotExecuteOnSystemMessage',
						jsDoc: null,
					},
					{
						name: 'InvalidOAuth2AccessToken',
						jsDoc: null,
					},
					{
						name: 'MessageProvidedTooOldToBulkDelet',
						jsDoc: null,
					},
					{
						name: 'InvalidFormBody',
						jsDoc: null,
					},
					{
						name: 'InviteAcceptedToGuildApplicationBotNotIn',
						jsDoc: null,
					},
					{
						name: 'InvalidAPIVersion',
						jsDoc: null,
					},
					{
						name: 'ReactionBlocked',
						jsDoc: null,
					},
					{
						name: 'ResourceOverloaded',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'Properties',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 212,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: '$os',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 213,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: '$browser',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 214,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: '$device',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 215,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Emoji',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 218,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 219,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 220,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 221,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'StatusTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 224,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'Online',
						jsDoc: null,
					},
					{
						name: 'DoNotDisturb',
						jsDoc: null,
					},
					{
						name: 'Idle',
						jsDoc: null,
					},
					{
						name: 'Invisible',
						jsDoc: null,
					},
					{
						name: 'Offline',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'typeAlias',
			name: 'StatusType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 232,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'online',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'online',
							},
						},
						{
							repr: 'dnd',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'dnd',
							},
						},
						{
							repr: 'idle',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'idle',
							},
						},
						{
							repr: 'invisible',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'invisible',
							},
						},
						{
							repr: 'offline',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'offline',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Status',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 234,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'afk',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 235,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 236,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'WebhookUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 239,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 240,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 241,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PresenceUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 244,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 246,
							col: 2,
						},
						jsDoc: 'The user presence is being updated for.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'PartialUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'PartialUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 248,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 250,
							col: 2,
						},
						jsDoc: 'Either idle, dnd, online, or offline',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
					{
						name: 'activities',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 252,
							col: 2,
						},
						jsDoc: "All user's current activity",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Activity',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Activity',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'client_status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 254,
							col: 2,
						},
						jsDoc: "The user's platform dependent status",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ClientStatusPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ClientStatusPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'TypingStartPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 257,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 259,
							col: 2,
						},
						jsDoc: 'The id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 263,
							col: 2,
						},
						jsDoc: 'The id of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 265,
							col: 2,
						},
						jsDoc: 'The unix time in seconds of when the user started typing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 267,
							col: 2,
						},
						jsDoc: 'The member who started typing if this happened in a guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'VoiceStateUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 270,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'The guild id this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'The channel id this user is connected to',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 276,
							col: 2,
						},
						jsDoc: 'The user id this voice state is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 278,
							col: 2,
						},
						jsDoc: 'The guild member this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 280,
							col: 2,
						},
						jsDoc: 'The session id for this voice state',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 282,
							col: 2,
						},
						jsDoc: 'Whether this user is deafened by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 284,
							col: 2,
						},
						jsDoc: 'Whether this user is muted by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 286,
							col: 2,
						},
						jsDoc: 'Whether this user is locally deafened',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'Whether this user is locally muted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_stream',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'Whether this user is streaming using Go Live',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'suppress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 292,
							col: 2,
						},
						jsDoc: 'Whether this user is muted by the bot',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ReadyPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 295,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'v',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 297,
							col: 2,
						},
						jsDoc: 'gateway version',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 299,
							col: 2,
						},
						jsDoc: 'information about the user including email',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'private_channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 301,
							col: 2,
						},
						jsDoc: 'empty array',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [],
						},
						typeParams: [],
					},
					{
						name: 'guilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 303,
							col: 2,
						},
						jsDoc: 'the guilds the user is in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'UnavailableGuildPayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'UnavailableGuildPayload',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 305,
							col: 2,
						},
						jsDoc: 'used for resuming connections',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'shard',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 307,
							col: 2,
						},
						jsDoc:
							'(shard_id, num_shards) the shard information associated with this session, if sent when identifying',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 309,
							col: 2,
						},
						jsDoc: 'contains id and flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Pick',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'Application',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Application',
										},
									},
									{
										repr: 'id',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'id',
										},
									},
								],
								typeName: 'Pick',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'UnavailableGuildPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 312,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: 'Pick',
					kind: 'typeRef',
					typeRef: {
						typeParams: [
							{
								repr: 'CreateGuildPayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'CreateGuildPayload',
								},
							},
							{
								repr: '',
								kind: 'union',
								union: [
									{
										repr: 'id',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'id',
										},
									},
									{
										repr: 'unavailable',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'unavailable',
										},
									},
								],
							},
						],
						typeName: 'Pick',
					},
				},
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'IntegrationCreateUpdateEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 317,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'intersection',
					intersection: [
						{
							repr: 'Integration',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Integration',
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'guild_id',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'IntegrationDeleteEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 322,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 324,
							col: 2,
						},
						jsDoc: 'integration id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 326,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 328,
							col: 2,
						},
						jsDoc:
							'id of the bot/OAuth2 application for this discord integration',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InviteCreateEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 332,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#invite-create',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 334,
							col: 2,
						},
						jsDoc: 'the channel the invite is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 336,
							col: 2,
						},
						jsDoc: 'the unique invite code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 338,
							col: 2,
						},
						jsDoc: 'the time at which the invite was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 340,
							col: 2,
						},
						jsDoc: 'the guild of the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'inviter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 342,
							col: 2,
						},
						jsDoc: 'the user that created the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'max_age',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 344,
							col: 2,
						},
						jsDoc: 'how long the invite is valid for (in seconds)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 346,
							col: 2,
						},
						jsDoc: 'the maximum number of times the invite can be used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'target_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 348,
							col: 2,
						},
						jsDoc: 'the target user for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'UserPayload',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'UserPayload',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 350,
							col: 2,
						},
						jsDoc: 'the type of user target for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'temporary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 352,
							col: 2,
						},
						jsDoc:
							"whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 354,
							col: 2,
						},
						jsDoc: 'how many times the invite has been used (always will be 0)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InviteDeleteEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 358,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#invite-delete',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 360,
							col: 2,
						},
						jsDoc: 'the channel of the invite',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 362,
							col: 2,
						},
						jsDoc: 'the guild of the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
							line: 364,
							col: 2,
						},
						jsDoc: 'the unique invite code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'CreateGuildPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'CreateGuildPayload',
			},
		},
		{
			kind: 'import',
			name: 'Integration',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'Integration',
			},
		},
		{
			kind: 'import',
			name: 'PartialUser',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'PartialUser',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 7,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'Activity',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Activity',
			},
		},
		{
			kind: 'import',
			name: 'Application',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Application',
			},
		},
		{
			kind: 'import',
			name: 'ClientStatusPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				line: 9,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
				imported: 'ClientStatusPayload',
			},
		},
		{
			kind: 'interface',
			name: 'GuildRolePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'The role object of the role created, deleted, or updated',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'RoleData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RoleData',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildRoleDeletePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 19,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 21,
							col: 2,
						},
						jsDoc: 'The id of the role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildMemberChunkPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'The set of guild members',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MemberCreatePayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MemberCreatePayload',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'chunk_index',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'The chunk index in the expected chunks for this response',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'chunk_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'The total number of expected chunks for this response',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'not_found',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'if passing an invalid id, it will be found here',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'if passing true, presences of the members will be here',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Presence',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Presence',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'The nonce to help identify',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildMemberUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 41,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 43,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 45,
							col: 2,
						},
						jsDoc: "The user's role ids",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'The user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 49,
							col: 2,
						},
						jsDoc: 'The nickname of the user in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'When the user used their nitro boost on the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'pending',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 53,
							col: 2,
						},
						jsDoc:
							"whether the user has not yet passed the guild's Membership Screening requirements",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildMemberAddPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 56,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'MemberCreatePayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'MemberCreatePayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 57,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildEmojisUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 60,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 61,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 62,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Emoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Emoji',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildBanPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 65,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 67,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 69,
							col: 2,
						},
						jsDoc:
							'The banned user. Not a member as you can ban users outside of your guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildDeletePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 72,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'unavailable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'Whether this guild went unavailable.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'UpdateGuildPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 79,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 81,
							col: 2,
						},
						jsDoc: 'The guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 83,
							col: 2,
						},
						jsDoc: 'The guild name 2-100 characters',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 85,
							col: 2,
						},
						jsDoc: 'The guild icon image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 87,
							col: 2,
						},
						jsDoc: 'The guild splash image hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'disovery_splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 89,
							col: 2,
						},
						jsDoc:
							'Discovery splash has; only present for guilds with the "DISCOVERABLE" feature',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'owner_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 91,
							col: 2,
						},
						jsDoc: 'The id of the owner',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 93,
							col: 2,
						},
						jsDoc: 'The voice region id for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'The afk channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 97,
							col: 2,
						},
						jsDoc: 'AFK Timeout in seconds.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 99,
							col: 2,
						},
						jsDoc: 'The verification level required for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'Default message notifications level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'Explicit content filter level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'The roles in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RoleData',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RoleData',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 107,
							col: 2,
						},
						jsDoc: 'The custom guild emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Emoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Emoji',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'features',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 109,
							col: 2,
						},
						jsDoc: 'Enabled guild features',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'GuildFeatures',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'GuildFeatures',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mfa_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 111,
							col: 2,
						},
						jsDoc: 'Required MFA level for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'widget_enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 113,
							col: 2,
						},
						jsDoc: 'True if the server widget is enabled',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'widget_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 115,
							col: 2,
						},
						jsDoc:
							'The channel id that the widget will generate an invite to, or null if set to no invite.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 117,
							col: 2,
						},
						jsDoc: 'The id of the channel to which system mesages are sent',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'system_channel_flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 119,
							col: 2,
						},
						jsDoc: 'System channel flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rules_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 121,
							col: 2,
						},
						jsDoc:
							'The id of the channel where guilds with the PUBLIC feature can display rules and or guidelines.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'max_presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 123,
							col: 2,
						},
						jsDoc:
							'The maximum amount of presences for the guild(the default value, currently 5000 is in effect when null is returned.)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'max_members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'The maximum amount of members for the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'vanity_url_code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 127,
							col: 2,
						},
						jsDoc: 'The vanity url code for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'The description for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 131,
							col: 2,
						},
						jsDoc: 'The banner hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'premium_tier',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 133,
							col: 2,
						},
						jsDoc: 'The premium tier',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premium_subscription_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 135,
							col: 2,
						},
						jsDoc: 'The total number of users currently boosting this server.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'preferred_locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 137,
							col: 2,
						},
						jsDoc:
							'The preferred local of this guild only set if guild has the DISCOVERABLE feature, defaults to en-US',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'public_updates_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 139,
							col: 2,
						},
						jsDoc:
							'The id of the channel where admins and moderators of guilds with the PUBLIC feature receive notices from Discord',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'max_video_channel_users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 141,
							col: 2,
						},
						jsDoc: 'The maximum amount of users in a video channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 143,
							col: 2,
						},
						jsDoc:
							'The approximate number of members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_presence_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 145,
							col: 2,
						},
						jsDoc:
							'The approximate number of non-offline members in this guild, returned from the GET /guild/id endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateGuildPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 148,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'UpdateGuildPayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'UpdateGuildPayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'joined_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 150,
							col: 2,
						},
						jsDoc: 'When this guild was joined at',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'large',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 152,
							col: 2,
						},
						jsDoc: 'Whether this is considered a large guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'unavailable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 154,
							col: 2,
						},
						jsDoc: 'Whether this guild is unavailable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'Total number of members in this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'voice_states',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 157,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'VoiceState',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'VoiceState',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 159,
							col: 2,
						},
						jsDoc: 'Users in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MemberCreatePayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MemberCreatePayload',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 161,
							col: 2,
						},
						jsDoc: 'Channels in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'ChannelCreatePayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ChannelCreatePayload',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 162,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Presence',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Presence',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'GuildFeatures',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 165,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'INVITE_SPLASH',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_SPLASH',
							},
						},
						{
							repr: 'VIP_REGIONS',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'VIP_REGIONS',
							},
						},
						{
							repr: 'VANITY_URL',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'VANITY_URL',
							},
						},
						{
							repr: 'VERIFIED',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'VERIFIED',
							},
						},
						{
							repr: 'PARTNERED',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'PARTNERED',
							},
						},
						{
							repr: 'PUBLIC',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'PUBLIC',
							},
						},
						{
							repr: 'COMMERCE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'COMMERCE',
							},
						},
						{
							repr: 'NEWS',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'NEWS',
							},
						},
						{
							repr: 'DISCOVERABLE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'DISCOVERABLE',
							},
						},
						{
							repr: 'FEATURABLE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'FEATURABLE',
							},
						},
						{
							repr: 'ANIMATED_ICON',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'ANIMATED_ICON',
							},
						},
						{
							repr: 'BANNER',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'BANNER',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'VoiceRegion',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 181,
				col: 0,
			},
			jsDoc: '@deprecated Use DiscordVoiceRegion',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 183,
							col: 2,
						},
						jsDoc: 'unique ID for the region',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 185,
							col: 2,
						},
						jsDoc: 'name of the region',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'vip',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'true if this is a vip-only server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'optimal',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 189,
							col: 2,
						},
						jsDoc:
							"true for a single server that is closest to the current user's client",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'deprecated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 191,
							col: 2,
						},
						jsDoc:
							'whether this is a deprecated voice region (avoid switching to these)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'custom',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 193,
							col: 2,
						},
						jsDoc:
							'whether this is a custom voice region (used for events/etc)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BanOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 196,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'number of days to delete messages for (0-7)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 200,
							col: 2,
						},
						jsDoc: 'The reason for the ban.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BannedUser',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 203,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 205,
							col: 2,
						},
						jsDoc: 'The reason for the ban',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 207,
							col: 2,
						},
						jsDoc: 'The banned user object',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PositionSwap',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 210,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 212,
							col: 2,
						},
						jsDoc: 'The unique id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 214,
							col: 2,
						},
						jsDoc: 'The sorting position number.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildEditOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 217,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 219,
							col: 2,
						},
						jsDoc: 'The guild name',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 221,
							col: 2,
						},
						jsDoc: 'The guild voice region id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 223,
							col: 2,
						},
						jsDoc:
							'The verification level. 0 is UNRESTRICTED. 1 is Verified email. 2 is 5 minutes user. 3 is 10 minutes member in guild. 4 is verified phone number',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 225,
							col: 2,
						},
						jsDoc:
							'The default message notification level. 0 is ALL_MESSAGES and 1 is ONLY_MENTINS',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 227,
							col: 2,
						},
						jsDoc:
							'Explicit content filter level. 0 is DISABLED 1 is members without roles. 2 is all members',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 229,
							col: 2,
						},
						jsDoc: 'The id for the afk channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 231,
							col: 2,
						},
						jsDoc: 'The afk timeout in seconds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 233,
							col: 2,
						},
						jsDoc:
							'If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally. base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has ANIMATED_ICON feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'owner_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 235,
							col: 2,
						},
						jsDoc: 'user id to transfer guild ownership to (must be owner)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 237,
							col: 2,
						},
						jsDoc:
							'If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally. base64 16:9 png/jpeg image for the guild splash (when the server has INVITE_SPLASH feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 239,
							col: 2,
						},
						jsDoc:
							'If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally. base64 16:9 png/jpeg image for the guild banner (when the server has BANNER feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 241,
							col: 2,
						},
						jsDoc: 'the id of the channel to which system messages are sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EditIntegrationOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 244,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'expire_behavior',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 246,
							col: 2,
						},
						jsDoc: 'The behavior when an integration subscription lapses.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'expire_grace_period',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 248,
							col: 2,
						},
						jsDoc:
							'The period in seconds where the integration will ignore lapsed subscriptions',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'enable_emoticons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 250,
							col: 2,
						},
						jsDoc:
							'Whether emoticons should be synced for this integrations (twitch only currently)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Integration',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 253,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 255,
							col: 2,
						},
						jsDoc: 'The integrations unique id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 257,
							col: 2,
						},
						jsDoc: 'the integrations name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 259,
							col: 2,
						},
						jsDoc: 'The integration type like twitch, youtube etc',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'Is this integration enabled',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'syncing',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 263,
							col: 2,
						},
						jsDoc: 'is this integration syncing',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'role_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 265,
							col: 2,
						},
						jsDoc: 'id that this integration uses for "subscribers"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enable_emoticons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 267,
							col: 2,
						},
						jsDoc:
							'whether emoticons should be synced for this integration (twitch only currently)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'expire_behavior',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 269,
							col: 2,
						},
						jsDoc: 'The behavior of expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'IntegrationExpireBehaviors',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'IntegrationExpireBehaviors',
							},
						},
						typeParams: [],
					},
					{
						name: 'expire_grace_period',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 271,
							col: 2,
						},
						jsDoc: 'The grace period before expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 273,
							col: 2,
						},
						jsDoc: 'The user for this integration',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'account',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 275,
							col: 2,
						},
						jsDoc: 'The integration account information',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Account',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Account',
							},
						},
						typeParams: [],
					},
					{
						name: 'synced_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 277,
							col: 2,
						},
						jsDoc: 'When this integration was last synced',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'subscriber_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 279,
							col: 2,
						},
						jsDoc: 'how many subscribers this integration has',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'revoked',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 281,
							col: 2,
						},
						jsDoc: 'has this integration been revoked',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 283,
							col: 2,
						},
						jsDoc: 'The bot/OAuth2 application for discord integrations',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Application',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Application',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'IntegrationExpireBehaviors',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 286,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'RemoveRole',
						jsDoc: null,
					},
					{
						name: 'Kick',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'Account',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 291,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 293,
							col: 2,
						},
						jsDoc: 'id of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 295,
							col: 2,
						},
						jsDoc: 'name of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 298,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 300,
							col: 2,
						},
						jsDoc: "The user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 302,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 304,
							col: 2,
						},
						jsDoc: "The user's 4 digit discord tag",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 306,
							col: 2,
						},
						jsDoc: "The user's avatar hash",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 308,
							col: 2,
						},
						jsDoc: 'Whether the user is a bot',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'system',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 310,
							col: 2,
						},
						jsDoc:
							'Whether the user is an official discord system user (part of the urgent message system.)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mfa_enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 312,
							col: 2,
						},
						jsDoc: 'Whether the user has two factor enabled on their account',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 314,
							col: 2,
						},
						jsDoc: "the user's chosen language option",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 316,
							col: 2,
						},
						jsDoc: 'Whether the email on this account has been verified',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'email',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 318,
							col: 2,
						},
						jsDoc: "The user's email",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 320,
							col: 2,
						},
						jsDoc: "The flags on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premium_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 322,
							col: 2,
						},
						jsDoc: "The type of Nitro subscription on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PartialUser',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 325,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 327,
							col: 2,
						},
						jsDoc: "The user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 329,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 331,
							col: 2,
						},
						jsDoc: "The user's 4 digit discord tag",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 333,
							col: 2,
						},
						jsDoc: "The user's avatar hash",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 335,
							col: 2,
						},
						jsDoc: 'Whether the user is a bot',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'system',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 337,
							col: 2,
						},
						jsDoc:
							'Whether the user is an official discord system user (part of the urgent message system.)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mfa_enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 339,
							col: 2,
						},
						jsDoc: 'Whether the user has two factor enabled on their account',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 341,
							col: 2,
						},
						jsDoc: "the user's chosen language option",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 343,
							col: 2,
						},
						jsDoc: 'Whether the email on this account has been verified',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'email',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 345,
							col: 2,
						},
						jsDoc: "The user's email",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 347,
							col: 2,
						},
						jsDoc: "The flags on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premium_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 349,
							col: 2,
						},
						jsDoc: "The type of Nitro subscription on a user's account.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'UserFlags',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 352,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'DISCORD_EMPLOYEE',
						jsDoc: null,
					},
					{
						name: 'DISCORD_PARTNER',
						jsDoc: null,
					},
					{
						name: 'HYPE_SQUAD_EVENTS',
						jsDoc: null,
					},
					{
						name: 'BUG_HUNTER',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BRAVERY',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BRILLIANCE',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BALANCE',
						jsDoc: null,
					},
					{
						name: 'EARLY_SUPPORTER',
						jsDoc: null,
					},
					{
						name: 'TEAM_USER',
						jsDoc: null,
					},
					{
						name: 'SYSTEM',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'NitroTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 366,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'NITRO_CLASSIC',
						jsDoc: null,
					},
					{
						name: 'NITRO',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'VanityInvite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 371,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 372,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 373,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildEmbed',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 376,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 378,
							col: 2,
						},
						jsDoc: 'Whether the embed is enabled.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetAuditLogsOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 381,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 383,
							col: 2,
						},
						jsDoc: 'Filter the logs for actions made by this user.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'action_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 385,
							col: 2,
						},
						jsDoc: 'The type of audit log.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'AuditLogType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'AuditLogType',
							},
						},
						typeParams: [],
					},
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 387,
							col: 2,
						},
						jsDoc: 'Filter the logs before a certain log entry.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 389,
							col: 2,
						},
						jsDoc: 'How many entries are returned. Between 1-100. Default 50.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'AuditLogType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 392,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'GUILD_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_UPDATE',
							},
						},
						{
							repr: 'CHANNEL_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_CREATE',
							},
						},
						{
							repr: 'CHANNEL_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_UPDATE',
							},
						},
						{
							repr: 'CHANNEL_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_DELETE',
							},
						},
						{
							repr: 'CHANNEL_OVERWRITE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_OVERWRITE_CREATE',
							},
						},
						{
							repr: 'CHANNEL_OVERWRITE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_OVERWRITE_UPDATE',
							},
						},
						{
							repr: 'CHANNEL_OVERWRITE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_OVERWRITE_DELETE',
							},
						},
						{
							repr: 'MEMBER_KICK',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_KICK',
							},
						},
						{
							repr: 'MEMBER_PRUNE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_PRUNE',
							},
						},
						{
							repr: 'MEMBER_BAN_ADD',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_BAN_ADD',
							},
						},
						{
							repr: 'MEMBER_BAN_REMOVE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_BAN_REMOVE',
							},
						},
						{
							repr: 'MEMBER_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_UPDATE',
							},
						},
						{
							repr: 'MEMBER_ROLE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_ROLE_UPDATE',
							},
						},
						{
							repr: 'MEMBER_MOVE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_MOVE',
							},
						},
						{
							repr: 'MEMBER_DISCONNECT',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MEMBER_DISCONNECT',
							},
						},
						{
							repr: 'BOT_ADD',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'BOT_ADD',
							},
						},
						{
							repr: 'ROLE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'ROLE_CREATE',
							},
						},
						{
							repr: 'ROLE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'ROLE_UPDATE',
							},
						},
						{
							repr: 'ROLE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'ROLE_DELETE',
							},
						},
						{
							repr: 'INVITE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_CREATE',
							},
						},
						{
							repr: 'INVITE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_UPDATE',
							},
						},
						{
							repr: 'INVITE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_DELETE',
							},
						},
						{
							repr: 'WEBHOOK_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'WEBHOOK_CREATE',
							},
						},
						{
							repr: 'WEBHOOK_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'WEBHOOK_UPDATE',
							},
						},
						{
							repr: 'WEBHOOK_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'WEBHOOK_DELETE',
							},
						},
						{
							repr: 'EMOJI_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'EMOJI_CREATE',
							},
						},
						{
							repr: 'EMOJI_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'EMOJI_UPDATE',
							},
						},
						{
							repr: 'EMOJI_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'EMOJI_DELETE',
							},
						},
						{
							repr: 'MESSAGE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_DELETE',
							},
						},
						{
							repr: 'MESSAGE_BULK_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_BULK_DELETE',
							},
						},
						{
							repr: 'MESSAGE_PIN',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_PIN',
							},
						},
						{
							repr: 'MESSAGE_UNPIN',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_UNPIN',
							},
						},
						{
							repr: 'INTEGRATION_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_CREATE',
							},
						},
						{
							repr: 'INTEGRATION_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_UPDATE',
							},
						},
						{
							repr: 'INTEGRATION_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_DELETE',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'AuditLogs',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 429,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'GUILD_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_CREATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_DELETE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_CREATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_DELETE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_KICK',
						jsDoc: null,
					},
					{
						name: 'MEMBER_PRUNE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_BAN_ADD',
						jsDoc: null,
					},
					{
						name: 'MEMBER_BAN_REMOVE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_UPDATE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_ROLE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_MOVE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_DISCONNECT',
						jsDoc: null,
					},
					{
						name: 'BOT_ADD',
						jsDoc: null,
					},
					{
						name: 'ROLE_CREATE',
						jsDoc: null,
					},
					{
						name: 'ROLE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'ROLE_DELETE',
						jsDoc: null,
					},
					{
						name: 'INVITE_CREATE',
						jsDoc: null,
					},
					{
						name: 'INVITE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'INVITE_DELETE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_CREATE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_UPDATE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_DELETE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_CREATE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_UPDATE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_BULK_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_PIN',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_UNPIN',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_CREATE',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_UPDATE',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_DELETE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'Overwrite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 467,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 469,
							col: 2,
						},
						jsDoc: 'The role or user id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 471,
							col: 2,
						},
						jsDoc: 'Whether this is a role or a member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'OverwriteType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'OverwriteType',
							},
						},
						typeParams: [],
					},
					{
						name: 'allow',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 473,
							col: 2,
						},
						jsDoc:
							'The permissions that this id is allowed to do. (This will mark it as a green check.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'deny',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 475,
							col: 2,
						},
						jsDoc:
							'The permissions that this id is NOT allowed to do. (This will mark it as a red x.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'OverwriteType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 478,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'ROLE',
						jsDoc: null,
					},
					{
						name: 'MEMBER',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'RawOverwrite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 483,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 485,
							col: 2,
						},
						jsDoc: 'The role or user id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 487,
							col: 2,
						},
						jsDoc: 'Whether this is a role or a member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'OverwriteType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'OverwriteType',
							},
						},
						typeParams: [],
					},
					{
						name: 'allow',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 489,
							col: 2,
						},
						jsDoc:
							'The permissions that this id is allowed to do. (This will mark it as a green check.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deny',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 491,
							col: 2,
						},
						jsDoc:
							'The permissions that this id is NOT allowed to do. (This will mark it as a red x.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PermissionOverwrite',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 494,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'Omit',
						kind: 'typeRef',
						typeRef: {
							typeParams: [
								{
									repr: 'RawOverwrite',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'RawOverwrite',
									},
								},
								{
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'allow',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'allow',
											},
										},
										{
											repr: 'deny',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'deny',
											},
										},
									],
								},
							],
							typeName: 'Omit',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'allow',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 496,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'deny',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 497,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ChannelCreateOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 500,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 502,
							col: 2,
						},
						jsDoc: 'The type of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ChannelTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 504,
							col: 2,
						},
						jsDoc: 'The channel topic. (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 506,
							col: 2,
						},
						jsDoc: 'The bitrate(in bits) of the voice channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 508,
							col: 2,
						},
						jsDoc: 'The user limit of the voice channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rate_limit_per_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 510,
							col: 2,
						},
						jsDoc:
							'The amount of seconds a user has to wait before sending another message. (0-21600 seconds). Bots, as well as users with the permission `manage_messages or manage_channel` are unaffected.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 512,
							col: 2,
						},
						jsDoc: 'The sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissionOverwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 514,
							col: 2,
						},
						jsDoc: "The channel's permission overwrites",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Overwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Overwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'parent_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 516,
							col: 2,
						},
						jsDoc: 'The id of the parent category for the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 518,
							col: 2,
						},
						jsDoc: 'Whether the channel is nsfw',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 520,
							col: 2,
						},
						jsDoc: 'The reason to add in the Audit Logs.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateEmojisOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 523,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 525,
							col: 2,
						},
						jsDoc:
							'The roles for which this emoji will be whitelisted. Only the users with one of these roles can use this emoji.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 527,
							col: 2,
						},
						jsDoc: 'The reason to have in the Audit Logs.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EditEmojisOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 530,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 532,
							col: 2,
						},
						jsDoc: 'The name of the emoji',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 534,
							col: 2,
						},
						jsDoc:
							'The roles for which this emoji will be whitelisted. Only the users with one of these roles can use this emoji.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateRoleOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 537,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 538,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 539,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 540,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 541,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 542,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PrunePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 545,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'pruned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 546,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PruneOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 549,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 551,
							col: 2,
						},
						jsDoc: 'Number of days to prune (1-30). Default: 7',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '9',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 9,
									},
								},
								{
									repr: '10',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 10,
									},
								},
								{
									repr: '11',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 11,
									},
								},
								{
									repr: '12',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 12,
									},
								},
								{
									repr: '13',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 13,
									},
								},
								{
									repr: '14',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 14,
									},
								},
								{
									repr: '15',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 15,
									},
								},
								{
									repr: '16',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 16,
									},
								},
								{
									repr: '17',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 17,
									},
								},
								{
									repr: '18',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 18,
									},
								},
								{
									repr: '19',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 19,
									},
								},
								{
									repr: '20',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 20,
									},
								},
								{
									repr: '21',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 21,
									},
								},
								{
									repr: '22',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 22,
									},
								},
								{
									repr: '23',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 23,
									},
								},
								{
									repr: '24',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 24,
									},
								},
								{
									repr: '25',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 25,
									},
								},
								{
									repr: '26',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 26,
									},
								},
								{
									repr: '27',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 27,
									},
								},
								{
									repr: '28',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 28,
									},
								},
								{
									repr: '29',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 29,
									},
								},
								{
									repr: '30',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 30,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'computePruneCount',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 583,
							col: 2,
						},
						jsDoc:
							"Whether 'pruned' is returned, discouraged for large guilds. Default: true",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 585,
							col: 2,
						},
						jsDoc: 'Role(s) to include',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'VoiceState',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 588,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 590,
							col: 2,
						},
						jsDoc: 'the guild id this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 592,
							col: 2,
						},
						jsDoc: 'the channel id this user is connected to',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 594,
							col: 2,
						},
						jsDoc: 'the user id this voice state is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 596,
							col: 2,
						},
						jsDoc: 'the guild member this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 598,
							col: 2,
						},
						jsDoc: 'the session id for this voice state',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 600,
							col: 2,
						},
						jsDoc: 'whether this user is deafened by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 602,
							col: 2,
						},
						jsDoc: 'whether this user is muted by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 604,
							col: 2,
						},
						jsDoc: 'whether this user is locally deafened',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 606,
							col: 2,
						},
						jsDoc: 'whether this user is locally muted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_stream',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 608,
							col: 2,
						},
						jsDoc: 'whether this user is streaming using "Go Live"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_video',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 610,
							col: 2,
						},
						jsDoc: "whether this user's camera is enabled",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'suppress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 612,
							col: 2,
						},
						jsDoc: 'whether this user is muted by the current user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Presence',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 615,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 617,
							col: 2,
						},
						jsDoc: 'The user presence is being updated for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 619,
							col: 2,
						},
						jsDoc: 'The roles this user is in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 621,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 623,
							col: 2,
						},
						jsDoc: 'Either idle',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'StatusType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'StatusType',
							},
						},
						typeParams: [],
					},
					{
						name: 'activities',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 624,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Activity',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Activity',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'client_status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 625,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ClientStatusPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ClientStatusPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'premium_since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 626,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 627,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'FetchMembersOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 630,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 632,
							col: 2,
						},
						jsDoc:
							'Used to specify if you want the presences of the matched members. Default = false.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'query',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 634,
							col: 2,
						},
						jsDoc:
							'Only returns members whose username or nickname starts with this string. DO NOT INCLUDE discriminators. If a string is provided, the max amount of members that can be fetched is 100. Default = return all members.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'userIDs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 636,
							col: 2,
						},
						jsDoc: 'Used to specify which users to fetch specifically.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 638,
							col: 2,
						},
						jsDoc:
							'Maximum number of members to return that match the query. Default = 0 which will return all members.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GetMemberOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 641,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 643,
							col: 2,
						},
						jsDoc: 'max number of members to return (1-1000), defaults to 1',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 645,
							col: 2,
						},
						jsDoc: 'the highest user id in the previous page',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateServerOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 648,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 650,
							col: 2,
						},
						jsDoc: 'name of the guild (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 652,
							col: 2,
						},
						jsDoc: 'voice region id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 654,
							col: 2,
						},
						jsDoc:
							'guild icon image url or base64 128x128 image for the guild icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 656,
							col: 2,
						},
						jsDoc: 'verification level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 658,
							col: 2,
						},
						jsDoc: 'default message notification level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 660,
							col: 2,
						},
						jsDoc: 'explicit content filter level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 662,
							col: 2,
						},
						jsDoc: 'array of role objects\tnew guild roles',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RoleData',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RoleData',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 664,
							col: 2,
						},
						jsDoc: "array of partial channel objects\tnew guild's channels",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'ChannelCreatePayload',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ChannelCreatePayload',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 666,
							col: 2,
						},
						jsDoc: 'id for afk channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 668,
							col: 2,
						},
						jsDoc: 'afk timeout in seconds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 670,
							col: 2,
						},
						jsDoc:
							'the id of the channel where guild notices such as welcome messages and boost events are posted',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildTemplate',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 674,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 676,
							col: 2,
						},
						jsDoc: 'the template code (unique ID)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 678,
							col: 2,
						},
						jsDoc: 'template name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 680,
							col: 2,
						},
						jsDoc: 'the description for the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'usage_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 682,
							col: 2,
						},
						jsDoc: 'number of times this template has been used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'creator_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 684,
							col: 2,
						},
						jsDoc: 'the ID of the user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 686,
							col: 2,
						},
						jsDoc: 'the user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 688,
							col: 2,
						},
						jsDoc: 'when this template was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'updated_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 690,
							col: 2,
						},
						jsDoc: 'when this template was last synced to the source guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'source_guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 692,
							col: 2,
						},
						jsDoc: 'the ID of the guild this template is based on',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'serialized_source_guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 694,
							col: 2,
						},
						jsDoc: 'the guild snapshot this template contains',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'is_dirty',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 696,
							col: 2,
						},
						jsDoc: 'whether the template has unsynced changes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateGuildFromTemplate',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 699,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 701,
							col: 2,
						},
						jsDoc: 'name of the guild (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 703,
							col: 2,
						},
						jsDoc: 'base64 128x128 image for the guild icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateGuildTemplate',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 706,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 708,
							col: 2,
						},
						jsDoc: 'name of the template (1-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 710,
							col: 2,
						},
						jsDoc: 'description for the template (0-120 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EditGuildTemplate',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 713,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 715,
							col: 2,
						},
						jsDoc: 'name of the template (1-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
							line: 717,
							col: 2,
						},
						jsDoc: 'description for the template (0-120 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'ChannelTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				imported: 'ChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'Emoji',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'Emoji',
			},
		},
		{
			kind: 'import',
			name: 'StatusType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'StatusType',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'Activity',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Activity',
			},
		},
		{
			kind: 'import',
			name: 'Application',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Application',
			},
		},
		{
			kind: 'import',
			name: 'Permission',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/permission.ts',
				imported: 'Permission',
			},
		},
		{
			kind: 'import',
			name: 'ClientStatusPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 7,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/presence.ts',
				imported: 'ClientStatusPayload',
			},
		},
		{
			kind: 'import',
			name: 'RoleData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
				imported: 'RoleData',
			},
		},
		{
			kind: 'interface',
			name: 'MentionedUser',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'UserPayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'UserPayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 8,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MentionedChannel',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 11,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 13,
							col: 2,
						},
						jsDoc: 'The id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 15,
							col: 2,
						},
						jsDoc: 'The id of the guild containing the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 17,
							col: 2,
						},
						jsDoc: 'The type of the channel.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ChannelType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelType',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 19,
							col: 2,
						},
						jsDoc: 'The name of the channel.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Attachment',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'Attachment id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'filename',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'The name of the file attached',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'size',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'The size of file in bytes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'Source url of file',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'A proxied url of file',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'The height of file if an image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'The width of the file if an image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Embed',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 39,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'title',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 41,
							col: 2,
						},
						jsDoc: 'The title of the embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 43,
							col: 2,
						},
						jsDoc: 'The type of embed (always rich for webhook embeds)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 45,
							col: 2,
						},
						jsDoc: 'The description of embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'The url of embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 49,
							col: 2,
						},
						jsDoc: 'The timestap of the embed content',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'The color code of the embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'footer',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 53,
							col: 2,
						},
						jsDoc: 'The footer information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedFooter',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedFooter',
							},
						},
						typeParams: [],
					},
					{
						name: 'image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 55,
							col: 2,
						},
						jsDoc: 'The image information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedImage',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedImage',
							},
						},
						typeParams: [],
					},
					{
						name: 'thumbnail',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 57,
							col: 2,
						},
						jsDoc: 'The thumbnail information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedThumbnail',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedThumbnail',
							},
						},
						typeParams: [],
					},
					{
						name: 'video',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 59,
							col: 2,
						},
						jsDoc: 'The video information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedVideo',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedVideo',
							},
						},
						typeParams: [],
					},
					{
						name: 'provider',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 61,
							col: 2,
						},
						jsDoc: 'Provider information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedProvider',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedProvider',
							},
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 63,
							col: 2,
						},
						jsDoc: 'Author information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EmbedAuthor',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmbedAuthor',
							},
						},
						typeParams: [],
					},
					{
						name: 'fields',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 65,
							col: 2,
						},
						jsDoc: 'Fields information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'EmbedField',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'EmbedField',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedFooter',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 68,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 70,
							col: 2,
						},
						jsDoc: 'The text of the footer',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 72,
							col: 2,
						},
						jsDoc:
							'The url of the footer icon. Only supports http(s) and attachments',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'A proxied url of footer icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedImage',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 77,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 79,
							col: 2,
						},
						jsDoc:
							'The source url of image (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 81,
							col: 2,
						},
						jsDoc: 'A proxied url of the image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 83,
							col: 2,
						},
						jsDoc: 'The height of image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 85,
							col: 2,
						},
						jsDoc: 'The width of the image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedThumbnail',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 88,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 90,
							col: 2,
						},
						jsDoc:
							'The source url of image (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 92,
							col: 2,
						},
						jsDoc: 'A proxied url of the thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'The height of the thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 96,
							col: 2,
						},
						jsDoc: 'The width of the thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedVideo',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 99,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'The source url of video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'a proxied url of the video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'The height of the video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 107,
							col: 2,
						},
						jsDoc: 'The width of the video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedProvider',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 110,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 112,
							col: 2,
						},
						jsDoc: 'The name of the provider',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'The url of the provider',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedAuthor',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 117,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 119,
							col: 2,
						},
						jsDoc: 'The name of the author',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 121,
							col: 2,
						},
						jsDoc: 'The url of the author',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 123,
							col: 2,
						},
						jsDoc:
							'The url of the author icon (supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 125,
							col: 2,
						},
						jsDoc: 'A proxied url of author icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EmbedField',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 128,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 130,
							col: 2,
						},
						jsDoc: 'The name of the field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 132,
							col: 2,
						},
						jsDoc: 'The value of the field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'inline',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 134,
							col: 2,
						},
						jsDoc: 'Whether or not this field should display inline',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Reaction',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 137,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 139,
							col: 2,
						},
						jsDoc: 'The times this emoji has been used to react',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'me',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 141,
							col: 2,
						},
						jsDoc: 'Whether the current user reacted using this emoji',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 143,
							col: 2,
						},
						jsDoc: 'The emoji information. Can be partial.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'EmojiReaction',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EmojiReaction',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'MessageTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 148,
				col: 0,
			},
			jsDoc: '@deprecated Use DiscordMessageTypes',
			enumDef: {
				members: [
					{
						name: 'DEFAULT',
						jsDoc: null,
					},
					{
						name: 'RECIPIENT_ADD',
						jsDoc: null,
					},
					{
						name: 'RECIPIENT_REMOVE',
						jsDoc: null,
					},
					{
						name: 'CALL',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_NAME_CHANGE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_ICON_CHANGE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_PINNED_MESSAGE',
						jsDoc: null,
					},
					{
						name: 'GUILD_MEMBER_JOIN',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_FOLLOW_ADD',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_DISQUALIFIED',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_REQUALIFIED',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING',
						jsDoc: null,
					},
					{
						name: 'REPLY',
						jsDoc: null,
					},
					{
						name: 'APPLICATION_COMMAND',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'ActivityTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 170,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'JOIN',
						jsDoc: null,
					},
					{
						name: 'SPECTATE',
						jsDoc: null,
					},
					{
						name: 'LISTEN',
						jsDoc: null,
					},
					{
						name: 'JOIN_REQUEST',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'Activity',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 177,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 179,
							col: 2,
						},
						jsDoc: 'The type of message activity',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'party_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 181,
							col: 2,
						},
						jsDoc: 'The party id from a rich presence event',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Application',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 184,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 186,
							col: 2,
						},
						jsDoc: 'The id of the application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cover_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 188,
							col: 2,
						},
						jsDoc: "The id of the embed's image asset",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 190,
							col: 2,
						},
						jsDoc: "The application's description",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 192,
							col: 2,
						},
						jsDoc: "The id of the application's icon",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 194,
							col: 2,
						},
						jsDoc: 'The name of the application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'summary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'the description of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'the bot associated with this application',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Reference',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 201,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 204,
							col: 2,
						},
						jsDoc: 'The id of the originating message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 207,
							col: 2,
						},
						jsDoc: "The id of the originating message's channel",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 210,
							col: 2,
						},
						jsDoc: "The id of the originating message's guild",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'fail_if_not_exists',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 213,
							col: 2,
						},
						jsDoc:
							"When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default false",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordReferencePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 216,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'Reference',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'Reference',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 219,
							col: 2,
						},
						jsDoc: "The id of the originating message's channel",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'MessageFlags',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 222,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'CROSSPOSTED',
						jsDoc: null,
					},
					{
						name: 'IS_CROSSPOST',
						jsDoc: null,
					},
					{
						name: 'SUPPRESS_EMBEDS',
						jsDoc: null,
					},
					{
						name: 'SOURCE_MESSAGE_DELETED',
						jsDoc: null,
					},
					{
						name: 'URGENT',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'EmojiReaction',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 230,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 232,
							col: 2,
						},
						jsDoc: 'The emoji id.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 234,
							col: 2,
						},
						jsDoc:
							'The emoji name. Null in reaction emoji object if emoji is no longer on the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 236,
							col: 2,
						},
						jsDoc: 'The roles this emoji is whitelisted to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 238,
							col: 2,
						},
						jsDoc: 'The user that created this emoji',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'require_colons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 240,
							col: 2,
						},
						jsDoc: 'Whether this emoji must be wrapped in colons',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 242,
							col: 2,
						},
						jsDoc: 'Whether this emoji is managed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 244,
							col: 2,
						},
						jsDoc: 'Whether this emoji is animated',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ReactionPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 247,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 249,
							col: 2,
						},
						jsDoc:
							'The id of the reaction. Null usually if it is a default discord emoji.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 251,
							col: 2,
						},
						jsDoc:
							'The name of the reaction. Null if it was deleted from the guild and the custom data is no longer available',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 253,
							col: 2,
						},
						jsDoc: 'If the reaction is an animated emoji.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageCreateOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 256,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 258,
							col: 2,
						},
						jsDoc: 'The id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 260,
							col: 2,
						},
						jsDoc: 'The id of the channel the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 262,
							col: 2,
						},
						jsDoc: 'The id of the guild the message was sent in',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 264,
							col: 2,
						},
						jsDoc:
							'The author of this message (not guaranteed to be a valid user such as a webhook.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 266,
							col: 2,
						},
						jsDoc:
							"The member properties for this message's author. Can be partial.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 268,
							col: 2,
						},
						jsDoc: 'The contents of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 270,
							col: 2,
						},
						jsDoc: 'When this message was sent',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'edited_timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'When this message was edited (if it was not edited, null)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'Whether this was a TextToSpeech message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentions_everyone',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 276,
							col: 2,
						},
						jsDoc: 'Whether this message mentions everyone',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 278,
							col: 2,
						},
						jsDoc: 'Users specifically mentioned in the message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MentionedUser',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MentionedUser',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mention_roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 280,
							col: 2,
						},
						jsDoc: 'Roles specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention_channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 282,
							col: 2,
						},
						jsDoc: 'Channels specifically mentioned in this message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MentionedChannel',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MentionedChannel',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'attachments',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 284,
							col: 2,
						},
						jsDoc: 'Any attached files',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Attachment',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Attachment',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 286,
							col: 2,
						},
						jsDoc: 'Any embedded content',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'reactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'Reactions to the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Reaction',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Reaction',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'Used for validating a message was sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'pinned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 292,
							col: 2,
						},
						jsDoc: 'Whether this message is pinned',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 294,
							col: 2,
						},
						jsDoc:
							'If the message is generated by a webhook, this is the webhooks id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 296,
							col: 2,
						},
						jsDoc: 'The type of message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '9',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 9,
									},
								},
								{
									repr: '10',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 10,
									},
								},
								{
									repr: '11',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 11,
									},
								},
								{
									repr: '12',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 12,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'activity',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 298,
							col: 2,
						},
						jsDoc:
							'The activities sent with Rich Presence-related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Activity',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Activity',
							},
						},
						typeParams: [],
					},
					{
						name: 'applications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 300,
							col: 2,
						},
						jsDoc:
							'Applications that sent with Rich Presence related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Application',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Application',
							},
						},
						typeParams: [],
					},
					{
						name: 'message_reference',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 303,
							col: 2,
						},
						jsDoc: 'The reference data sent with crossposted messages',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordReferencePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordReferencePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 305,
							col: 2,
						},
						jsDoc:
							'The message flags combined like permission bits describe extra features of the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '16',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 16,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'stickers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 307,
							col: 2,
						},
						jsDoc:
							'the stickers sent with the message (bots currently can only receive messages with stickers, not send)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MessageSticker',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MessageSticker',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'referenced_message',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 309,
							col: 2,
						},
						jsDoc:
							'The message id of the original message if this message was sent as a reply. If null, the original message was deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'MessageCreateOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageCreateOptions',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BaseMessageDeletePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 312,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 314,
							col: 2,
						},
						jsDoc: 'The id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 316,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageDeletePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 319,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BaseMessageDeletePayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BaseMessageDeletePayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 321,
							col: 2,
						},
						jsDoc: 'The id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageDeleteBulkPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 324,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BaseMessageDeletePayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BaseMessageDeletePayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'ids',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 326,
							col: 2,
						},
						jsDoc: 'The ids of the messages',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 329,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 331,
							col: 2,
						},
						jsDoc: 'The message id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 333,
							col: 2,
						},
						jsDoc: 'The channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'BaseMessageReactionPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 336,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 338,
							col: 2,
						},
						jsDoc: 'The id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 340,
							col: 2,
						},
						jsDoc: 'The id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 342,
							col: 2,
						},
						jsDoc: 'The id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageReactionPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 345,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BaseMessageReactionPayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BaseMessageReactionPayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 347,
							col: 2,
						},
						jsDoc: 'The id of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 349,
							col: 2,
						},
						jsDoc:
							'The member who reacted if this happened in a guild. Not available for MESSAGE_REACTION_REMOVE',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 351,
							col: 2,
						},
						jsDoc: 'The emoji used to react',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ReactionPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ReactionPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageReactionUncachedPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 354,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'MessageReactionPayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'MessageReactionPayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 355,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 356,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 357,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageReactionRemoveEmojiPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 360,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'BaseMessageReactionPayload',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'BaseMessageReactionPayload',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 363,
							col: 2,
						},
						jsDoc: 'The emoji that was removed.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ReactionPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ReactionPayload',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'PartialMessage',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 366,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 367,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 368,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MessageSticker',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 371,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 373,
							col: 2,
						},
						jsDoc: 'id of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'pack_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 375,
							col: 2,
						},
						jsDoc: 'id of the pack the sticker is from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 377,
							col: 2,
						},
						jsDoc: 'name of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 379,
							col: 2,
						},
						jsDoc: 'description of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'tags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 381,
							col: 2,
						},
						jsDoc: 'a comma-separated list of tags for the sticker',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'asset',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 383,
							col: 2,
						},
						jsDoc:
							'sticker asset hash. The URL for fetching sticker assets is currently private.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'preview_asset',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 385,
							col: 2,
						},
						jsDoc:
							'sticker preview asset hash. The URL for fetching sticker assets is currently private.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'format_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
							line: 387,
							col: 2,
						},
						jsDoc: 'type of sticker format',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'MessageStickerFormat',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MessageStickerFormat',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'MessageStickerFormat',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 390,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'PNG',
						jsDoc: null,
					},
					{
						name: 'APNG',
						jsDoc: null,
					},
					{
						name: 'LOTTIE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'ChannelType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				imported: 'ChannelType',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'interface',
			name: 'RoleData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 3,
							col: 2,
						},
						jsDoc: 'role id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 5,
							col: 2,
						},
						jsDoc: 'role name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 7,
							col: 2,
						},
						jsDoc: 'integer representation of hexadecimal color code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 9,
							col: 2,
						},
						jsDoc: 'if this role is pinned in the user listing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 11,
							col: 2,
						},
						jsDoc: 'position of this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 13,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 15,
							col: 2,
						},
						jsDoc: 'whether this role is managed by an integration',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 17,
							col: 2,
						},
						jsDoc: 'whether this role is mentionable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'tags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 19,
							col: 2,
						},
						jsDoc:
							'Certain roles may have tags that allow you to determine if this role is related to a bot, an integration, or the booster role.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'RoleTags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'RoleTags',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'RoleTags',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'bot_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'the id of the bot who has this role',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_subscriber',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'whether this is the premium subscriber role for this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'null',
							kind: 'keyword',
							keyword: 'null',
						},
						typeParams: [],
					},
					{
						name: 'integration_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/role.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'the id of the integration this role belongs to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'WebhookPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 6,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'The id of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'The type of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'WebhookType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'WebhookType',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'The guild id this webhook is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'The channel id this webhook is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 16,
							col: 2,
						},
						jsDoc:
							'The user this webhook was created by(not returned when getting a webhook with its token)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'The default name of the webhook',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'The default avatar of the webhook',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 22,
							col: 2,
						},
						jsDoc:
							'The secure token of the webhook(returned for Incoming Webhooks)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'WebhookType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 25,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'INCOMING',
						jsDoc:
							'Incoming Webhooks can post messages to channels with a generated token',
					},
					{
						name: 'CHANNEL_FOLLOWER',
						jsDoc:
							'Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'WebhookCreateOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 32,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'Name of the webhook (1-80 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'Image url for avatar image for the default webhook avatar',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'WebhookEditOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 39,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 41,
							col: 2,
						},
						jsDoc: 'Name of the webhook (1-80 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 43,
							col: 2,
						},
						jsDoc: 'Image url for avatar image for the default webhook avatar',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'channelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 45,
							col: 2,
						},
						jsDoc: 'The new channel id this webhook should be moved to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ExecuteWebhookOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 48,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'wait',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 50,
							col: 2,
						},
						jsDoc:
							'waits for server confirmation of message send before response, and returns the created message body (defaults to false; when false a message that is not saved does not return an error)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'the message contents (up to 2000 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 54,
							col: 2,
						},
						jsDoc: 'override the default username of the webhook',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'override the default avatar of the webhook',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'true if this is a TTS message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'file',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 60,
							col: 2,
						},
						jsDoc:
							'file contents\tthe contents of the file being sent\tone of content, file, embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'blob',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'unknown',
											kind: 'keyword',
											keyword: 'unknown',
										},
										typeParams: [],
									},
									{
										name: 'name',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'array of up to 10 embed objects\tembedded rich content.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 64,
							col: 2,
						},
						jsDoc: 'allowed mentions for the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'parse',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: '',
												kind: 'parenthesized',
												parenthesized: {
													repr: '',
													kind: 'union',
													union: [
														{
															repr: 'roles',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'roles',
															},
														},
														{
															repr: 'users',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'users',
															},
														},
														{
															repr: 'everyone',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'everyone',
															},
														},
													],
												},
											},
										},
										typeParams: [],
									},
									{
										name: 'roles',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
										},
										typeParams: [],
									},
									{
										name: 'users',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'string',
												kind: 'keyword',
												keyword: 'string',
											},
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EditWebhookMessageOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 74,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 75,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 76,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'allowed_mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 77,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'AllowedMentions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'AllowedMentions',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'CreateSlashCommandOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 80,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 82,
							col: 2,
						},
						jsDoc: 'The name of the slash command.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 84,
							col: 2,
						},
						jsDoc: 'The description of the slash command.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 86,
							col: 2,
						},
						jsDoc:
							'If a guildID is provided, this will be a GUILD command. If none is provided it will be a GLOBAL command.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 88,
							col: 2,
						},
						jsDoc: 'The options for this command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommand',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 91,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 93,
							col: 2,
						},
						jsDoc: 'unique id of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'unique id of the parent application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 97,
							col: 2,
						},
						jsDoc: '3-32 character name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 99,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'the parameters for the command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandOption',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 104,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 106,
							col: 2,
						},
						jsDoc: 'The type of option',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'SlashCommandOptionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'SlashCommandOptionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 108,
							col: 2,
						},
						jsDoc: '1-32 character name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 110,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'default',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 112,
							col: 2,
						},
						jsDoc:
							'the first `required` option for the user to complete--only one option can be `default`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'required',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'if the parameter is required or optional--default `false`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'choices',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 119,
							col: 2,
						},
						jsDoc:
							'If you specify `choices` for an option, they are the **only** valid values for a user to pick.\nchoices for `string` and `int` types for the user to pick from',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandOptionChoice',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandOptionChoice',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 121,
							col: 2,
						},
						jsDoc:
							'if the option is a subcommand or subcommand group type, this nested options will be the parameters',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandOptionChoice',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 124,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 126,
							col: 2,
						},
						jsDoc: 'The name of the choice',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 128,
							col: 2,
						},
						jsDoc: 'The value of the choice',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'SlashCommandOptionType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 131,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'SUB_COMMAND',
						jsDoc: null,
					},
					{
						name: 'SUB_COMMAND_GROUP',
						jsDoc: null,
					},
					{
						name: 'STRING',
						jsDoc: null,
					},
					{
						name: 'INTEGER',
						jsDoc: null,
					},
					{
						name: 'BOOLEAN',
						jsDoc: null,
					},
					{
						name: 'USER',
						jsDoc: null,
					},
					{
						name: 'CHANNEL',
						jsDoc: null,
					},
					{
						name: 'ROLE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'Interaction',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 142,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 144,
							col: 2,
						},
						jsDoc: 'The id of the interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 146,
							col: 2,
						},
						jsDoc: 'The type of interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'InteractionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InteractionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 148,
							col: 2,
						},
						jsDoc: 'The command data payload',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'SlashCommandInteractionData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'SlashCommandInteractionData',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 150,
							col: 2,
						},
						jsDoc: 'The id of the guild it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 152,
							col: 2,
						},
						jsDoc: 'The id of the channel it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 154,
							col: 2,
						},
						jsDoc: 'The Payload of the member it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'The token for this interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandInteractionData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 159,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 161,
							col: 2,
						},
						jsDoc: 'The id of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 163,
							col: 2,
						},
						jsDoc: 'The name of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 165,
							col: 2,
						},
						jsDoc: 'the params and values from the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandInteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandInteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandInteractionDataOption',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 168,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 170,
							col: 2,
						},
						jsDoc: 'The name of the parammeter',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'The value of the pair',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'any',
							kind: 'keyword',
							keyword: 'any',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'Present if this option is a group or subcommand',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandInteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandInteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InteractionResponse',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 178,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 180,
							col: 2,
						},
						jsDoc: 'The type of response',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'InteractionResponseType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InteractionResponseType',
							},
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 182,
							col: 2,
						},
						jsDoc: 'The optional response message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'SlashCommandCallbackData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'SlashCommandCallbackData',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandCallbackData',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 185,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'is the response TTS',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 189,
							col: 2,
						},
						jsDoc: 'message content',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 191,
							col: 2,
						},
						jsDoc: 'supports up to 10 embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'allowed_mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 193,
							col: 2,
						},
						jsDoc: 'allowed mentions for the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'AllowedMentions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'AllowedMentions',
							},
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 195,
							col: 2,
						},
						jsDoc:
							'acceptable values are message flags, set to 64 to make your response ephemeral',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'InteractionResponseType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 198,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'PONG',
						jsDoc: 'ACK a `Ping`',
					},
					{
						name: 'ACKNOWLEDGE',
						jsDoc:
							"ACK a command without sending a message, eating the user's input",
					},
					{
						name: 'CHANNEL_MESSAGE',
						jsDoc: "respond with a message, eating the user's input",
					},
					{
						name: 'CHANNEL_MESSAGE_WITH_SOURCE',
						jsDoc: "respond with a message, showing the user's input",
					},
					{
						name: 'ACK_WITH_SOURCE',
						jsDoc:
							"ACK a command without sending a message, showing the user's input",
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'EditSlashCommandOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 213,
				col: 0,
			},
			jsDoc: '@deprecated Use `UpsertSlashCommandOptions` instead',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 215,
							col: 2,
						},
						jsDoc: '3-32 character command name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 217,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 219,
							col: 2,
						},
						jsDoc: 'The parameters for the command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'SlashCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'SlashCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ExecuteSlashCommandOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 222,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 223,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'InteractionResponseType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InteractionResponseType',
							},
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 224,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'SlashCommandCallbackData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'SlashCommandCallbackData',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'SlashCommandResponseOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 227,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'ExecuteSlashCommandOptions',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'ExecuteSlashCommandOptions',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'private',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 230,
							col: 2,
						},
						jsDoc:
							'Whether to make this response visible ONLY to the user who used this command. It will also be deleted after some time.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EditSlashResponseOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 233,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'SlashCommandCallbackData',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'SlashCommandCallbackData',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'messageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 235,
							col: 2,
						},
						jsDoc:
							'If this is not provided, it will default to editing the original response.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'UpsertSlashCommandOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 238,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 240,
							col: 2,
						},
						jsDoc: '1-32 character name matching ^[\\w-]{1,32}$',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 242,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 244,
							col: 2,
						},
						jsDoc: 'The parameters for the command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'SlashCommandOption',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'SlashCommandOption',
										},
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'UpsertSlashCommandsOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 247,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'UpsertSlashCommandOptions',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'UpsertSlashCommandOptions',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
							line: 249,
							col: 2,
						},
						jsDoc: 'The id of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'AllowedMentions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				imported: 'AllowedMentions',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'InteractionType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				imported: 'InteractionType',
			},
		},
		{
			kind: 'import',
			name: 'Embed',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/webhook.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Embed',
			},
		},
		{
			kind: 'enum',
			name: 'Errors',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/errors.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'BOTS_HIGHEST_ROLE_TOO_LOW',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_NOT_FOUND',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_NOT_IN_GUILD',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_NOT_TEXT_BASED',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_MAX_LENGTH',
						jsDoc: null,
					},
					{
						name: 'RULES_CHANNEL_CANNOT_BE_DELETED',
						jsDoc: null,
					},
					{
						name: 'UPDATES_CHANNEL_CANNOT_BE_DELETED',
						jsDoc: null,
					},
					{
						name: 'GUILD_NOT_DISCOVERABLE',
						jsDoc: null,
					},
					{
						name: 'GUILD_NOT_FOUND',
						jsDoc: null,
					},
					{
						name: 'MEMBER_NOT_FOUND',
						jsDoc: null,
					},
					{
						name: 'PRUNE_MAX_DAYS',
						jsDoc: null,
					},
					{
						name: 'ROLE_NOT_FOUND',
						jsDoc: null,
					},
					{
						name: 'DELETE_MESSAGES_MIN',
						jsDoc: null,
					},
					{
						name: 'PRUNE_MIN_DAYS',
						jsDoc: null,
					},
					{
						name: 'INVALID_SLASH_DESCRIPTION',
						jsDoc: null,
					},
					{
						name: 'INVALID_SLASH_NAME',
						jsDoc: null,
					},
					{
						name: 'INVALID_SLASH_OPTIONS',
						jsDoc: null,
					},
					{
						name: 'INVALID_SLASH_OPTIONS_CHOICES',
						jsDoc: null,
					},
					{
						name: 'INVALID_WEBHOOK_NAME',
						jsDoc: null,
					},
					{
						name: 'INVALID_WEBHOOK_OPTIONS',
						jsDoc: null,
					},
					{
						name: 'MISSING_ADD_REACTIONS',
						jsDoc: null,
					},
					{
						name: 'MISSING_ADMINISTRATOR',
						jsDoc: null,
					},
					{
						name: 'MISSING_ATTACH_FILES',
						jsDoc: null,
					},
					{
						name: 'MISSING_BAN_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_CHANGE_NICKNAME',
						jsDoc: null,
					},
					{
						name: 'MISSING_CONNECT',
						jsDoc: null,
					},
					{
						name: 'MISSING_CREATE_INSTANT_INVITE',
						jsDoc: null,
					},
					{
						name: 'MISSING_DEAFEN_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_EMBED_LINKS',
						jsDoc: null,
					},
					{
						name: 'MISSING_INTENT_GUILD_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_KICK_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_CHANNELS',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_EMOJIS',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_GUILD',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_NICKNAMES',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_ROLES',
						jsDoc: null,
					},
					{
						name: 'MISSING_MANAGE_WEBHOOKS',
						jsDoc: null,
					},
					{
						name: 'MISSING_MENTION_EVERYONE',
						jsDoc: null,
					},
					{
						name: 'MISSING_MOVE_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_MUTE_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MISSING_PRIORITY_SPEAKER',
						jsDoc: null,
					},
					{
						name: 'MISSING_READ_MESSAGE_HISTORY',
						jsDoc: null,
					},
					{
						name: 'MISSING_SEND_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'MISSING_SEND_TTS_MESSAGE',
						jsDoc: '@deprecated Use MISSING_SEND_TTS_MESSAGES',
					},
					{
						name: 'MISSING_SEND_TTS_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'MISSING_SPEAK',
						jsDoc: null,
					},
					{
						name: 'MISSING_STREAM',
						jsDoc: null,
					},
					{
						name: 'MISSING_USE_VAD',
						jsDoc: null,
					},
					{
						name: 'MISSING_USE_EXTERNAL_EMOJIS',
						jsDoc: null,
					},
					{
						name: 'MISSING_VIEW_AUDIT_LOG',
						jsDoc: null,
					},
					{
						name: 'MISSING_VIEW_CHANNEL',
						jsDoc: null,
					},
					{
						name: 'MISSING_VIEW_GUILD_INSIGHTS',
						jsDoc: null,
					},
					{
						name: 'NICKNAMES_MAX_LENGTH',
						jsDoc: null,
					},
					{
						name: 'USERNAME_INVALID_CHARACTER',
						jsDoc: null,
					},
					{
						name: 'USERNAME_INVALID_USERNAME',
						jsDoc: null,
					},
					{
						name: 'USERNAME_MAX_LENGTH',
						jsDoc: null,
					},
					{
						name: 'USERNAME_MIN_LENGTH',
						jsDoc: null,
					},
					{
						name: 'RATE_LIMIT_RETRY_MAXED',
						jsDoc: null,
					},
					{
						name: 'REQUEST_CLIENT_ERROR',
						jsDoc: null,
					},
					{
						name: 'REQUEST_SERVER_ERROR',
						jsDoc: null,
					},
					{
						name: 'REQUEST_UNKNOWN_ERROR',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'typeAlias',
			name: 'RequestMethods',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/fetch.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'get',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'get',
							},
						},
						{
							repr: 'post',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'post',
							},
						},
						{
							repr: 'put',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'put',
							},
						},
						{
							repr: 'patch',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'patch',
							},
						},
						{
							repr: 'head',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'head',
							},
						},
						{
							repr: 'delete',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'delete',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'Permission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/permission.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'typeOperator',
					typeOperator: {
						operator: 'keyof',
						tsType: {
							repr: 'Permissions',
							kind: 'typeQuery',
							typeQuery: 'Permissions',
						},
					},
				},
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'Permissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/permission.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'CREATE_INSTANT_INVITE',
						jsDoc: null,
					},
					{
						name: 'KICK_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'BAN_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'ADMINISTRATOR',
						jsDoc: null,
					},
					{
						name: 'MANAGE_CHANNELS',
						jsDoc: null,
					},
					{
						name: 'MANAGE_GUILD',
						jsDoc: null,
					},
					{
						name: 'ADD_REACTIONS',
						jsDoc: null,
					},
					{
						name: 'VIEW_AUDIT_LOG',
						jsDoc: null,
					},
					{
						name: 'VIEW_CHANNEL',
						jsDoc: null,
					},
					{
						name: 'SEND_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'SEND_TTS_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'MANAGE_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'EMBED_LINKS',
						jsDoc: null,
					},
					{
						name: 'ATTACH_FILES',
						jsDoc: null,
					},
					{
						name: 'READ_MESSAGE_HISTORY',
						jsDoc: null,
					},
					{
						name: 'MENTION_EVERYONE',
						jsDoc: null,
					},
					{
						name: 'USE_EXTERNAL_EMOJIS',
						jsDoc: null,
					},
					{
						name: 'CONNECT',
						jsDoc: null,
					},
					{
						name: 'SPEAK',
						jsDoc: null,
					},
					{
						name: 'MUTE_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'DEAFEN_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'MOVE_MEMBERS',
						jsDoc: null,
					},
					{
						name: 'USE_VAD',
						jsDoc: null,
					},
					{
						name: 'PRIORITY_SPEAKER',
						jsDoc: null,
					},
					{
						name: 'STREAM',
						jsDoc: null,
					},
					{
						name: 'CHANGE_NICKNAME',
						jsDoc: null,
					},
					{
						name: 'MANAGE_NICKNAMES',
						jsDoc: null,
					},
					{
						name: 'MANAGE_ROLES',
						jsDoc: null,
					},
					{
						name: 'MANAGE_WEBHOOKS',
						jsDoc: null,
					},
					{
						name: 'MANAGE_EMOJIS',
						jsDoc: null,
					},
					{
						name: 'USE_SLASH_COMMANDS',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#channel-object-channel-types',
			enumDef: {
				members: [
					{
						name: 'GUILD_TEXT',
						jsDoc: 'a text channel within a server',
					},
					{
						name: 'DM',
						jsDoc: 'a direct message between users',
					},
					{
						name: 'GUILD_VOICE',
						jsDoc: 'a voice channel within a server',
					},
					{
						name: 'GROUP_DM',
						jsDoc: 'a direct message between multiple users',
					},
					{
						name: 'GUILD_CATEGORY',
						jsDoc: 'an organizational category that contains up to 50 channels',
					},
					{
						name: 'GUILD_NEWS',
						jsDoc:
							'a channel that users can follow and crosspost into their own server',
					},
					{
						name: 'GUILD_STORE',
						jsDoc:
							'a channel in which game developers can sell their game on Discord',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 22,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#channel-object-channel-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'the id of this channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'the type of channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordChannelTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannelTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permission_overwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'explicit permission overwrites for members and roles',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordOverwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'the name of the channel (2-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'the channel topic (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'whether the channel is nsfw',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'last_message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 40,
							col: 2,
						},
						jsDoc:
							'the id of the last message sent in this channel (may not point to an existing or valid message)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 42,
							col: 2,
						},
						jsDoc: 'the bitrate (in bits) of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 44,
							col: 2,
						},
						jsDoc: 'the user limit of the voice channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rate_limit_per_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 46,
							col: 2,
						},
						jsDoc:
							'amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'recipients',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'the recipients of the DM',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordUser',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordUser',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'icon hash',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'owner_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'id of the DM creator',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 54,
							col: 2,
						},
						jsDoc:
							'application id of the group DM creator if it is bot-created',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'parent_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 56,
							col: 2,
						},
						jsDoc:
							'id of the parent category for a channel (each parent category can contain up to 50 channels)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'last_pin_timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 58,
							col: 2,
						},
						jsDoc:
							'when the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordFollowedChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 62,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#followed-channel-object-followed-channel-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 64,
							col: 2,
						},
						jsDoc: 'source channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 66,
							col: 2,
						},
						jsDoc: 'created target webhook id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyChannelParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 70,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#modify-channel-json-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 72,
							col: 2,
						},
						jsDoc: '2-100 character channel name',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 74,
							col: 2,
						},
						jsDoc:
							'the type of channel; only conversion between text and news is supported and only in guilds with the "NEWS" feature',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordChannelTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannelTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'the position of the channel in the left-hand listing',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 78,
							col: 2,
						},
						jsDoc: '0-1024 character channel topic',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 80,
							col: 2,
						},
						jsDoc: 'whether the channel is nsfw',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'rate_limit_per_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 82,
							col: 2,
						},
						jsDoc:
							'amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `MANAGE_MESSAGES` or `MANAGE_CHANNELS`, are unaffected',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 84,
							col: 2,
						},
						jsDoc:
							'the bitrate (in bits) of the voice channel; 8000 to 96000 (128000 for VIP servers)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'user_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 86,
							col: 2,
						},
						jsDoc:
							'the user limit of the voice channel; 0 refers to no limit, 1 to 99 refers to a user limit',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'permission_overwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 88,
							col: 2,
						},
						jsDoc: 'channel or category-specific permissions',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'DiscordOverwrite',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordOverwrite',
										},
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'parent_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 90,
							col: 2,
						},
						jsDoc: 'id of the new parent category for a channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEditChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 94,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#edit-channel-permissions-json-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'allow',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 96,
							col: 2,
						},
						jsDoc: 'the bitwise value of all allowed permissions',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deny',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 98,
							col: 2,
						},
						jsDoc: 'the bitwise value of all disallowed permissions',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 100,
							col: 2,
						},
						jsDoc: '0 for a role or 1 for a member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordFollowNewsChannelParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 104,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#follow-news-channel-json-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'webhook_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
							line: 106,
							col: 2,
						},
						jsDoc: 'id of target channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-object-integration-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'integration id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'integration name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'integration type (twitch, youtube, or discord)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'is this integration enabled',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'syncing',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'is this integration syncing',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'role_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'id that this integration uses for "subscribers"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enable_emoticons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 18,
							col: 2,
						},
						jsDoc:
							'whether emoticons should be synced for this integration (twitch only currently)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'expire_behavior',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'the behavior of expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordIntegrationExpireBehavior',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationExpireBehavior',
							},
						},
						typeParams: [],
					},
					{
						name: 'expire_grace_period',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'the grace period (in days) before expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'user for this integration',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'account',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'integration account information',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordIntegrationAccount',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationAccount',
							},
						},
						typeParams: [],
					},
					{
						name: 'synced_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'when this integration was last synced',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'subscriber_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'how many subscribers this integration has',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'revoked',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'has this integration been revoked',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'the bot/OAuth2 application for discord integrations',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordIntegrationApplication',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationApplication',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordIntegrationExpireBehavior',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 38,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors',
			enumDef: {
				members: [
					{
						name: 'REMOVE_ROLE',
						jsDoc: null,
					},
					{
						name: 'KICK',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationAccount',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 44,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-account-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 46,
							col: 2,
						},
						jsDoc: 'id of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'name of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 52,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-application-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 54,
							col: 2,
						},
						jsDoc: 'the id of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'the name of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'the icon hash of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 60,
							col: 2,
						},
						jsDoc: 'the description of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'summary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'the summary of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cover_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 64,
							col: 2,
						},
						jsDoc:
							'If this application is a game sold on Discord, this field will be the hash of the image on store embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 66,
							col: 2,
						},
						jsDoc: 'the bot associated with this application',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 70,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-object-integration-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 72,
							col: 2,
						},
						jsDoc: 'integration id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'integration name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'integration type (twitch, youtube, or discord)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 78,
							col: 2,
						},
						jsDoc: 'is this integration enabled',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'syncing',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 80,
							col: 2,
						},
						jsDoc: 'is this integration syncing',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'role_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 82,
							col: 2,
						},
						jsDoc: 'id that this integration uses for "subscribers"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'enable_emoticons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 84,
							col: 2,
						},
						jsDoc:
							'whether emoticons should be synced for this integration (twitch only currently)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'expire_behavior',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 86,
							col: 2,
						},
						jsDoc: 'the behavior of expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordIntegrationExpireBehavior',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationExpireBehavior',
							},
						},
						typeParams: [],
					},
					{
						name: 'expire_grace_period',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 88,
							col: 2,
						},
						jsDoc: 'the grace period (in days) before expiring subscribers',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 90,
							col: 2,
						},
						jsDoc: 'user for this integration',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'account',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 92,
							col: 2,
						},
						jsDoc: 'integration account information',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordIntegrationAccount',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationAccount',
							},
						},
						typeParams: [],
					},
					{
						name: 'synced_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'when this integration was last synced',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'subscriber_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 96,
							col: 2,
						},
						jsDoc: 'how many subscribers this integration has',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'revoked',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 98,
							col: 2,
						},
						jsDoc: 'has this integration been revoked',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 100,
							col: 2,
						},
						jsDoc: 'the bot/OAuth2 application for discord integrations',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordIntegrationApplication',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationApplication',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationAccount',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 104,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-account-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 106,
							col: 2,
						},
						jsDoc: 'id of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 108,
							col: 2,
						},
						jsDoc: 'name of the account',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 112,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#integration-application-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'the id of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 116,
							col: 2,
						},
						jsDoc: 'the name of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 118,
							col: 2,
						},
						jsDoc: 'the icon hash of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 120,
							col: 2,
						},
						jsDoc: 'the description of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'summary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 122,
							col: 2,
						},
						jsDoc: 'the summary of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cover_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 124,
							col: 2,
						},
						jsDoc:
							'If this application is a game sold on Discord, this field will be the hash of the image on store embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 126,
							col: 2,
						},
						jsDoc: 'the bot associated with this application',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildIntegrationParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 130,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#create-guild-integration',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 132,
							col: 2,
						},
						jsDoc: 'the integration type',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 134,
							col: 2,
						},
						jsDoc: 'the integration id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 138,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-integration',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'expire_behavior',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 140,
							col: 2,
						},
						jsDoc:
							'the behavior when an integration subscription lapses (see the integration expire behaviors documentation)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'expire_grace_period',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 142,
							col: 2,
						},
						jsDoc:
							'perios (in days) where the integration will ignore lapsed subscriptions',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'enable_emoticons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
							line: 144,
							col: 2,
						},
						jsDoc:
							'whether emoticons should be synced for this integration (twitch only currently)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/integration.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAuditLogPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 10,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'webhooks',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'list of webhooks found in the audit log',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordWebhook',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordWebhook',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'list of users found in the audit log',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordUser',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordUser',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'audit_log_entries',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'list of audit log entries',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordAuditLogEntry',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordAuditLogEntry',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'integrations',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'list of partial integration objects',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Partial',
								kind: 'typeRef',
								typeRef: {
									typeParams: [
										{
											repr: 'DiscordIntegration',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordIntegration',
											},
										},
									],
									typeName: 'Partial',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAuditLogEntry',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 22,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-entry-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'target_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'id of the affected entity (webhook, user, role, etc.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'changes',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'changes made to the target_id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordAuditLogChange',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordAuditLogChange',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'the user who made the changes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'id of the entry',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'action_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'type of action that occured',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordAuditLogEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAuditLogEvent',
							},
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'additional info for certain action types',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordOptionalAuditEntryInfoParam',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordOptionalAuditEntryInfoParam',
							},
						},
						typeParams: [],
					},
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'the reason for the change (0-512 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordAuditLogEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 40,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events',
			enumDef: {
				members: [
					{
						name: 'GUILD_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_CREATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_DELETE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_CREATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_OVERWRITE_DELETE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_KICK',
						jsDoc: null,
					},
					{
						name: 'MEMBER_PRUNE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_BAN_ADD',
						jsDoc: null,
					},
					{
						name: 'MEMBER_BAN_REMOVE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_UPDATE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_ROLE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_MOVE',
						jsDoc: null,
					},
					{
						name: 'MEMBER_DISCONNECT',
						jsDoc: null,
					},
					{
						name: 'BOT_ADD',
						jsDoc: null,
					},
					{
						name: 'ROLE_CREATE',
						jsDoc: null,
					},
					{
						name: 'ROLE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'ROLE_DELETE',
						jsDoc: null,
					},
					{
						name: 'INVITE_CREATE',
						jsDoc: null,
					},
					{
						name: 'INVITE_UPDATE',
						jsDoc: null,
					},
					{
						name: 'INVITE_DELETE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_CREATE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_UPDATE',
						jsDoc: null,
					},
					{
						name: 'WEBHOOK_DELETE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_CREATE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_UPDATE',
						jsDoc: null,
					},
					{
						name: 'EMOJI_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_BULK_DELETE',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_PIN',
						jsDoc: null,
					},
					{
						name: 'MESSAGE_UNPIN',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_CREATE',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_UPDATE',
						jsDoc: null,
					},
					{
						name: 'INTEGRATION_DELETE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordOptionalAuditEntryInfoParam',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 79,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'delete_member_days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 81,
							col: 2,
						},
						jsDoc:
							'number of days after which inactive members were kicked, type: MEMBER_PRUNE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members_removed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 83,
							col: 2,
						},
						jsDoc: 'number of members removed by the prune, type: MEMBER_PRUNE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 85,
							col: 2,
						},
						jsDoc:
							'channel in which the entities were targeted, types: MEMBER_MOVE & MESSAGE_PIN & MESSAGE_UNPIN & MESSAGE_DELETE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 87,
							col: 2,
						},
						jsDoc:
							'id of the message that was targeted, types: MESSAGE_PIN & MESSAGE_UNPIN',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 89,
							col: 2,
						},
						jsDoc:
							'number of entities that were targeted, types: MESSAGE_DELETE & MESSAGE_BULK_DELETE & MEMBER_DISCONNECT & MEMBER_MOVE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 91,
							col: 2,
						},
						jsDoc:
							'id of the overwritten entity, types CHANNEL_OVERWRITE_CREATE & CHANNEL_OVERWRITE_UPDATE & CHANNEL_OVERWRITE_DELETE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 93,
							col: 2,
						},
						jsDoc:
							'type of overwritten entity - "0", for "role", or "1" for "member", types: CHANNEL_OVERWRITE_CREATE & CHANNEL_OVERWRITE_UPDATE & CHANNEL_OVERWRITE_DELETE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role_name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 95,
							col: 2,
						},
						jsDoc:
							'name of the role if type is "0" (not present if type is "1"), types: CHANNEL_OVERWRITE_CREATE & CHANNEL_OVERWRITE_UPDATE & CHANNEL_OVERWRITE_DELETE',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAuditLogChange',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 99,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-change-object-audit-log-change-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'new_value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 101,
							col: 2,
						},
						jsDoc:
							'new value of the key. If not present, while old_value is, that means the property that was changed has been reset',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordAuditLogChangeValue',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAuditLogChangeValue',
							},
						},
						typeParams: [],
					},
					{
						name: 'old_value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'old value of the key',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordAuditLogChangeValue',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAuditLogChangeValue',
							},
						},
						typeParams: [],
					},
					{
						name: 'key',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'name of audit log change key',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordAuditLogChangeValue',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 109,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#audit-log-change-object-audit-log-change-structure',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'name',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'name',
													},
												},
												{
													repr: 'description',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'description',
													},
												},
												{
													repr: 'discovery_splash_hash',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'discovery_splash_hash',
													},
												},
												{
													repr: 'banner_hash',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'banner_hash',
													},
												},
												{
													repr: 'preferred_locale',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'preferred_locale',
													},
												},
												{
													repr: 'rules_channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'rules_channel_id',
													},
												},
												{
													repr: 'public_updates_channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'public_updates_channel_id',
													},
												},
												{
													repr: 'icon_hash',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'icon_hash',
													},
												},
												{
													repr: 'splash_hash',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'splash_hash',
													},
												},
												{
													repr: 'owner_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'owner_id',
													},
												},
												{
													repr: 'region',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'region',
													},
												},
												{
													repr: 'afk_channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'afk_channel_id',
													},
												},
												{
													repr: 'vanity_url_code',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'vanity_url_code',
													},
												},
												{
													repr: 'widget_channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'widget_channel_id',
													},
												},
												{
													repr: 'system_channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'system_channel_id',
													},
												},
												{
													repr: 'topic',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'topic',
													},
												},
												{
													repr: 'application_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'application_id',
													},
												},
												{
													repr: 'permissions',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'permissions',
													},
												},
												{
													repr: 'allow',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'allow',
													},
												},
												{
													repr: 'deny',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'deny',
													},
												},
												{
													repr: 'code',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'code',
													},
												},
												{
													repr: 'channel_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'channel_id',
													},
												},
												{
													repr: 'inviter_id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'inviter_id',
													},
												},
												{
													repr: 'nick',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'nick',
													},
												},
												{
													repr: 'avatar_hash',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'avatar_hash',
													},
												},
												{
													repr: 'id',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'id',
													},
												},
											],
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'afk_timeout',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'afk_timeout',
													},
												},
												{
													repr: 'mfa_level',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'mfa_level',
													},
												},
												{
													repr: 'verification_level',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'verification_level',
													},
												},
												{
													repr: 'explicit_content_filter',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'explicit_content_filter',
													},
												},
												{
													repr: 'default_messagae_notifications',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'default_messagae_notifications',
													},
												},
												{
													repr: 'prune_delete_days',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'prune_delete_days',
													},
												},
												{
													repr: 'position',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'position',
													},
												},
												{
													repr: 'bitrate',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'bitrate',
													},
												},
												{
													repr: 'rate_limit_per_user',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'rate_limit_per_user',
													},
												},
												{
													repr: 'color',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'color',
													},
												},
												{
													repr: 'max_uses',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'max_uses',
													},
												},
												{
													repr: 'uses',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'uses',
													},
												},
												{
													repr: 'max_age',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'max_age',
													},
												},
												{
													repr: 'expire_behavior',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'expire_behavior',
													},
												},
												{
													repr: 'expire_grace_period',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'expire_grace_period',
													},
												},
												{
													repr: 'user_limit',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'user_limit',
													},
												},
											],
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'Partial',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'DiscordRole',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'DiscordRole',
														},
													},
												],
												typeName: 'Partial',
											},
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'Partial',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'DiscordRole',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'DiscordRole',
														},
													},
												],
												typeName: 'Partial',
											},
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: '$add',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: '$add',
													},
												},
												{
													repr: '$remove',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: '$remove',
													},
												},
											],
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'boolean',
											kind: 'keyword',
											keyword: 'boolean',
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'boolean',
											kind: 'keyword',
											keyword: 'boolean',
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'widget_enabled',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'widget_enabled',
													},
												},
												{
													repr: 'nsfw',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'nsfw',
													},
												},
												{
													repr: 'hoist',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'hoist',
													},
												},
												{
													repr: 'mentionable',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'mentionable',
													},
												},
												{
													repr: 'temporary',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'temporary',
													},
												},
												{
													repr: 'deaf',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'deaf',
													},
												},
												{
													repr: 'mute',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'mute',
													},
												},
												{
													repr: 'enable_emoticons',
													kind: 'literal',
													literal: {
														kind: 'string',
														string: 'enable_emoticons',
													},
												},
											],
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'DiscordOverwrite',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'DiscordOverwrite',
												},
											},
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'DiscordOverwrite',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'DiscordOverwrite',
												},
											},
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'permission_overwrites',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'permission_overwrites',
											},
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'new_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'string',
													kind: 'keyword',
													keyword: 'string',
												},
												{
													repr: 'number',
													kind: 'keyword',
													keyword: 'number',
												},
											],
										},
										typeParams: [],
									},
									{
										name: 'old_value',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: '',
											kind: 'union',
											union: [
												{
													repr: 'string',
													kind: 'keyword',
													keyword: 'string',
												},
												{
													repr: 'number',
													kind: 'keyword',
													keyword: 'number',
												},
											],
										},
										typeParams: [],
									},
									{
										name: 'key',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'type',
											kind: 'literal',
											literal: {
												kind: 'string',
												string: 'type',
											},
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetGuildAuditLogParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 192,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log-query-string-parameters',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 194,
							col: 2,
						},
						jsDoc: 'filter the log for actions made by a user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'action_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'the type of audit log event',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordAuditLogEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAuditLogEvent',
							},
						},
						typeParams: [],
					},
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'filter the log before a certain entry id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 200,
							col: 2,
						},
						jsDoc:
							'how many entries are returned (default 50, minimum 1, maximum 100)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetAuditLogsOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 203,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 205,
							col: 2,
						},
						jsDoc: 'Filter the logs for actions made by this user.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'action_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 207,
							col: 2,
						},
						jsDoc: 'The type of audit log.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordAuditLogEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAuditLogEvent',
							},
						},
						typeParams: [],
					},
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 209,
							col: 2,
						},
						jsDoc: 'Filter the logs before a certain log entry.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
							line: 211,
							col: 2,
						},
						jsDoc: 'How many entries are returned. Between 1-100. Default 50.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordIntegration',
			},
		},
		{
			kind: 'import',
			name: 'DiscordOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'DiscordRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordRole',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'import',
			name: 'DiscordWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/auditlog.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordWebhook',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInvite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/invite#invite-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'the invite code (unique ID)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the guild this invite is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordGuild',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordGuild',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'channel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the channel this invite is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordChannel',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordChannel',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'inviter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the user who created the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'the target user for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordUser',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordUser',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'the type of user target for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordInviteTargetUserTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInviteTargetUserTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'approximate_presence_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 18,
							col: 2,
						},
						jsDoc:
							'approximate count of online members (only present when target_user is set)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'approximate count of total members',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordInviteTargetUserTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 24,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/invite#invite-resource',
			enumDef: {
				members: [
					{
						name: 'STREAM',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInviteMetadata',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 29,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/invite#invite-resource',
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordInvite',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordInvite',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'number of times this invite has been used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 33,
							col: 2,
						},
						jsDoc: 'max number of times this invite can be used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_age',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 35,
							col: 2,
						},
						jsDoc: 'duration (in seconds) after which the invite expires',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'temporary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 37,
							col: 2,
						},
						jsDoc: 'whether this invite only grants temporary membership',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 39,
							col: 2,
						},
						jsDoc: 'when this invite was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetInviteURLParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 43,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/invite#get-invite',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'with_counts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
							line: 45,
							col: 2,
						},
						jsDoc:
							'whether the invite should contain approximate member counts',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannel',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuild',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/invite.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 14,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/guild#guild-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 18,
							col: 2,
						},
						jsDoc:
							'guild name (2-100 characaters, excluding trailing and leading whitespace)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'icon hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'icon_hash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'icon hash, returned when in the template object',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'splash hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'discovery_splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 26,
							col: 2,
						},
						jsDoc:
							'discovery splash hash; only present for guilds with the "DISCOVERABLE" feature',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'owner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'true if the user is the owner of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'owner_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'id of the owner',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 32,
							col: 2,
						},
						jsDoc:
							'total permissions for the user in the guild (execludes overrides)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'voice region id for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'id of afk channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'afk timeout in seconds',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'widget_enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 40,
							col: 2,
						},
						jsDoc: 'true if the server widget is enabled',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'widget_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 42,
							col: 2,
						},
						jsDoc:
							'the channel id that the widget will generate an invite to, or null if set to no invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 44,
							col: 2,
						},
						jsDoc: 'verification level required for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordVerificationLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordVerificationLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 46,
							col: 2,
						},
						jsDoc: 'default message notifications level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordDefaultMessageNotificationLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordDefaultMessageNotificationLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'explicit content filter level',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordExplicitContentFilterLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordExplicitContentFilterLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'roles in the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordRole',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordRole',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'custom guild emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordEmoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordEmoji',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'features',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 54,
							col: 2,
						},
						jsDoc: 'enabled guild features',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordGuildFeatures',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordGuildFeatures',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mfa_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'required MFA level for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMFALevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMFALevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'application id of the guild creator if it is bot-created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 60,
							col: 2,
						},
						jsDoc:
							'the id of the channel where guild notices such as welcome messages and boost events are posted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'system_channel_flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'system channel flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordSystemChannelFlags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordSystemChannelFlags',
							},
						},
						typeParams: [],
					},
					{
						name: 'rules_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 64,
							col: 2,
						},
						jsDoc:
							'the id of the channel where community guilds can display rules and/or guidelines',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'joined_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 66,
							col: 2,
						},
						jsDoc: 'when this guild was joined at',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'large',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 68,
							col: 2,
						},
						jsDoc: 'true if this is considered a large guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'unavailable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 70,
							col: 2,
						},
						jsDoc: 'true if this guild is unavailable due to an outage',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 72,
							col: 2,
						},
						jsDoc: 'total number of members in this guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'voice_states',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 74,
							col: 2,
						},
						jsDoc:
							'states of members currently in voice channels; lacks the guild_id key',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Partial',
								kind: 'typeRef',
								typeRef: {
									typeParams: [
										{
											repr: 'DiscordVoiceStateUpdateEvent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordVoiceStateUpdateEvent',
											},
										},
									],
									typeName: 'Partial',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'users in the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordMember',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordMember',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 78,
							col: 2,
						},
						jsDoc: 'channels in the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordChannel',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordChannel',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 80,
							col: 2,
						},
						jsDoc:
							'presences of the members in the guild, will only include non-offline members if the size is greater than large threshold',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Partial',
								kind: 'typeRef',
								typeRef: {
									typeParams: [
										{
											repr: 'DiscordPresenceUpdateEvent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordPresenceUpdateEvent',
											},
										},
									],
									typeName: 'Partial',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'max_presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 82,
							col: 2,
						},
						jsDoc:
							'the maximum number of presences for the guild (the default value, currently 25000, is in effect when null is returned)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'max_members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 84,
							col: 2,
						},
						jsDoc: 'the maximum number of members for the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'vanity_url_code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 86,
							col: 2,
						},
						jsDoc: 'the vaniy url code for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 88,
							col: 2,
						},
						jsDoc:
							'the description for the guild, if the guild is discoverable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 90,
							col: 2,
						},
						jsDoc: 'banner hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'premium_tier',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 92,
							col: 2,
						},
						jsDoc: 'premium tier (Server Boost level)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordPremiumTier',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPremiumTier',
							},
						},
						typeParams: [],
					},
					{
						name: 'premium_subscription_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'the number of boosts this guild currently has',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'preferred_locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 96,
							col: 2,
						},
						jsDoc:
							'the preferred locale of a Community guild; used in server discovery and notices from Discord; defaults to "en-US"',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'public_updates_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 98,
							col: 2,
						},
						jsDoc:
							'the id of the channel where admins and moderators of Community guilds receive notices from Discord',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'max_video_channel_users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 100,
							col: 2,
						},
						jsDoc: 'the maximum amount of users in a video channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 102,
							col: 2,
						},
						jsDoc:
							'approximate number of members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_presence_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 104,
							col: 2,
						},
						jsDoc:
							'approximate number of non-offline members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordDefaultMessageNotificationLevel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 108,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level',
			enumDef: {
				members: [
					{
						name: 'ALL_MESSAGES',
						jsDoc: null,
					},
					{
						name: 'ONLY_MENTIONS',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordExplicitContentFilterLevel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 114,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level',
			enumDef: {
				members: [
					{
						name: 'DISABLED',
						jsDoc: null,
					},
					{
						name: 'MEMBERS_WITHOUT_ROLES',
						jsDoc: null,
					},
					{
						name: 'ALL_MEMBERS',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMFALevel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 121,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-mfa-level',
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'ELEVATED',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordVerificationLevel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 127,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-verification-level',
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'LOW',
						jsDoc: null,
					},
					{
						name: 'MEDIUM',
						jsDoc: null,
					},
					{
						name: 'HIGH',
						jsDoc: null,
					},
					{
						name: 'VERY_HIGH',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordPremiumTier',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 136,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-premium-tier',
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'TIER_1',
						jsDoc: null,
					},
					{
						name: 'TIER_2',
						jsDoc: null,
					},
					{
						name: 'TIER_3',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordSystemChannelFlags',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 144,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags',
			enumDef: {
				members: [
					{
						name: 'SUPPRESS_JOIN_NOTIFICATIONS',
						jsDoc: null,
					},
					{
						name: 'SUPPRESS_PREMIUM_SUBSCRIPTIONS',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordGuildFeatures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 150,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-object-guild-features',
			enumDef: {
				members: [
					{
						name: 'INVITE_SPLASH',
						jsDoc: null,
					},
					{
						name: 'VIP_REGIONS',
						jsDoc: null,
					},
					{
						name: 'VANITY_URL',
						jsDoc: null,
					},
					{
						name: 'VERIFIED',
						jsDoc: null,
					},
					{
						name: 'PARTNERED',
						jsDoc: null,
					},
					{
						name: 'COMMUNITY',
						jsDoc: null,
					},
					{
						name: 'COMMERCE',
						jsDoc: null,
					},
					{
						name: 'NEWS',
						jsDoc: null,
					},
					{
						name: 'DISCOVERABLE',
						jsDoc: null,
					},
					{
						name: 'FEATURABLE',
						jsDoc: null,
					},
					{
						name: 'ANIMATED_ICON',
						jsDoc: null,
					},
					{
						name: 'BANNER',
						jsDoc: null,
					},
					{
						name: 'WELCOME_SCREEN_ENABLED',
						jsDoc: null,
					},
					{
						name: 'MEMBER_VERIFICATION_GATE_ENABLED',
						jsDoc: null,
					},
					{
						name: 'PREVIEW_ENABLED',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordUnavailableGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 169,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#unavailable-guild-object',
			typeAliasDef: {
				tsType: {
					repr: 'Pick',
					kind: 'typeRef',
					typeRef: {
						typeParams: [
							{
								repr: 'DiscordGuild',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordGuild',
								},
							},
							{
								repr: '',
								kind: 'union',
								union: [
									{
										repr: 'id',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'id',
										},
									},
									{
										repr: 'unavailable',
										kind: 'literal',
										literal: {
											kind: 'string',
											string: 'unavailable',
										},
									},
								],
							},
						],
						typeName: 'Pick',
					},
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildPreview',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 172,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-preview-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 174,
							col: 2,
						},
						jsDoc: 'guild id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 176,
							col: 2,
						},
						jsDoc: 'guild name (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 178,
							col: 2,
						},
						jsDoc: 'icon hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 180,
							col: 2,
						},
						jsDoc: 'splash hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'discovery_splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 182,
							col: 2,
						},
						jsDoc: 'discovery splash hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 184,
							col: 2,
						},
						jsDoc: 'custom guild emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordEmoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordEmoji',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'features',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 186,
							col: 2,
						},
						jsDoc: 'enabled guild features',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordGuildFeatures',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordGuildFeatures',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'approximate_member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 188,
							col: 2,
						},
						jsDoc: 'approximate number of members in this guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_presence_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 190,
							col: 2,
						},
						jsDoc: 'approximate number of online members in this guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 192,
							col: 2,
						},
						jsDoc: 'the description for the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildWidget',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 196,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-widget-object-guild-widget-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'whether the widget is enabled',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 200,
							col: 2,
						},
						jsDoc: 'the widget channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBan',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 204,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/guild#ban-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 206,
							col: 2,
						},
						jsDoc: 'the reason for the ban',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 208,
							col: 2,
						},
						jsDoc: 'the banned user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMembershipScreening',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 211,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'version',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 213,
							col: 2,
						},
						jsDoc: 'when the fields were last updated',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'form_fields',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 215,
							col: 2,
						},
						jsDoc: 'the steps in the screening form',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordMembershipScreeningField',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordMembershipScreeningField',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 217,
							col: 2,
						},
						jsDoc: 'the server description shown in the screening form',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMembershipScreeningField',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 220,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'field_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 222,
							col: 2,
						},
						jsDoc: 'the type of field (currently "TERMS" is the only type)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMembershipScreeningFieldTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMembershipScreeningFieldTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'label',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 224,
							col: 2,
						},
						jsDoc: 'the title of the field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'values',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 226,
							col: 2,
						},
						jsDoc: 'the list of rules',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'required',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 228,
							col: 2,
						},
						jsDoc: 'whether the user has to fill out this field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMembershipScreeningFieldTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 231,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'TERMS',
						jsDoc: 'Server Rules',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 237,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/guild#create-guild',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 239,
							col: 2,
						},
						jsDoc: 'name of the guild (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 241,
							col: 2,
						},
						jsDoc: 'voice region id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 243,
							col: 2,
						},
						jsDoc: 'base64 128x128 image for the guild icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 245,
							col: 2,
						},
						jsDoc: 'verification level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordVerificationLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordVerificationLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 247,
							col: 2,
						},
						jsDoc: 'default message notification level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordDefaultMessageNotificationLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordDefaultMessageNotificationLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 249,
							col: 2,
						},
						jsDoc: 'explicit content filter level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordExplicitContentFilterLevel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordExplicitContentFilterLevel',
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 251,
							col: 2,
						},
						jsDoc: 'new guild roles (first role is the everyone role)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordRole',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordRole',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 253,
							col: 2,
						},
						jsDoc: "new guild's channels",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Partial',
								kind: 'typeRef',
								typeRef: {
									typeParams: [
										{
											repr: 'DiscordChannel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordChannel',
											},
										},
									],
									typeName: 'Partial',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 255,
							col: 2,
						},
						jsDoc: 'id for afk channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 257,
							col: 2,
						},
						jsDoc: 'afk timeout in seconds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 259,
							col: 2,
						},
						jsDoc:
							'the id of the channel where guild notices such as welcome messages and boost events are posted',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetGuildParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 263,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/guild#get-guild',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'with_counts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 265,
							col: 2,
						},
						jsDoc:
							'when true, will return approximate member and presence counts for the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 269,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/resources/guild#modify-guild',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 271,
							col: 2,
						},
						jsDoc: 'guild name',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'region',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 273,
							col: 2,
						},
						jsDoc: 'guild voice region id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'verification_level',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 275,
							col: 2,
						},
						jsDoc: 'verification level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordVerificationLevel',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordVerificationLevel',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'default_message_notifications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 277,
							col: 2,
						},
						jsDoc: 'default message notification filter level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordDefaultMessageNotificationLevel',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordDefaultMessageNotificationLevel',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'explicit_content_filter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 279,
							col: 2,
						},
						jsDoc: 'explicit content filter level',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordExplicitContentFilterLevel',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordExplicitContentFilterLevel',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'afk_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 281,
							col: 2,
						},
						jsDoc: 'id for afk channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'afk_timeout',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 283,
							col: 2,
						},
						jsDoc: 'afk timeout in seconds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 285,
							col: 2,
						},
						jsDoc:
							'base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has ANIMATED_ICON feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'owner_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 287,
							col: 2,
						},
						jsDoc: 'user id to transfer guild ownershop to (must be owner)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'splash',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 289,
							col: 2,
						},
						jsDoc:
							'base64 16:9 png/jpeg image for the guild splash (when the server has INVITE_SPLASH feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'banner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 291,
							col: 2,
						},
						jsDoc:
							'base64 16:9 png/jpeg image for the guild banner (when the server has BANNER feature)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'system_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 293,
							col: 2,
						},
						jsDoc:
							'the id of the channel where guild notices such as welcome messages and boost events are posted',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'rules_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 295,
							col: 2,
						},
						jsDoc:
							'the id of the channel where Community guilds display rules and/or guidelines',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'public_updates_channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 297,
							col: 2,
						},
						jsDoc:
							'the id of the channel where admins and moderators of Community guilds receive notices from Discord',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'preferred_locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 299,
							col: 2,
						},
						jsDoc:
							'the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to "en-US"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildChannelParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 303,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#create-guild-channel',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 305,
							col: 2,
						},
						jsDoc: 'channel name (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 307,
							col: 2,
						},
						jsDoc: 'the type of channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordChannelTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannelTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'topic',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 309,
							col: 2,
						},
						jsDoc: 'channel topic (0-1024 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'bitrate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 311,
							col: 2,
						},
						jsDoc: 'the bitrate (in bits) of the voice channel (voice only)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 313,
							col: 2,
						},
						jsDoc: 'the user limit of the voice channel (voice only)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'rate_limit_per_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 315,
							col: 2,
						},
						jsDoc:
							'amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 317,
							col: 2,
						},
						jsDoc: 'sorting position of the channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permission_overwrites',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 319,
							col: 2,
						},
						jsDoc: "the channel's permission overwrites",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordOverwrite',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'parent_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 321,
							col: 2,
						},
						jsDoc: 'id of the parent category for a channel',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nsfw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 323,
							col: 2,
						},
						jsDoc: 'whether the channel is nsfw',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildChannelPositionsParam',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 327,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 329,
							col: 2,
						},
						jsDoc: 'channel id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 331,
							col: 2,
						},
						jsDoc: 'sorting position of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordListGuildMembersParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 335,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#list-guild-members',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 337,
							col: 2,
						},
						jsDoc: 'max number of members to return (1-1000), default 1',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 339,
							col: 2,
						},
						jsDoc: 'the highest user id in the previous page, default 0',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAddGuildMemberParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 343,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#add-guild-member',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'access_token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 345,
							col: 2,
						},
						jsDoc:
							"an oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 347,
							col: 2,
						},
						jsDoc:
							'value to set users nickname to. Requires the MANAGE_NICKNAMES permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 349,
							col: 2,
						},
						jsDoc:
							'array of role ids the member is assigned. Requires the MANAGE_ROLES permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 351,
							col: 2,
						},
						jsDoc:
							'whether the user is muted in voice channels. Requires the MUTE_MEMBERS permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 353,
							col: 2,
						},
						jsDoc:
							'whether the user is deafened in voice channels. Requires the DEAFEN_MEMBERS permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildMemberParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 357,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-member',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 359,
							col: 2,
						},
						jsDoc:
							'value to set users nickname to. Requires the MANAGE_NICKNAMES permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 361,
							col: 2,
						},
						jsDoc:
							'array of role ids the member is assigned. Requires the MANAGE_ROLES permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 363,
							col: 2,
						},
						jsDoc:
							'whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel. Requires the MUTE_MEMBERS permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 365,
							col: 2,
						},
						jsDoc:
							'whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel. Requires the MOVE_MEMBERS permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 367,
							col: 2,
						},
						jsDoc:
							'id of channel to move user to (if they are connected to voice). Requires the MOVE_MEMBERS permission',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyCurrentUserNickParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 371,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-current-user-nick',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 373,
							col: 2,
						},
						jsDoc:
							'value to set users nickname to. Requires the CHANGE_NICKNAME permission',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildBan',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 377,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#create-guild-ban',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'delete_message_days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 379,
							col: 2,
						},
						jsDoc: 'number of days to delete messages for (0-7)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'reason',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 381,
							col: 2,
						},
						jsDoc: 'reason for the ban',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildRoleParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 385,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#create-guild-role',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 387,
							col: 2,
						},
						jsDoc: 'name of the role, default: "new role"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 389,
							col: 2,
						},
						jsDoc:
							'bitwise value of the enabled/disabled permissions, default: everyone permissions in guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 391,
							col: 2,
						},
						jsDoc: 'RGB color value, default: 0',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 393,
							col: 2,
						},
						jsDoc:
							'whether the role should be displayed separately in the sidebar, default: false',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 395,
							col: 2,
						},
						jsDoc: 'whether the role should be mentionable, default: false',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildRolePositionsParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 399,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-role-positions',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 401,
							col: 2,
						},
						jsDoc: 'role id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 403,
							col: 2,
						},
						jsDoc: 'sorting position of the role',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildRoleParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 407,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-role',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 409,
							col: 2,
						},
						jsDoc: 'name of the role',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 411,
							col: 2,
						},
						jsDoc: 'bitwise value of the enabled/disabled permissions',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 413,
							col: 2,
						},
						jsDoc: 'RGB color value',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 415,
							col: 2,
						},
						jsDoc:
							'whether the role should be displayed seperately in the sidebar',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 417,
							col: 2,
						},
						jsDoc: 'whether the role should be mentionable',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetGuildPruneCountParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 421,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#get-guild-prune-count',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 423,
							col: 2,
						},
						jsDoc: 'number of days to count prune for (1 or more), default: 7',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'include_roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 425,
							col: 2,
						},
						jsDoc: 'role(s) to include, default: none',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBeginGuildPruneParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 429,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#begin-guild-prune',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'days',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 431,
							col: 2,
						},
						jsDoc: 'number of days to prune (1 or more), default: 7',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'compute_prune_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 433,
							col: 2,
						},
						jsDoc:
							"whether 'pruned' is returned, discouraged for large guilds, default: true",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'include_roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 435,
							col: 2,
						},
						jsDoc: 'role(s) ro include, default: none',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetGuildWidgetImageParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 439,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-integration',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'style',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 441,
							col: 2,
						},
						jsDoc: 'style of the widget returned, default: shield',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordGetGuildWidgetImageStyleOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGetGuildWidgetImageStyleOptions',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordGetGuildWidgetImageStyleOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 445,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#modify-guild-integration',
			enumDef: {
				members: [
					{
						name: 'SHIELD',
						jsDoc:
							'shield style widget with Discord icon and guild members online count',
					},
					{
						name: 'BANNER_1',
						jsDoc:
							'large image with guild icon, name and online count. "POWERED BY DISCORD" as the footer of the widget',
					},
					{
						name: 'BANNER_2',
						jsDoc:
							'smaller widget style with guild icon, name and online count. Split on the right with Discord logo',
					},
					{
						name: 'BANNER_3',
						jsDoc:
							'large image with guild icon, name and online count. In the footer, Discord logo on the left and "Chat Now" on the right',
					},
					{
						name: 'BANNER_4',
						jsDoc:
							'large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget and a "JOIN MY SERVER" button at the bottom',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildMembershipScreeningFormParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 458,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 460,
							col: 2,
						},
						jsDoc: 'whether Membership Screening is enabled',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'form_fields',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 462,
							col: 2,
						},
						jsDoc: 'arrray of field objects serialized in a string',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
							line: 464,
							col: 2,
						},
						jsDoc: 'the server description to show in the screening form',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannel',
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'DiscordEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordEmoji',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPresenceUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordPresenceUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordRole',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'import',
			name: 'DiscordVoiceStateUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/guild.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordVoiceStateUpdateEvent',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 11,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 13,
							col: 2,
						},
						jsDoc: 'id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 15,
							col: 2,
						},
						jsDoc: 'id of the channel the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 17,
							col: 2,
						},
						jsDoc: 'id of the guild the message was sent in',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 19,
							col: 2,
						},
						jsDoc:
							'the author of this message (not guaranteed to be a valid user)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 21,
							col: 2,
						},
						jsDoc: "member properties for this message's author",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordBaseMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordBaseMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 23,
							col: 2,
						},
						jsDoc: 'contents of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 25,
							col: 2,
						},
						jsDoc: 'when this message was sent',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'edited_timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 27,
							col: 2,
						},
						jsDoc: 'when this message was edited (or null if never)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 29,
							col: 2,
						},
						jsDoc: 'whether this was a TTS message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mention_everyone',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'whether this message mentions everyone',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 33,
							col: 2,
						},
						jsDoc: 'users specifically mentioned in the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'intersection',
									intersection: [
										{
											repr: 'DiscordUser',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordUser',
											},
										},
										{
											repr: 'Partial',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'DiscordMember',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'DiscordMember',
														},
													},
												],
												typeName: 'Partial',
											},
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mention_roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 35,
							col: 2,
						},
						jsDoc: 'roles specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mention_channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 37,
							col: 2,
						},
						jsDoc: 'channels specifically mentioned in this message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordChannelMention',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordChannelMention',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'attachments',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 39,
							col: 2,
						},
						jsDoc: 'any attached files',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordAttachment',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordAttachment',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 41,
							col: 2,
						},
						jsDoc: 'any embedded content',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordEmbed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordEmbed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'reactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 43,
							col: 2,
						},
						jsDoc: 'reactions to the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordReaction',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordReaction',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 45,
							col: 2,
						},
						jsDoc: 'used for validating a message was sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'pinned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'whether this message is pinned',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 49,
							col: 2,
						},
						jsDoc:
							"if the message is generated by a webhook, this is the webhook's id",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'type of message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMessageTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'activity',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 53,
							col: 2,
						},
						jsDoc: 'sent with Rich Presence-related chat embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMessageActivity',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageActivity',
							},
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 55,
							col: 2,
						},
						jsDoc: 'sent with Rich Presence-related chat embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMessageApplication',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageApplication',
							},
						},
						typeParams: [],
					},
					{
						name: 'message_reference',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 57,
							col: 2,
						},
						jsDoc: 'reference data sent with crossposted messages and replies',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMessageReference',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReference',
							},
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 59,
							col: 2,
						},
						jsDoc: 'message flags combined as a bitfield',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMessageFlags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageFlags',
							},
						},
						typeParams: [],
					},
					{
						name: 'stickers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 61,
							col: 2,
						},
						jsDoc:
							'the stickers sent with the message (bots currently can only receive messages with stickers, not send)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordMessageSticker',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordMessageSticker',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'referenced_message',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 63,
							col: 2,
						},
						jsDoc: 'the message associated with the `message_reference`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordMessage',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordMessage',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMessageTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 67,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-types',
			enumDef: {
				members: [
					{
						name: 'DEFAULT',
						jsDoc: null,
					},
					{
						name: 'RECIPIENT_ADD',
						jsDoc: null,
					},
					{
						name: 'RECIPIENT_REMOVE',
						jsDoc: null,
					},
					{
						name: 'CALL',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_NAME_CHANGE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_ICON_CHANGE',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_PINNED_MESSAGE',
						jsDoc: null,
					},
					{
						name: 'GUILD_MEMBER_JOIN',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2',
						jsDoc: null,
					},
					{
						name: 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3',
						jsDoc: null,
					},
					{
						name: 'CHANNEL_FOLLOW_ADD',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_DISQUALIFIED',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_REQUALIFIED',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING',
						jsDoc: null,
					},
					{
						name: 'GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING',
						jsDoc: null,
					},
					{
						name: 'REPLY',
						jsDoc: null,
					},
					{
						name: 'APPLICATION_COMMAND',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageActivity',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 90,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 92,
							col: 2,
						},
						jsDoc: 'type of message activity',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMessageActivityTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageActivityTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'party_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'party_id from a Rich Presence event',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 98,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-application-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 100,
							col: 2,
						},
						jsDoc: 'id of the application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cover_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 102,
							col: 2,
						},
						jsDoc: "id of the embed's image asset",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 104,
							col: 2,
						},
						jsDoc: "application's description",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 106,
							col: 2,
						},
						jsDoc: "id of the application's icon",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 108,
							col: 2,
						},
						jsDoc: 'name of the application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageReference',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 112,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'id of the originating message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 116,
							col: 2,
						},
						jsDoc: "id of the originating message's channel",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 118,
							col: 2,
						},
						jsDoc: "id of the originating message's guild",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMessageActivityTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 122,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-activity-types',
			enumDef: {
				members: [
					{
						name: 'JOIN',
						jsDoc: null,
					},
					{
						name: 'SPECTATE',
						jsDoc: null,
					},
					{
						name: 'LISTEN',
						jsDoc: null,
					},
					{
						name: 'JOIN_REQUEST',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMessageFlags',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 130,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-flags',
			enumDef: {
				members: [
					{
						name: 'CROSSPOSTED',
						jsDoc:
							'this message has been published to subscribed channels (via Channel Following)',
					},
					{
						name: 'IS_CROSSPOST',
						jsDoc:
							'this message originated from a message in another channel (via Channel Following)',
					},
					{
						name: 'SUPPRESS_EMBEDS',
						jsDoc: 'do not include any embeds when serializing this message',
					},
					{
						name: 'SOURCE_MESSAGE_DELETED',
						jsDoc:
							'the source message for this crosspost has been deleted (via Channel Following)',
					},
					{
						name: 'URGENT',
						jsDoc: 'this message came from the urgent message system',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageSticker',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 144,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-sticker-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 146,
							col: 2,
						},
						jsDoc: 'id of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'pack_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 148,
							col: 2,
						},
						jsDoc: 'id of the pack the sticker is from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 150,
							col: 2,
						},
						jsDoc: 'name of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 152,
							col: 2,
						},
						jsDoc: 'description of the sticker',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'tags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 154,
							col: 2,
						},
						jsDoc: 'a comma-separated list of tags for the sticker',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'asset',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 156,
							col: 2,
						},
						jsDoc: 'sticker asset hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'preview_asset',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 158,
							col: 2,
						},
						jsDoc: 'sticker preview asset hash',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'format_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 160,
							col: 2,
						},
						jsDoc: 'type of sticker format',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMessageStickerFormatTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageStickerFormatTypes',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMessageStickerFormatTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 164,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#message-object-message-sticker-format-types',
			enumDef: {
				members: [
					{
						name: 'PNG',
						jsDoc: null,
					},
					{
						name: 'APNG',
						jsDoc: null,
					},
					{
						name: 'LOTTIE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 171,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#reaction-object-reaction-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'times this emoji has been used to react',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'me',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'whether the current user reacted using this emoji',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 177,
							col: 2,
						},
						jsDoc: 'emoji information',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordEmoji',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordEmoji',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAttachment',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 181,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 183,
							col: 2,
						},
						jsDoc: 'attachment id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'filename',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 185,
							col: 2,
						},
						jsDoc: 'name of file attached',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'size',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'size of file in bytes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 189,
							col: 2,
						},
						jsDoc: 'source url of file',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 191,
							col: 2,
						},
						jsDoc: 'a proxied url of file',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 193,
							col: 2,
						},
						jsDoc: 'height of file (if image)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 195,
							col: 2,
						},
						jsDoc: 'width of file (if image)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordChannelMention',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 199,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#channel-mention-object-channel-mention-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 201,
							col: 2,
						},
						jsDoc: 'id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 203,
							col: 2,
						},
						jsDoc: 'id of the guild containing the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 205,
							col: 2,
						},
						jsDoc: 'the type of channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordChannelTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannelTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 207,
							col: 2,
						},
						jsDoc: 'the name of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'AllowedMentionTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 211,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types',
			enumDef: {
				members: [
					{
						name: 'ROLES',
						jsDoc: 'Controls role mentions',
					},
					{
						name: 'USERS',
						jsDoc: 'Controls user mentions',
					},
					{
						name: 'EVERYONE',
						jsDoc: 'Controls `@everyone` and `@here` mentions',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordAllowedMentions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 221,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mentions-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'parse',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 223,
							col: 2,
						},
						jsDoc:
							'An array of allowed mention types to parse from the content.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'AllowedMentionTypes',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'AllowedMentionTypes',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 225,
							col: 2,
						},
						jsDoc: 'Array of role_ids to mention (Max size of 100)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 227,
							col: 2,
						},
						jsDoc: 'Array of user_ids to mention (Max size of 100)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'replied_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 229,
							col: 2,
						},
						jsDoc:
							'For replies, whether to mention the author of the message being replied to (default false)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetChannelMessagesParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 233,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#get-channel-messages-query-string-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'around',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 235,
							col: 2,
						},
						jsDoc: 'get messages around this message ID',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 237,
							col: 2,
						},
						jsDoc: 'get messages before this message ID',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 239,
							col: 2,
						},
						jsDoc: 'get messages after this message ID',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 241,
							col: 2,
						},
						jsDoc: 'max number of messages to return (1-100)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateMessageParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 245,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#create-message-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 247,
							col: 2,
						},
						jsDoc: 'the message contents (up to 2000 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 249,
							col: 2,
						},
						jsDoc: 'a nonce that can be used for optimistic message sending',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 251,
							col: 2,
						},
						jsDoc: '`true` if this is a TTS message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'file',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 253,
							col: 2,
						},
						jsDoc: 'the contents of the file being sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'blob',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'unknown',
											kind: 'keyword',
											keyword: 'unknown',
										},
										typeParams: [],
									},
									{
										name: 'name',
										params: [],
										computed: false,
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'embed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 255,
							col: 2,
						},
						jsDoc: 'embedded rich content',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbed',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbed',
							},
						},
						typeParams: [],
					},
					{
						name: 'payload_json',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 257,
							col: 2,
						},
						jsDoc: 'JSON encoded body of any additional request fields.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'allowed_mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 259,
							col: 2,
						},
						jsDoc: 'allowed mentions for a message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordAllowedMentions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordAllowedMentions',
							},
						},
						typeParams: [],
					},
					{
						name: 'message_reference',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'include to make your message a reply',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMessageReference',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReference',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetReactionsParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 265,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#get-reactions-query-string-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'before',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 267,
							col: 2,
						},
						jsDoc: 'get users before this user ID',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 269,
							col: 2,
						},
						jsDoc: 'get users after this user ID',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 271,
							col: 2,
						},
						jsDoc: 'max number of users to return (1-100)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEditMessageParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 275,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#edit-message-json-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 277,
							col: 2,
						},
						jsDoc: 'the new message contents (up to 2000 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'embed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 279,
							col: 2,
						},
						jsDoc: 'embedded rich content',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordEmbed',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordEmbed',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 281,
							col: 2,
						},
						jsDoc:
							'edit the flags of a message (only SUPPRESS_EMBEDS can currently be set/unset)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordMessageFlags',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordMessageFlags',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'allowed_mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 283,
							col: 2,
						},
						jsDoc: 'allowed mentions for the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordAllowedMentions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordAllowedMentions',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBulkDeleteMessagesParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 287,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#bulk-delete-messages-json-params',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'messages',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
							line: 289,
							col: 2,
						},
						jsDoc: 'an array of message ids to delete (2-100)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				imported: 'DiscordMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordBaseMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordBaseMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'DiscordEmbed',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordEmbed',
			},
		},
		{
			kind: 'import',
			name: 'DiscordEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordEmoji',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/message.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordRole',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
				line: 2,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/permissions#role-object-role-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 4,
							col: 2,
						},
						jsDoc: 'role id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'role name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'number representation of hexadecimal color code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'hoist',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'if this role is pinned in the user listing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'position',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'position of this role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'whether this role is managed by an integration',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionable',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'whether this role is mentionable',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'tags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'the tags this role has',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordRoleTags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordRoleTags',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordRoleTags',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
				line: 24,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/permissions#role-object-role-tags-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'bot_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'the id of the bot this role belongs to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'integration_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'the id of the integration this role belongs to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_subscriber',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/role.ts',
							line: 30,
							col: 2,
						},
						jsDoc: "whether this is the guild's premium subscriber role",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'null',
							kind: 'keyword',
							keyword: 'null',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbed',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 2,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'title',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 4,
							col: 2,
						},
						jsDoc: 'title of embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'type of embed (always "rich" for webhook embeds)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'description of embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'url of embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'timestamp of embed content',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'color',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'color code of the embed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'footer',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'footer information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedFooter',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedFooter',
							},
						},
						typeParams: [],
					},
					{
						name: 'image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'image information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedImage',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedImage',
							},
						},
						typeParams: [],
					},
					{
						name: 'thumbnail',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'thumbnail information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedThumbnail',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedThumbnail',
							},
						},
						typeParams: [],
					},
					{
						name: 'video',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'video information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedVideo',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedVideo',
							},
						},
						typeParams: [],
					},
					{
						name: 'provider',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'provider information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedProvider',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedProvider',
							},
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'author information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordEmbedAuthor',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordEmbedAuthor',
							},
						},
						typeParams: [],
					},
					{
						name: 'fields',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'fields information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordEmbedField',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordEmbedField',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'EmbedTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 35,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-types\n@deprecated',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'rich',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'rich',
							},
						},
						{
							repr: 'image',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'image',
							},
						},
						{
							repr: 'video',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'video',
							},
						},
						{
							repr: 'gifv',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'gifv',
							},
						},
						{
							repr: 'article',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'article',
							},
						},
						{
							repr: 'link',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'link',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedThumbnail',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 44,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 46,
							col: 2,
						},
						jsDoc:
							'source url of thumbnail (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'a proxied url of the thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'height of thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 52,
							col: 2,
						},
						jsDoc: 'width of thumbnail',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedVideo',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 56,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-video-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 58,
							col: 2,
						},
						jsDoc: 'source url of video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 60,
							col: 2,
						},
						jsDoc: 'a proxied url of the video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'height of video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 64,
							col: 2,
						},
						jsDoc: 'width of video',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedImage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 68,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-image-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 70,
							col: 2,
						},
						jsDoc:
							'source url of image (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 72,
							col: 2,
						},
						jsDoc: 'a proxied url of the image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'height',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'height of image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'width',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'width of image',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedProvider',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 80,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-provider-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 82,
							col: 2,
						},
						jsDoc: 'name of provider',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 84,
							col: 2,
						},
						jsDoc: 'url of provider',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedAuthor',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 88,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 90,
							col: 2,
						},
						jsDoc: 'name of author',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 92,
							col: 2,
						},
						jsDoc: 'url of author',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'url of author icon (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 96,
							col: 2,
						},
						jsDoc: 'a proxied url of author icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedFooter',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 100,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 102,
							col: 2,
						},
						jsDoc: 'footer text',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 104,
							col: 2,
						},
						jsDoc: 'url of footer icon (only supports http(s) and attachments)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'proxy_icon_url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 106,
							col: 2,
						},
						jsDoc: 'a proxied url of footer icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmbedField',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
				line: 110,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 112,
							col: 2,
						},
						jsDoc: 'name of the field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 114,
							col: 2,
						},
						jsDoc: 'value of the field',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'inline',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/embed.ts',
							line: 116,
							col: 2,
						},
						jsDoc: 'whether or not this field should display inline',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordTeam',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/teams#data-models-team-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 6,
							col: 2,
						},
						jsDoc: "a hash of the image of the team's icon",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the unique id of the team',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the members of the team',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordTeamMembers',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordTeamMembers',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'owner_user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the user id of the current team owner',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordTeamMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
				line: 16,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/teams#data-models-team-members-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'membership_state',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 18,
							col: 2,
						},
						jsDoc: "the user's membership state on the team",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'typeOperator',
							typeOperator: {
								operator: 'keyof',
								tsType: {
									repr: 'DiscordMembershipState',
									kind: 'typeQuery',
									typeQuery: 'DiscordMembershipState',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'will always be ["*"]',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'team_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'the id of the parent team of which they are a member',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'the avatar, discriminator, id, and username of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordBaseUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordBaseUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordMembershipState',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
				line: 28,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum',
			enumDef: {
				members: [
					{
						name: 'INVITED',
						jsDoc: null,
					},
					{
						name: 'ACCEPTED',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'DiscordBaseUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/teams.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordBaseUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGateway',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 43,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#payloads',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'op',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 45,
							col: 2,
						},
						jsDoc: 'opcode for the payload',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordGatewayOpcodes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGatewayOpcodes',
							},
						},
						typeParams: [],
					},
					{
						name: 'd',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'event data',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordGatewayDTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGatewayDTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 's',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 49,
							col: 2,
						},
						jsDoc: 'sequence number, used for resuming sessions and heartbeats',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 't',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'the event name for this payload',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordGatewayTTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGatewayTTypes',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordGatewayDTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 55,
				col: 0,
			},
			jsDoc: 'GatewayPayload event data type list',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'DiscordHelloEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordHelloEvent',
							},
						},
						{
							repr: 'DiscordReadyEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordReadyEvent',
							},
						},
						{
							repr: 'DiscordResume',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordResume',
							},
						},
						{
							repr: 'DiscordChannel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannel',
							},
						},
						{
							repr: 'DiscordChannelPinsUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordChannelPinsUpdateEvent',
							},
						},
						{
							repr: 'DiscordGuild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuild',
							},
						},
						{
							repr: 'DiscordUnavailableGuild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUnavailableGuild',
							},
						},
						{
							repr: 'DiscordGuildBanAddEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildBanAddEvent',
							},
						},
						{
							repr: 'DiscordGuildBanRemoveEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildBanRemoveEvent',
							},
						},
						{
							repr: 'DiscordGuildEmojisUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildEmojisUpdateEvent',
							},
						},
						{
							repr: 'DiscordGuildIntegrationsUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildIntegrationsUpdateEvent',
							},
						},
						{
							repr: 'DiscordMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMember',
							},
						},
						{
							repr: 'DiscordGuildMemberAddExtra',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildMemberAddExtra',
							},
						},
						{
							repr: 'DiscordGuildMemberRemoveEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildMemberRemoveEvent',
							},
						},
						{
							repr: 'DiscordGuildMemberUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildMemberUpdateEvent',
							},
						},
						{
							repr: 'DiscordGuildMembersChunkEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildMembersChunkEvent',
							},
						},
						{
							repr: 'DiscordGuildRoleCreateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildRoleCreateEvent',
							},
						},
						{
							repr: 'DiscordGuildRoleUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildRoleUpdateEvent',
							},
						},
						{
							repr: 'DiscordGuildRoleDeleteEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordGuildRoleDeleteEvent',
							},
						},
						{
							repr: 'DiscordIntegrationCreate',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationCreate',
							},
						},
						{
							repr: 'DiscordIntegrationUpdate',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationUpdate',
							},
						},
						{
							repr: 'DiscordIntegrationDelete',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIntegrationDelete',
							},
						},
						{
							repr: 'DiscordInviteCreateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInviteCreateEvent',
							},
						},
						{
							repr: 'DiscordInviteDeleteEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInviteDeleteEvent',
							},
						},
						{
							repr: 'DiscordMessage',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessage',
							},
						},
						{
							repr: 'DiscordMessageDeleteEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageDeleteEvent',
							},
						},
						{
							repr: 'DiscordMessageDeleteBulkEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageDeleteBulkEvent',
							},
						},
						{
							repr: 'DiscordMessageReactionAddEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReactionAddEvent',
							},
						},
						{
							repr: 'DiscordMessageReactionRemoveEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReactionRemoveEvent',
							},
						},
						{
							repr: 'DiscordMessageReactionRemoveAllEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReactionRemoveAllEvent',
							},
						},
						{
							repr: 'DiscordMessageReactionRemoveEmoji',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMessageReactionRemoveEmoji',
							},
						},
						{
							repr: 'DiscordPresenceUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPresenceUpdateEvent',
							},
						},
						{
							repr: 'DiscordTypingStartEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordTypingStartEvent',
							},
						},
						{
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						{
							repr: 'DiscordVoiceStateUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordVoiceStateUpdateEvent',
							},
						},
						{
							repr: 'DiscordVoiceServerUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordVoiceServerUpdateEvent',
							},
						},
						{
							repr: 'DiscordWebhooksUpdateEvent',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordWebhooksUpdateEvent',
							},
						},
						{
							repr: 'DiscordInteractionCommand',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInteractionCommand',
							},
						},
						{
							repr: 'false',
							kind: 'literal',
							literal: {
								kind: 'boolean',
								boolean: false,
							},
						},
						{
							repr: 'null',
							kind: 'keyword',
							keyword: 'null',
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordGatewayTTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 98,
				col: 0,
			},
			jsDoc: 'GatewayPayload event name list',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'HELLO',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'HELLO',
							},
						},
						{
							repr: 'READY',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'READY',
							},
						},
						{
							repr: 'RESUMED',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'RESUMED',
							},
						},
						{
							repr: 'RECONNECT',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'RECONNECT',
							},
						},
						{
							repr: 'INVALID_SESSION',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVALID_SESSION',
							},
						},
						{
							repr: 'CHANNEL_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_CREATE',
							},
						},
						{
							repr: 'CHANNEL_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_UPDATE',
							},
						},
						{
							repr: 'CHANNEL_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_DELETE',
							},
						},
						{
							repr: 'CHANNEL_PINS_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'CHANNEL_PINS_UPDATE',
							},
						},
						{
							repr: 'GUILD_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_CREATE',
							},
						},
						{
							repr: 'GUILD_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_UPDATE',
							},
						},
						{
							repr: 'GUILD_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_DELETE',
							},
						},
						{
							repr: 'GUILD_BAN_ADD',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_BAN_ADD',
							},
						},
						{
							repr: 'GUILD_BAN_REMOVE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_BAN_REMOVE',
							},
						},
						{
							repr: 'GUILD_EMOJIS_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_EMOJIS_UPDATE',
							},
						},
						{
							repr: 'GUILD_INTEGRATIONS_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_INTEGRATIONS_UPDATE',
							},
						},
						{
							repr: 'GUILD_MEMBER_ADD',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_MEMBER_ADD',
							},
						},
						{
							repr: 'GUILD_MEMBER_REMOVE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_MEMBER_REMOVE',
							},
						},
						{
							repr: 'GUILD_MEMBER_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_MEMBER_UPDATE',
							},
						},
						{
							repr: 'GUILD_MEMBERS_CHUNK',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_MEMBERS_CHUNK',
							},
						},
						{
							repr: 'GUILD_ROLE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_ROLE_CREATE',
							},
						},
						{
							repr: 'GUILD_ROLE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_ROLE_UPDATE',
							},
						},
						{
							repr: 'GUILD_ROLE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'GUILD_ROLE_DELETE',
							},
						},
						{
							repr: 'INTEGRATION_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_CREATE',
							},
						},
						{
							repr: 'INTEGRATION_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_UPDATE',
							},
						},
						{
							repr: 'INTEGRATION_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTEGRATION_DELETE',
							},
						},
						{
							repr: 'INVITE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_CREATE',
							},
						},
						{
							repr: 'INVITE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INVITE_DELETE',
							},
						},
						{
							repr: 'MESSAGE_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_CREATE',
							},
						},
						{
							repr: 'MESSAGE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_UPDATE',
							},
						},
						{
							repr: 'MESSAGE_DELETE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_DELETE',
							},
						},
						{
							repr: 'MESSAGE_DELETE_BULK',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_DELETE_BULK',
							},
						},
						{
							repr: 'MESSAGE_REACTION_ADD',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_REACTION_ADD',
							},
						},
						{
							repr: 'MESSAGE_REACTION_REMOVE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_REACTION_REMOVE',
							},
						},
						{
							repr: 'MESSAGE_REACTION_REMOVE_ALL',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_REACTION_REMOVE_ALL',
							},
						},
						{
							repr: 'MESSAGE_REACTION_REMOVE_EMOJI',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'MESSAGE_REACTION_REMOVE_EMOJI',
							},
						},
						{
							repr: 'PRESENCE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'PRESENCE_UPDATE',
							},
						},
						{
							repr: 'TYPING_START',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'TYPING_START',
							},
						},
						{
							repr: 'USER_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'USER_UPDATE',
							},
						},
						{
							repr: 'VOICE_STATE_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'VOICE_STATE_UPDATE',
							},
						},
						{
							repr: 'VOICE_SERVER_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'VOICE_SERVER_UPDATE',
							},
						},
						{
							repr: 'WEBHOOKS_UPDATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'WEBHOOKS_UPDATE',
							},
						},
						{
							repr: 'INTERACTION_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'INTERACTION_CREATE',
							},
						},
						{
							repr: 'APPLICATION_COMMAND_CREATE',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'APPLICATION_COMMAND_CREATE',
							},
						},
						{
							repr: 'null',
							kind: 'keyword',
							keyword: 'null',
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGatewayURLParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 147,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#connecting-to-the-gateway',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'v',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 149,
							col: 2,
						},
						jsDoc: 'gateway Version to use',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'encoding',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 151,
							col: 2,
						},
						jsDoc: 'the encoding of recieved gateway packets',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'compress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 153,
							col: 2,
						},
						jsDoc: 'the (optional) compression of gateway packets',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordGatewayIntents',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 157,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#gateway-intents',
			enumDef: {
				members: [
					{
						name: 'GUILDS',
						jsDoc:
							'Enables the following events:\n- GUILD_CREATE\n- GUILD_DELETE\n- GUILD_ROLE_CREATE\n- GUILD_ROLE_UPDATE\n- GUILD_ROLE_DELETE\n- CHANNEL_CREATE\n- CHANNEL_UPDATE\n- CHANNEL_DELETE\n- CHANNEL_PINS_UPDATE',
					},
					{
						name: 'GUILD_MEMBERS',
						jsDoc:
							'Enables the following events:\n- GUILD_MEMBER_ADD\n- GUILD_MEMBER_UPDATE\n- GUILD_MEMBER_REMOVE',
					},
					{
						name: 'GUILD_BANS',
						jsDoc:
							'Enables the following events:\n- GUILD_BAN_ADD\n- GUILD_BAN_REMOVE',
					},
					{
						name: 'GUILD_EMOJIS',
						jsDoc: 'Enables the following events:\n- GUILD_EMOJIS_UPDATE',
					},
					{
						name: 'GUILD_INTEGRATIONS',
						jsDoc:
							'Enables the following events:\n- GUILD_INTEGRATIONS_UPDATE\n- INTEGRATION_CREATE\n- INTEGRATION_UPDATE\n- INTEGRATION_DELETE',
					},
					{
						name: 'GUILD_WEBHOOKS',
						jsDoc: 'Enables the following events:\n- WEBHOOKS_UPDATE',
					},
					{
						name: 'GUILD_INVITES',
						jsDoc:
							'Enables the following events:\n- INVITE_CREATE\n- INVITE_DELETE',
					},
					{
						name: 'GUILD_VOICE_STATES',
						jsDoc: 'Enables the following events:\n- VOICE_STATE_UPDATE',
					},
					{
						name: 'GUILD_PRESENCES',
						jsDoc: 'Enables the following events:\n- PRESENCE_UPDATE',
					},
					{
						name: 'GUILD_MESSAGES',
						jsDoc:
							'Enables the following events:\n- MESSAGE_CREATE\n- MESSAGE_UPDATE\n- MESSAGE_DELETE',
					},
					{
						name: 'GUILD_MESSAGE_REACTIONS',
						jsDoc:
							'Enables the following events:\n- MESSAGE_REACTION_ADD\n- MESSAGE_REACTION_REMOVE\n- MESSAGE_REACTION_REMOVE_ALL\n- MESSAGE_REACTION_REMOVE_EMOJI',
					},
					{
						name: 'GUILD_MESSAGE_TYPING',
						jsDoc: 'Enables the following events:\n- TYPING_START',
					},
					{
						name: 'DIRECT_MESSAGES',
						jsDoc:
							'Enables the following events:\n- CHANNEL_CREATE\n- MESSAGE_CREATE\n- MESSAGE_UPDATE\n- MESSAGE_DELETE\n- CHANNEL_PINS_UPDATE',
					},
					{
						name: 'DIRECT_MESSAGE_REACTIONS',
						jsDoc:
							'Enables the following events:\n- MESSAGE_REACTION_ADD\n- MESSAGE_REACTION_REMOVE\n- MESSAGE_REACTION_REMOVE_ALL\n- MESSAGE_REACTION_REMOVE_EMOJI',
					},
					{
						name: 'DIRECT_MESSAGE_TYPING',
						jsDoc: 'Enables the following events:\n- TYPING_START',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIdentify',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 248,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#identify',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 250,
							col: 2,
						},
						jsDoc: 'authentication token',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'properties',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 252,
							col: 2,
						},
						jsDoc: 'connection properties',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordIdentifyConnectionProps',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordIdentifyConnectionProps',
							},
						},
						typeParams: [],
					},
					{
						name: 'compress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 254,
							col: 2,
						},
						jsDoc:
							'whether this connection supports compression of packets, default: false',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'large_threshold',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 256,
							col: 2,
						},
						jsDoc:
							'value between 50 and 250, total number of members where the gateway will stop sending offline members in the guild member list, default: 50',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'shard',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 258,
							col: 2,
						},
						jsDoc: 'used for Guild Sharding',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'presence',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 260,
							col: 2,
						},
						jsDoc: 'presence structure for initial presence information',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUpdateStatus',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUpdateStatus',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_subscriptions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 262,
							col: 2,
						},
						jsDoc:
							'enables dispatching of guild subscription events (presence and typing events), default: true',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'intents',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 264,
							col: 2,
						},
						jsDoc: 'the Gateway Intents you wish to receive',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIdentifyConnectionProps',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 268,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#identify-identify-connection-properties',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: '$os',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 270,
							col: 2,
						},
						jsDoc: 'your operating system',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: '$browser',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'your library name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: '$device',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'your library name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordResume',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 278,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#resume',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 280,
							col: 2,
						},
						jsDoc: 'session token',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 282,
							col: 2,
						},
						jsDoc: 'session id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'seq',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 284,
							col: 2,
						},
						jsDoc: 'last sequence number received',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordRequestGuildMembers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 288,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#request-guild-members',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'id of the guild to get members for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'query',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 292,
							col: 2,
						},
						jsDoc:
							'string that username starts with, or an empty string to return all members',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 294,
							col: 2,
						},
						jsDoc:
							'maximum number of members to send matching the query; a limit of 0 can be used with an empty string query to return all members',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 296,
							col: 2,
						},
						jsDoc:
							'used to specify if we want the presence of the matched members',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'user_ids',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 298,
							col: 2,
						},
						jsDoc: 'used to specify which users you wish to fetch',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 300,
							col: 2,
						},
						jsDoc: 'nonce to identify the Guild Members Chunk response',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordUpdateVoiceState',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 304,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#update-voice-state',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 306,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 308,
							col: 2,
						},
						jsDoc:
							'id of the voice channel client wants to join (null if disconnecting)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'self_mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 310,
							col: 2,
						},
						jsDoc: 'is the client muted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 312,
							col: 2,
						},
						jsDoc: 'is the client deafened',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordUpdateStatus',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 316,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#update-status',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 318,
							col: 2,
						},
						jsDoc:
							'unix time (in milliseconds) of when the client went idle, or null if the client is not idle',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'activities',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 320,
							col: 2,
						},
						jsDoc: "null, or the user's activities",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordActivity',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordActivity',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 322,
							col: 2,
						},
						jsDoc: "the user's new status",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordStatusTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordStatusTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'afk',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 324,
							col: 2,
						},
						jsDoc: 'whether or not the client is afk',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordStatusTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 328,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#update-status-status-types',
			enumDef: {
				members: [
					{
						name: 'ONLINE',
						jsDoc: null,
					},
					{
						name: 'DND',
						jsDoc: null,
					},
					{
						name: 'IDLE',
						jsDoc: null,
					},
					{
						name: 'INVISIBLE',
						jsDoc: null,
					},
					{
						name: 'OFFLINE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordClientStatus',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 337,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#client-status-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'desktop',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 339,
							col: 2,
						},
						jsDoc:
							"the user's status set for an active desktop (Windows, Linux, Mac) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'mobile',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 341,
							col: 2,
						},
						jsDoc:
							"the user's status set for an active mobile (iOS, Android) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'web',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 343,
							col: 2,
						},
						jsDoc:
							"the user's status set for an active web (browser, bot account) application session",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivity',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 347,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 349,
							col: 2,
						},
						jsDoc: "the activity's id",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 351,
							col: 2,
						},
						jsDoc: "the activity's name",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 353,
							col: 2,
						},
						jsDoc: 'activity type',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordActivityTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivityTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 355,
							col: 2,
						},
						jsDoc: 'stream url, is validated when type is 1',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 357,
							col: 2,
						},
						jsDoc:
							"unix timestamp of when the activity was added to the user's session",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'timestamps',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 359,
							col: 2,
						},
						jsDoc: 'unix timestamps for start and/or end of the game',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordActivityTimestamps',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivityTimestamps',
							},
						},
						typeParams: [],
					},
					{
						name: 'sync_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 361,
							col: 2,
						},
						jsDoc: 'the id of the song on Spotify',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'platform',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 363,
							col: 2,
						},
						jsDoc:
							'the platform the game is being played on ("desktop", "samsung", or "xbox")',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 365,
							col: 2,
						},
						jsDoc: 'application id for the game',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'details',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 367,
							col: 2,
						},
						jsDoc: 'what the player is currently doing',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'state',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 369,
							col: 2,
						},
						jsDoc: "the user's current party status",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 371,
							col: 2,
						},
						jsDoc: 'the emoji used for a custom status',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordActivityEmoji',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordActivityEmoji',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 373,
							col: 2,
						},
						jsDoc: 'the id of the game or Spotify session',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'party',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 375,
							col: 2,
						},
						jsDoc: 'information for the current party of the player',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordActivityParty',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivityParty',
							},
						},
						typeParams: [],
					},
					{
						name: 'assets',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 377,
							col: 2,
						},
						jsDoc: 'images for the presence and their hover texts',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordActivityAssets',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivityAssets',
							},
						},
						typeParams: [],
					},
					{
						name: 'secrets',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 379,
							col: 2,
						},
						jsDoc: 'secrets for Rich Presence joining and spectating',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordActivitySecrets',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivitySecrets',
							},
						},
						typeParams: [],
					},
					{
						name: 'instance',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 381,
							col: 2,
						},
						jsDoc: 'whether or not the activity is an instanced game session',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 383,
							col: 2,
						},
						jsDoc:
							'activity flags OR d together, describes what the payload includes',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordActivityFlags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordActivityFlags',
							},
						},
						typeParams: [],
					},
					{
						name: 'buttons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 385,
							col: 2,
						},
						jsDoc: 'the custom buttons shown in the Rich Presence (max 2)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordActivityButton',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordActivityButton',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivityButton',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 388,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'label',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 390,
							col: 2,
						},
						jsDoc: 'the text shown on the button (1-32 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 392,
							col: 2,
						},
						jsDoc: 'the url opened when clicking the button (1-512 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordActivityTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 396,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-types',
			enumDef: {
				members: [
					{
						name: 'GAME',
						jsDoc: 'Playing {name}',
					},
					{
						name: 'STREAMING',
						jsDoc: 'Streaming {details}',
					},
					{
						name: 'LISTENING',
						jsDoc: 'Listening to {name}',
					},
					{
						name: 'CUSTOM',
						jsDoc: '{emoji} {name}',
					},
					{
						name: 'COMPETING',
						jsDoc: 'Competing in {name}',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivityTimestamps',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 410,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-timestamps',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'start',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 412,
							col: 2,
						},
						jsDoc: 'unix time (in milliseconds) of when the activity started',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'end',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 414,
							col: 2,
						},
						jsDoc: 'unix time (in milliseconds) of when the activity ends',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivityEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 418,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-emoji',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 420,
							col: 2,
						},
						jsDoc: 'the name of the emoji',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 422,
							col: 2,
						},
						jsDoc: 'the id of the emoji',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 424,
							col: 2,
						},
						jsDoc: 'whether this emoji is animated',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivityParty',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 428,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-party',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 430,
							col: 2,
						},
						jsDoc: 'the id of the party',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'size',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 432,
							col: 2,
						},
						jsDoc: "used to show the party's currrent and maximum size",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivityAssets',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 436,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-assets',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'large_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 438,
							col: 2,
						},
						jsDoc:
							'the id for a large asset of the activity, usually a snowflake',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'large_text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 440,
							col: 2,
						},
						jsDoc:
							'text displayed when hovering over the large image of the activity',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'small_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 442,
							col: 2,
						},
						jsDoc:
							'the id for a small asset of the activity, usually a snowflake',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'small_text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 444,
							col: 2,
						},
						jsDoc:
							'text displlayed when hovering over the small image of the activity',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordActivitySecrets',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 448,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-secrets',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'join',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 450,
							col: 2,
						},
						jsDoc: 'the secret for joining a party',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'spectate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 452,
							col: 2,
						},
						jsDoc: 'the secret for spectating a game',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'match',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 454,
							col: 2,
						},
						jsDoc: 'the secret for a specific instanced match',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordActivityFlags',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 458,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#activity-object-activity-flags',
			enumDef: {
				members: [
					{
						name: 'INSTANCE',
						jsDoc: null,
					},
					{
						name: 'JOIN',
						jsDoc: null,
					},
					{
						name: 'SPECTATE',
						jsDoc: null,
					},
					{
						name: 'JOIN_REQUEST',
						jsDoc: null,
					},
					{
						name: 'SYNC',
						jsDoc: null,
					},
					{
						name: 'PLAY',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGetGatewayBot',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 468,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#get-gateway-bot-json-response',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 470,
							col: 2,
						},
						jsDoc: 'the WSS URL that can be used for connecting to the gateway',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'shards',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 472,
							col: 2,
						},
						jsDoc: 'the recommended number of shards to use when connecting',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'session_start_limit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 474,
							col: 2,
						},
						jsDoc: 'information on the current session start limit',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordSessionStartLimit',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordSessionStartLimit',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordSessionStartLimit',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 478,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#session-start-limit-object-session-start-limit-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'total',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 480,
							col: 2,
						},
						jsDoc:
							'the total number of session starts the current user is allowed',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'remaining',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 482,
							col: 2,
						},
						jsDoc:
							'the remaining number of session starts the current user is allowed',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'reset_after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 484,
							col: 2,
						},
						jsDoc: 'the number of milliseconds after which the limit resets',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_concurrency',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
							line: 486,
							col: 2,
						},
						jsDoc: 'the number of identify requests allowed per 5 seconds',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordInteractionCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				imported: 'DiscordInteractionCommand',
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannel',
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannelPinsUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannelPinsUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGatewayOpcodes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGatewayOpcodes',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuild',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildBanAddEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildBanAddEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildBanRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildBanRemoveEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildEmojisUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildEmojisUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildIntegrationsUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildIntegrationsUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildMemberAddExtra',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildMemberAddExtra',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildMemberRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildMemberRemoveEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildMembersChunkEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildMembersChunkEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildMemberUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildMemberUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildRoleCreateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildRoleCreateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildRoleDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildRoleDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuildRoleUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuildRoleUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordHelloEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordHelloEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIntegrationCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordIntegrationCreate',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIntegrationDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordIntegrationDelete',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIntegrationUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordIntegrationUpdate',
			},
		},
		{
			kind: 'import',
			name: 'DiscordInviteCreateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordInviteCreateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordInviteDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordInviteDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessage',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageDeleteBulkEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageDeleteBulkEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageReactionAddEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageReactionAddEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageReactionRemoveAllEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageReactionRemoveAllEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageReactionRemoveEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageReactionRemoveEmoji',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMessageReactionRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMessageReactionRemoveEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPresenceUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordPresenceUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordReadyEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordReadyEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordTypingStartEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordTypingStartEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUnavailableGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUnavailableGuild',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'import',
			name: 'DiscordVoiceServerUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordVoiceServerUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordVoiceStateUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordVoiceStateUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'DiscordWebhooksUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/gateway.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordWebhooksUpdateEvent',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInteractionCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'id of the interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the type of interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordInteractionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInteractionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'the command data payload',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordInteractionData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordInteractionData',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'the guild it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'the channel it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'guild member data for the invoking user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'a continuation token for responding to the interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'version',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'read-only property, always 1',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordInteractionType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 27,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'PING',
						jsDoc:
							'This type is for ACK on webhook only setup. Discord may send these which require. In a sense its a heartbeat.',
					},
					{
						name: 'APPLICATION_COMMAND',
						jsDoc: 'Slash commands',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInteractionData',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'the ID of the invoked command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'the name of the invoked command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'resolved',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 40,
							col: 2,
						},
						jsDoc: 'converted users + roles + channels',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordApplicationCommandInteractionDataResolved',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordApplicationCommandInteractionDataResolved',
							},
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 42,
							col: 2,
						},
						jsDoc: 'the params + values from the user',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordInteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordInteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordApplicationCommandInteractionDataResolved',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 45,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'users',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 47,
							col: 2,
						},
						jsDoc: 'the IDs and User objects',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'DiscordUser',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordUser',
										},
									},
								],
								typeName: 'Record',
							},
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 49,
							col: 2,
						},
						jsDoc: 'the IDs and partial Member objects',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Omit',
										kind: 'typeRef',
										typeRef: {
											typeParams: [
												{
													repr: 'DiscordMember',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'DiscordMember',
													},
												},
												{
													repr: '',
													kind: 'union',
													union: [
														{
															repr: 'user',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'user',
															},
														},
														{
															repr: 'deaf',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'deaf',
															},
														},
														{
															repr: 'mute',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'mute',
															},
														},
													],
												},
											],
											typeName: 'Omit',
										},
									},
								],
								typeName: 'Record',
							},
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'the IDs and Role objects',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'DiscordRole',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordRole',
										},
									},
								],
								typeName: 'Record',
							},
						},
						typeParams: [],
					},
					{
						name: 'channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 53,
							col: 2,
						},
						jsDoc: 'the IDs and partial Channel objects',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Record',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
									{
										repr: 'Pick',
										kind: 'typeRef',
										typeRef: {
											typeParams: [
												{
													repr: 'DiscordChannel',
													kind: 'typeRef',
													typeRef: {
														typeParams: null,
														typeName: 'DiscordChannel',
													},
												},
												{
													repr: '',
													kind: 'union',
													union: [
														{
															repr: 'id',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'id',
															},
														},
														{
															repr: 'name',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'name',
															},
														},
														{
															repr: 'type',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'type',
															},
														},
														{
															repr: 'permission_overwrites',
															kind: 'literal',
															literal: {
																kind: 'string',
																string: 'permission_overwrites',
															},
														},
													],
												},
											],
											typeName: 'Pick',
										},
									},
								],
								typeName: 'Record',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInteractionDataOption',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 59,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 61,
							col: 2,
						},
						jsDoc: 'the name of the parameter',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 63,
							col: 2,
						},
						jsDoc: 'value of ApplicationCommandOptionType',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordApplicationCommandOptionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordApplicationCommandOptionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 65,
							col: 2,
						},
						jsDoc:
							'the value of the pair. present if there was no more options',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 67,
							col: 2,
						},
						jsDoc: 'present if this option is a group or subcommand',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordInteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordInteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordApplicationCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 71,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommand',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 73,
							col: 2,
						},
						jsDoc: 'unique id of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 75,
							col: 2,
						},
						jsDoc: 'unique id of the parent application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 77,
							col: 2,
						},
						jsDoc: '3-32 character name matching `^[\\w-]{3,32}$`',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 79,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 81,
							col: 2,
						},
						jsDoc: 'the parameters for the command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordApplicationCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordApplicationCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordApplicationCommandOption',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 85,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoption',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 87,
							col: 2,
						},
						jsDoc: 'the type of the option',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordApplicationCommandOptionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordApplicationCommandOptionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 89,
							col: 2,
						},
						jsDoc: '1-32 character name matching `^[\\w-]{1,32}$`',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 91,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'default',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 93,
							col: 2,
						},
						jsDoc:
							'the first `required` option for the user to complete--only one option can be `default`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'required',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'if the parameter is required or optional--default `false`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'choices',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 97,
							col: 2,
						},
						jsDoc:
							'choices for `string` and `int` types for the user to pick from',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordApplicationCommandOptionChoice',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordApplicationCommandOptionChoice',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 99,
							col: 2,
						},
						jsDoc:
							'if the option is a subcommand or subcommand group type, this nested options will be the parameters',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordApplicationCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordApplicationCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordApplicationCommandOptionType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 103,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#Discordapplicationcommandoptiontype',
			enumDef: {
				members: [
					{
						name: 'SUB_COMMAND',
						jsDoc: null,
					},
					{
						name: 'SUB_COMMAND_GROUP',
						jsDoc: null,
					},
					{
						name: 'STRING',
						jsDoc: null,
					},
					{
						name: 'INTEGER',
						jsDoc: null,
					},
					{
						name: 'BOOLEAN',
						jsDoc: null,
					},
					{
						name: 'USER',
						jsDoc: null,
					},
					{
						name: 'CHANNEL',
						jsDoc: null,
					},
					{
						name: 'ROLE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordApplicationCommandOptionChoice',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 115,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptionchoice',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 117,
							col: 2,
						},
						jsDoc: '1-100 character choice name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
							line: 119,
							col: 2,
						},
						jsDoc: 'value of the choice',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordApplicationCommandEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 122,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'intersection',
					intersection: [
						{
							repr: 'DiscordApplicationCommand',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordApplicationCommand',
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'guild_id',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordChannel',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordRole',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/interaction.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/oauth2#get-current-application-information',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'id of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the name of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the icon hash of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the description of the app',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'rpc_origins',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'an array of rpc origin urls, if rpx is enabled',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'bot_public',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 16,
							col: 2,
						},
						jsDoc: "when false only app owner can join the app's bot to guilds",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'bot_require_code_grand',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 18,
							col: 2,
						},
						jsDoc:
							"when true the app's bot will only join upon completion of the full oauth2 code grant flow",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'owner',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 20,
							col: 2,
						},
						jsDoc:
							'partial user object containing info on the owner of the application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordUser',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordUser',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'summary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 22,
							col: 2,
						},
						jsDoc:
							'if this application is a game sold on Disccord, this field will be the summary field for the store page of its primary sku',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verify_key',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 24,
							col: 2,
						},
						jsDoc: "the base64 enccoded key for the GameSDK'S GetTicket",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'team',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 26,
							col: 2,
						},
						jsDoc:
							'if the application belongs to a team, this will be a list of the members of that team',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'DiscordTeam',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'DiscordTeam',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 28,
							col: 2,
						},
						jsDoc:
							'if this application is a game sold on Discord, this field will be the guild to which it has been linked',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'primary_sku_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 30,
							col: 2,
						},
						jsDoc:
							'if this application is a game sold on Discord, this field will be the id of the "Game SKU" that is created, if exists',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'slug',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 32,
							col: 2,
						},
						jsDoc:
							'if this application is a game sold on Discord, this field will be the URL slug that links to the store page',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'cover_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 34,
							col: 2,
						},
						jsDoc:
							'if this application is a game sold on Discord, this field wil be the hash of the image on store embeds',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
							line: 36,
							col: 2,
						},
						jsDoc: "the application's public flags",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordTeam',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordTeam',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/oauth2.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordRateLimitResponse',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/ratelimits.ts',
				line: 2,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/rate-limits#exceeding-a-rate-limit',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'message',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/ratelimits.ts',
							line: 4,
							col: 2,
						},
						jsDoc: 'a message saying you are being rate limited',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'retry_after',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/ratelimits.ts',
							line: 6,
							col: 2,
						},
						jsDoc:
							'the number of seconds to wait before submitting another request.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'global',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/ratelimits.ts',
							line: 8,
							col: 2,
						},
						jsDoc:
							'a value indicating if you are being globally limited or not',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/emoji#emoji-object-emoji-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'emoji id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'emoji name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'roles this emoji is whitelisted to',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'user that created this emoji',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'require_colons',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'whether this emoji must be wrapped in colons',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'managed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'whether this emoji is managed',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'whether this emoji is animated',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'available',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 20,
							col: 2,
						},
						jsDoc:
							'whether this emoji can be used, may be false due to loss of Server Boosts',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildEmojiParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
				line: 24,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/emoji#create-guild-emoji',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'name of the emoji',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 28,
							col: 2,
						},
						jsDoc: 'the 128x128 emoji image (Data URI scheme)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 30,
							col: 2,
						},
						jsDoc: 'roles for which this emoji will be whitelisted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildEmojiParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
				line: 34,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/emoji#modify-guild-emoji',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 36,
							col: 2,
						},
						jsDoc: 'name of the emoji',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'roles to which this emoji will be whitelisted',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/emoji.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'enum',
			name: 'DiscordGatewayOpcodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 2,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#opcodes-and-status-codes',
			enumDef: {
				members: [
					{
						name: 'Dispatch',
						jsDoc: null,
					},
					{
						name: 'Heartbeat',
						jsDoc: null,
					},
					{
						name: 'Identify',
						jsDoc: null,
					},
					{
						name: 'PresenceUpdate',
						jsDoc: null,
					},
					{
						name: 'VoiceStateUpdate',
						jsDoc: null,
					},
					{
						name: 'Resume',
						jsDoc: null,
					},
					{
						name: 'Reconnect',
						jsDoc: null,
					},
					{
						name: 'RequestGuildMembers',
						jsDoc: null,
					},
					{
						name: 'InvalidSession',
						jsDoc: null,
					},
					{
						name: 'Hello',
						jsDoc: null,
					},
					{
						name: 'HeartbeatACK',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordGatewayCloseEventCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 17,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#opcodes-and-status-codes',
			enumDef: {
				members: [
					{
						name: 'UnknownError',
						jsDoc: null,
					},
					{
						name: 'UnknownOpcode',
						jsDoc: null,
					},
					{
						name: 'DecodeError',
						jsDoc: null,
					},
					{
						name: 'NotAuthenticated',
						jsDoc: null,
					},
					{
						name: 'AuthenticationFailed',
						jsDoc: null,
					},
					{
						name: 'AlreadyAuthenticated',
						jsDoc: null,
					},
					{
						name: 'InvalidSeq',
						jsDoc: null,
					},
					{
						name: 'RateLimited',
						jsDoc: null,
					},
					{
						name: 'SessionTimedOut',
						jsDoc: null,
					},
					{
						name: 'InvalidShard',
						jsDoc: null,
					},
					{
						name: 'ShardingRequired',
						jsDoc: null,
					},
					{
						name: 'InvalidApiVersion',
						jsDoc: null,
					},
					{
						name: 'InvalidIntents',
						jsDoc: null,
					},
					{
						name: 'DisallowedIntents',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordVoiceOpcodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 35,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#voice',
			enumDef: {
				members: [
					{
						name: 'Identify',
						jsDoc: null,
					},
					{
						name: 'SelectProtocol',
						jsDoc: null,
					},
					{
						name: 'Ready',
						jsDoc: null,
					},
					{
						name: 'Heartbeat',
						jsDoc: null,
					},
					{
						name: 'SessionDescription',
						jsDoc: null,
					},
					{
						name: 'Speaking',
						jsDoc: null,
					},
					{
						name: 'HeartbeatACK',
						jsDoc: null,
					},
					{
						name: 'Resume',
						jsDoc: null,
					},
					{
						name: 'Hello',
						jsDoc: null,
					},
					{
						name: 'Resumed',
						jsDoc: null,
					},
					{
						name: 'ClientDisconnect',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordVoiceCloseEventCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 50,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#voice',
			enumDef: {
				members: [
					{
						name: 'UnknownOpcode',
						jsDoc: null,
					},
					{
						name: 'FailedToDecodePayload',
						jsDoc: null,
					},
					{
						name: 'NotAuthenticated',
						jsDoc: null,
					},
					{
						name: 'AuthenticationFailed',
						jsDoc: null,
					},
					{
						name: 'AlreadyAuthenticated',
						jsDoc: null,
					},
					{
						name: 'SessionNoLongerValid',
						jsDoc: null,
					},
					{
						name: 'SessionTimedOut',
						jsDoc: null,
					},
					{
						name: 'ServerNotFound',
						jsDoc: null,
					},
					{
						name: 'UnknownProtocol',
						jsDoc: null,
					},
					{
						name: 'Disconnect',
						jsDoc: null,
					},
					{
						name: 'VoiceServerCrashed',
						jsDoc: null,
					},
					{
						name: 'UnknownEncryptionMode',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordHTTPResponseCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 66,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#http',
			enumDef: {
				members: [
					{
						name: 'Ok',
						jsDoc: null,
					},
					{
						name: 'Created',
						jsDoc: null,
					},
					{
						name: 'NoContent',
						jsDoc: null,
					},
					{
						name: 'NotModified',
						jsDoc: null,
					},
					{
						name: 'BadRequest',
						jsDoc: null,
					},
					{
						name: 'Unauthorized',
						jsDoc: null,
					},
					{
						name: 'Forbidden',
						jsDoc: null,
					},
					{
						name: 'NotFound',
						jsDoc: null,
					},
					{
						name: 'MethodNotAllowed',
						jsDoc: null,
					},
					{
						name: 'TooManyRequests',
						jsDoc: null,
					},
					{
						name: 'GatewayUnavailable',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordJsonErrorCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 81,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#json',
			enumDef: {
				members: [
					{
						name: 'GeneralError',
						jsDoc: null,
					},
					{
						name: 'UnknownAccount',
						jsDoc: null,
					},
					{
						name: 'UnknownApplication',
						jsDoc: null,
					},
					{
						name: 'UnknownChannel',
						jsDoc: null,
					},
					{
						name: 'UnknownGuild',
						jsDoc: null,
					},
					{
						name: 'UnknownIntegration',
						jsDoc: null,
					},
					{
						name: 'UnknownInvite',
						jsDoc: null,
					},
					{
						name: 'UnknownMember',
						jsDoc: null,
					},
					{
						name: 'UnknownMessage',
						jsDoc: null,
					},
					{
						name: 'UnknownPermissionOverwrite',
						jsDoc: null,
					},
					{
						name: 'UnknownProvider',
						jsDoc: null,
					},
					{
						name: 'UnknownRole',
						jsDoc: null,
					},
					{
						name: 'UnknownToken',
						jsDoc: null,
					},
					{
						name: 'UnknownUser',
						jsDoc: null,
					},
					{
						name: 'UnknownEmoji',
						jsDoc: null,
					},
					{
						name: 'UnknownWebhook',
						jsDoc: null,
					},
					{
						name: 'UnknownBan',
						jsDoc: null,
					},
					{
						name: 'UnknownSKU',
						jsDoc: null,
					},
					{
						name: 'UnknownStoreListing',
						jsDoc: null,
					},
					{
						name: 'UnknownEntitlement',
						jsDoc: null,
					},
					{
						name: 'UnknownBuild',
						jsDoc: null,
					},
					{
						name: 'UnknownLobby',
						jsDoc: null,
					},
					{
						name: 'UnknownBranch',
						jsDoc: null,
					},
					{
						name: 'UnknownRedistributable',
						jsDoc: null,
					},
					{
						name: 'UnknownGuildTemplate',
						jsDoc: null,
					},
					{
						name: 'UnknownApplicationCommand',
						jsDoc: null,
					},
					{
						name: 'BotsCannotUseThisEndpoint',
						jsDoc: null,
					},
					{
						name: 'OnlyBotsCanUseThisEndpoint',
						jsDoc: null,
					},
					{
						name: 'ThisMessageCannotBeEditedDueToAnnouncementRateLimits',
						jsDoc: null,
					},
					{
						name: 'TheChannelYouAreWritingHasHitTheWriteRateLimit',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfGuildsReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfFriendsReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfPinsReachedForTheChannel',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfGuildRolesReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfWebhooksReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfReactionsReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfGuildChannelsReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfAttachmentsInAMessageReached',
						jsDoc: null,
					},
					{
						name: 'MaximumNumberOfInvitesReached',
						jsDoc: null,
					},
					{
						name: 'GuildAlreadyHasTemplate',
						jsDoc: null,
					},
					{
						name: 'UnauthorizedProvideAValidTokenAndTryAgain',
						jsDoc: null,
					},
					{
						name: 'YouNeedToVerifyYourAccountInOrderToPerformThisAction',
						jsDoc: null,
					},
					{
						name: 'RequestEntityTooLargeTrySendingSomethingSmallerInSize',
						jsDoc: null,
					},
					{
						name: 'ThisFeatureHasBeenTemporarilyDisabledServerSide',
						jsDoc: null,
					},
					{
						name: 'ThisUserBannedFromThisGuild',
						jsDoc: null,
					},
					{
						name: 'ThisMessageHasAlreadyBeenCrossposted',
						jsDoc: null,
					},
					{
						name: 'MissingAccess',
						jsDoc: null,
					},
					{
						name: 'InvalidAccountType',
						jsDoc: null,
					},
					{
						name: 'CannotExecuteActionOnADMChannel',
						jsDoc: null,
					},
					{
						name: 'GuildWidgetDisabled',
						jsDoc: null,
					},
					{
						name: 'CannotEditMessageAuthoredByAnotherUser',
						jsDoc: null,
					},
					{
						name: 'CannotSendAnEmptyMessage',
						jsDoc: null,
					},
					{
						name: 'CannotSendMessagesToThisUser',
						jsDoc: null,
					},
					{
						name: 'CannotSendMessagesInAVoiceChannel',
						jsDoc: null,
					},
					{
						name: 'ChannelVerificationLevelIsTooHighForYouToGainAccess',
						jsDoc: null,
					},
					{
						name: 'Oauth2ApplicationDoesNotHaveABot',
						jsDoc: null,
					},
					{
						name: 'Oauth2ApplicationLimitReached',
						jsDoc: null,
					},
					{
						name: 'InvalidOauth2State',
						jsDoc: null,
					},
					{
						name: 'YouLackPermissionsToPerformThatAction',
						jsDoc: null,
					},
					{
						name: 'InvalidAuthenticationTokenProvided',
						jsDoc: null,
					},
					{
						name: 'NoteWasTooLong',
						jsDoc: null,
					},
					{
						name:
							'ProvidedTooFewOrTooManyMessagesToDeleteMustProvideAtLeast2AndFewerThan100MessagesToDelete',
						jsDoc: null,
					},
					{
						name: 'AMessageCanOnlyBePinnedInTheChannelItWasSentIn',
						jsDoc: null,
					},
					{
						name: 'InviteCodeWasEitherInvalidOrTaken',
						jsDoc: null,
					},
					{
						name: 'CannotExecuteActionOnASystemMessage',
						jsDoc: null,
					},
					{
						name: 'CannotExecuteActionOnThisChannelType',
						jsDoc: null,
					},
					{
						name: 'InvalidOauth2AccessTokenProvided',
						jsDoc: null,
					},
					{
						name: 'InvalidRecipients',
						jsDoc: null,
					},
					{
						name: 'AMessageProvidedWasTooOldToBulkDelete',
						jsDoc: null,
					},
					{
						name: 'InvalidFormBodyOrContentTypeProvided',
						jsDoc: null,
					},
					{
						name: 'AnInviteWasAcceptedToAGuildTheApplicationsBotIsNotIn',
						jsDoc: null,
					},
					{
						name: 'InvalidApiVersionProvided',
						jsDoc: null,
					},
					{
						name: 'CannotDeleteAChannelRequiredForCommunityGuilds',
						jsDoc: null,
					},
					{
						name: 'InvalidStickerSent',
						jsDoc: null,
					},
					{
						name: 'ReqctionWasBlocked',
						jsDoc: null,
					},
					{
						name: 'ApiResourceIsCurrentlyOverloadedTryAgainALittleLater',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordRpcErrorCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 161,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc',
			enumDef: {
				members: [
					{
						name: 'UnknownError',
						jsDoc: null,
					},
					{
						name: 'InvalidPayload',
						jsDoc: null,
					},
					{
						name: 'InvalidCommand',
						jsDoc: null,
					},
					{
						name: 'InvalidGuild',
						jsDoc: null,
					},
					{
						name: 'InvalidEvent',
						jsDoc: null,
					},
					{
						name: 'InvalidChannel',
						jsDoc: null,
					},
					{
						name: 'InvalidPermissions',
						jsDoc: null,
					},
					{
						name: 'InvalidClientID',
						jsDoc: null,
					},
					{
						name: 'InvalidOrigin',
						jsDoc: null,
					},
					{
						name: 'InvalidToken',
						jsDoc: null,
					},
					{
						name: 'InvalidUser',
						jsDoc: null,
					},
					{
						name: 'OAuth2Error',
						jsDoc: null,
					},
					{
						name: 'SelectChannelTimedOut',
						jsDoc: null,
					},
					{
						name: 'GetGuildTimedOut',
						jsDoc: null,
					},
					{
						name: 'SelectVoiceForceRequired',
						jsDoc: null,
					},
					{
						name: 'CaptureShortcutAlreadyListening',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordRpcCloseEventCodes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/api/code.ts',
				line: 181,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc',
			enumDef: {
				members: [
					{
						name: 'InvalidClientID',
						jsDoc: null,
					},
					{
						name: 'InvalidOrigin',
						jsDoc: null,
					},
					{
						name: 'RateLimited',
						jsDoc: null,
					},
					{
						name: 'TokenRevoked',
						jsDoc: null,
					},
					{
						name: 'InvalidVersion',
						jsDoc: null,
					},
					{
						name: 'InvalidEncoding',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordImageSize',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/image.ts',
				line: 2,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/reference#image-formatting',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: '16',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 16,
							},
						},
						{
							repr: '32',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 32,
							},
						},
						{
							repr: '64',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 64,
							},
						},
						{
							repr: '128',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 128,
							},
						},
						{
							repr: '256',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 256,
							},
						},
						{
							repr: '512',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 512,
							},
						},
						{
							repr: '1024',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 1024,
							},
						},
						{
							repr: '2048',
							kind: 'literal',
							literal: {
								kind: 'number',
								number: 2048,
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'DiscordImageFormat',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/image.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'union',
					union: [
						{
							repr: 'jpg',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'jpg',
							},
						},
						{
							repr: 'jpeg',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'jpeg',
							},
						},
						{
							repr: 'png',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'png',
							},
						},
						{
							repr: 'webp',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'webp',
							},
						},
						{
							repr: 'gif',
							kind: 'literal',
							literal: {
								kind: 'string',
								string: 'gif',
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordTemplate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/template#template-resource',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'the template code (unique ID)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'template name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the description for the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'usage_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'number of times this template has been used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'creator_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'the ID of teh user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'creator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'the user who created the template',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'when this template was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'updated_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 20,
							col: 2,
						},
						jsDoc: 'when this template was last synced to the source guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'source_guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'the ID of the guild this template is based on',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'serialized_source_guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 24,
							col: 2,
						},
						jsDoc: 'the guild snapshot this template contains',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordGuild',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordGuild',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'is_dirty',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'whether the template has unsynced changes',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildFromTemplateParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 30,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/template#create-guild-from-template',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 32,
							col: 2,
						},
						jsDoc: 'name of the guild (2-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'icon',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 34,
							col: 2,
						},
						jsDoc: 'base64 128x128 image for the guild icon',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordCreateGuildTemplateParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 38,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/template#create-guild-template',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 40,
							col: 2,
						},
						jsDoc: 'name of the template (1-100 characters)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 42,
							col: 2,
						},
						jsDoc: 'description for the template (0-120 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordModifyGuildTemplateParams',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 46,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/template#modify-guild-template',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'name of the template (1-100 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'description for the template (0-120 characters)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordGuild',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/template.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/permission.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/permission.ts',
							line: 3,
							col: 2,
						},
						jsDoc: 'role or user id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/permission.ts',
							line: 5,
							col: 2,
						},
						jsDoc: 'either 0 (role) or 1 (member)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'allow',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/permission.ts',
							line: 7,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deny',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/permission.ts',
							line: 9,
							col: 2,
						},
						jsDoc: 'permission bit set',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordWebhook',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
				line: 4,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/webhook#webhook-resource',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 6,
							col: 2,
						},
						jsDoc: 'the id of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the type of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordWebhookTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordWebhookTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the guild id this webhook is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the channel id this webhook is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 14,
							col: 2,
						},
						jsDoc:
							'the user this webhook was created by (not returned when getting a webhook with its token)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'the default name of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'the default avatar of the webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 20,
							col: 2,
						},
						jsDoc:
							'the secure token of the webhook (returned for Incoming Webhooks)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'the bot/OAuth2 application that created this webhook',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordWebhookTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
				line: 26,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/webhook#webhook-resource',
			enumDef: {
				members: [
					{
						name: 'INCOMING',
						jsDoc:
							'Incoming Webhook can post messages to channels with a generated token',
					},
					{
						name: 'CHANNEL_FOLLOWER',
						jsDoc:
							'Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels',
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/webhook.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordHelloEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 15,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#hello',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'heartbeat_interval',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 17,
							col: 2,
						},
						jsDoc:
							'the interval (in milliseconds) the client should heartbeat with',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordReadyEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 21,
				col: 0,
			},
			jsDoc: 'https://discord.com/developers/docs/topics/gateway#ready',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'v',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 23,
							col: 2,
						},
						jsDoc: 'gateway version',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 25,
							col: 2,
						},
						jsDoc: 'information about the user including email',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'private_channels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 27,
							col: 2,
						},
						jsDoc: 'empty array',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [],
						},
						typeParams: [],
					},
					{
						name: 'guilds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 29,
							col: 2,
						},
						jsDoc: 'the guilds the user is in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordUnavailableGuild',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordUnavailableGuild',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'used for resuming connections',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'shard',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 33,
							col: 2,
						},
						jsDoc:
							'the shard information associated with this session, if sent when identifying',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'application',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 35,
							col: 2,
						},
						jsDoc: 'contains id and flags',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Pick',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordApplication',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordApplication',
										},
									},
									{
										repr: '',
										kind: 'union',
										union: [
											{
												repr: 'id',
												kind: 'literal',
												literal: {
													kind: 'string',
													string: 'id',
												},
											},
											{
												repr: 'flags',
												kind: 'literal',
												literal: {
													kind: 'string',
													string: 'flags',
												},
											},
										],
									},
								],
								typeName: 'Pick',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordChannelPinsUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 39,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#channel-pins-update-channel-pins-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 41,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 43,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'last_pin_timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 45,
							col: 2,
						},
						jsDoc:
							'the time at which the most recent pinned message was pinned',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildBanAddEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 49,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-ban-add-guild-ban-add-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 51,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 53,
							col: 2,
						},
						jsDoc: 'the banned user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildBanRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 57,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-ban-remove-guild-ban-remove-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 59,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 61,
							col: 2,
						},
						jsDoc: 'the unbanned user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildEmojisUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 65,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-emojis-update-guild-emojis-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 67,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'emojis',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 69,
							col: 2,
						},
						jsDoc: 'array of emojis',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordEmoji',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordEmoji',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildIntegrationsUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 73,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-integrations-update-guild-integrations-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 75,
							col: 2,
						},
						jsDoc: 'id of the guild whose integrations were updated',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildMemberAddExtra',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 79,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-member-add-guild-member-add-extra-fields',
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordMember',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordMember',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 81,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildMemberRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 85,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-member-remove-guild-member-remove-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 87,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 89,
							col: 2,
						},
						jsDoc: 'the user who was removed',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildMemberUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 93,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-member-update-guild-member-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 95,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 97,
							col: 2,
						},
						jsDoc: 'user role ids',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 99,
							col: 2,
						},
						jsDoc: 'the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 101,
							col: 2,
						},
						jsDoc: 'nickname of the user in the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'joied_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 103,
							col: 2,
						},
						jsDoc: 'when the user joined the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 105,
							col: 2,
						},
						jsDoc: 'when the user starting boosting the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildMembersChunkEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 109,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-members-chunk-guild-members-chunk-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 111,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'members',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 113,
							col: 2,
						},
						jsDoc: 'set of guild members',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordMember',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordMember',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'chunk_index',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 115,
							col: 2,
						},
						jsDoc:
							'the chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'chunk_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 117,
							col: 2,
						},
						jsDoc: 'the total number of expected chunks for this response',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'not_found',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 119,
							col: 2,
						},
						jsDoc:
							'if passing an invalid id to REQUEST_GUILD_MEMBERS, it will be returned here',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [],
						},
						typeParams: [],
					},
					{
						name: 'presences',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 121,
							col: 2,
						},
						jsDoc:
							'if passing true REQUEST_GUILD_MEMBERS, presences of the returned members will be here',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordPresenceUpdateEvent',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordPresenceUpdateEvent',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 123,
							col: 2,
						},
						jsDoc: 'the nonce used in the Guild Members Request',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildRoleCreateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 127,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-role-create-guild-role-create-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 129,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 131,
							col: 2,
						},
						jsDoc: 'the role created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordRole',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordRole',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildRoleUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 135,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-role-update-guild-role-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 137,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 139,
							col: 2,
						},
						jsDoc: 'the role updated',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordRole',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordRole',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordGuildRoleDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 143,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#guild-role-delete-guild-role-delete-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 145,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'role_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 147,
							col: 2,
						},
						jsDoc: 'id of the role',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 151,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordIntegration',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordIntegration',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 153,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 156,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordIntegration',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordIntegration',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 158,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordIntegrationDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 161,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 163,
							col: 2,
						},
						jsDoc: 'integration id',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 165,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 167,
							col: 2,
						},
						jsDoc:
							'id of the bot/OAuth2 application for this discordd integration',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInviteCreateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 171,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#invite-create-invite-create-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 173,
							col: 2,
						},
						jsDoc: 'the channel the invite is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 175,
							col: 2,
						},
						jsDoc: 'the unique invite code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 177,
							col: 2,
						},
						jsDoc: 'the time at which the invite was created',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 179,
							col: 2,
						},
						jsDoc: 'the guild of the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'inviter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 181,
							col: 2,
						},
						jsDoc: 'the user that created the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'max_age',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 183,
							col: 2,
						},
						jsDoc: 'how long the invite is valid for (in seconds)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'max_uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 185,
							col: 2,
						},
						jsDoc: 'the maximum number of times the invite can be used',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'target_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'the target user for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordUser',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordUser',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 189,
							col: 2,
						},
						jsDoc: 'the type of user target for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'temporary',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 191,
							col: 2,
						},
						jsDoc:
							"whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'uses',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 193,
							col: 2,
						},
						jsDoc: 'how many times the invite has been used (always will be 0)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordInviteDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 197,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#invite-delete-invite-delete-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 199,
							col: 2,
						},
						jsDoc: 'the channel of the invite',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 201,
							col: 2,
						},
						jsDoc: 'the guild of the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 203,
							col: 2,
						},
						jsDoc: 'the unique invite code',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageDeleteEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 207,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-delete-message-delete-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 209,
							col: 2,
						},
						jsDoc: 'the id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 211,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 213,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageDeleteBulkEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 217,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-delete-bulk-message-delete-bulk-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'ids',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 219,
							col: 2,
						},
						jsDoc: 'the ids of the messages',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 221,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 223,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageReactionAddEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 227,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-reaction-add-message-reaction-add-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 229,
							col: 2,
						},
						jsDoc: 'the id of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 231,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 233,
							col: 2,
						},
						jsDoc: 'the id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 235,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 237,
							col: 2,
						},
						jsDoc: 'the member who reacted if this happened in a guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 239,
							col: 2,
						},
						jsDoc: 'the emoji used to react',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordEmoji',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordEmoji',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageReactionRemoveEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 243,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-reaction-remove-message-reaction-remove-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 245,
							col: 2,
						},
						jsDoc: 'the id of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 247,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 249,
							col: 2,
						},
						jsDoc: 'the id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 251,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 253,
							col: 2,
						},
						jsDoc: 'the emoji used to react',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordEmoji',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordEmoji',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageReactionRemoveAllEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 257,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-reaction-remove-all-message-reaction-remove-all-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 259,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'the id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 263,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMessageReactionRemoveEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 267,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#message-reaction-remove-emoji-message-reaction-remove-emoji',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 269,
							col: 2,
						},
						jsDoc: 'the id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 271,
							col: 2,
						},
						jsDoc: 'the id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'message_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 273,
							col: 2,
						},
						jsDoc: 'the id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 275,
							col: 2,
						},
						jsDoc: 'the emoji that was removed',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'DiscordEmoji',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'DiscordEmoji',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordPresenceUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 279,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#presence-update-presence-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 281,
							col: 2,
						},
						jsDoc: 'the user presence is being updated for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 283,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 285,
							col: 2,
						},
						jsDoc: 'either "idle", "dnd", "online", or "offline"',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordStatusTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordStatusTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'activities',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 287,
							col: 2,
						},
						jsDoc: "user's current activities",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'DiscordActivity',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'DiscordActivity',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'client_status',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 289,
							col: 2,
						},
						jsDoc: "user's platform-dependent status",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'DiscordClientStatus',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordClientStatus',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordTypingStartEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 293,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#typing-start-typing-start-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 295,
							col: 2,
						},
						jsDoc: 'id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 297,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 299,
							col: 2,
						},
						jsDoc: 'id of the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 301,
							col: 2,
						},
						jsDoc: 'unix time (in seconds) of when the user started typing',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 303,
							col: 2,
						},
						jsDoc: 'the member who started typing if this happened in a guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMember',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordVoiceServerUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 307,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#voice-server-update-voice-server-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 309,
							col: 2,
						},
						jsDoc: 'voice connection token',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 311,
							col: 2,
						},
						jsDoc: 'the guildd this voice server update is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'endpoint',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 313,
							col: 2,
						},
						jsDoc: 'the voice server host',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordWebhooksUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 317,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#webhooks-update-webhook-update-event-fields',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 319,
							col: 2,
						},
						jsDoc: 'id of the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 321,
							col: 2,
						},
						jsDoc: 'id of the channel',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordVoiceStateUpdateEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 325,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/voice#voice-resource',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 327,
							col: 2,
						},
						jsDoc: 'the guild id this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 329,
							col: 2,
						},
						jsDoc: 'the channel id this user is connected to',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'user_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 331,
							col: 2,
						},
						jsDoc: 'the user id this voice state is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 333,
							col: 2,
						},
						jsDoc: 'the guild member this voice state is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'session_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 335,
							col: 2,
						},
						jsDoc: 'the session id for this voice state',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 337,
							col: 2,
						},
						jsDoc: 'whether this user is deafened by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 339,
							col: 2,
						},
						jsDoc: 'whether this user is muted by the server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 341,
							col: 2,
						},
						jsDoc: 'whether this user is locally deafened',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 343,
							col: 2,
						},
						jsDoc: 'whether this user is locally muted',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_stream',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 345,
							col: 2,
						},
						jsDoc: 'whether this user is streaming using "Go Live"',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'self_video',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 347,
							col: 2,
						},
						jsDoc: "whether this user's camera is enabled",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'suppress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
							line: 349,
							col: 2,
						},
						jsDoc: 'whether this user is muted by the current user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'DiscordActivity',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordActivity',
			},
		},
		{
			kind: 'import',
			name: 'DiscordApplication',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordApplication',
			},
		},
		{
			kind: 'import',
			name: 'DiscordClientStatus',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordClientStatus',
			},
		},
		{
			kind: 'import',
			name: 'DiscordEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordEmoji',
			},
		},
		{
			kind: 'import',
			name: 'DiscordIntegration',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordIntegration',
			},
		},
		{
			kind: 'import',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordMember',
			},
		},
		{
			kind: 'import',
			name: 'DiscordRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordRole',
			},
		},
		{
			kind: 'import',
			name: 'DiscordStatusTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordStatusTypes',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUnavailableGuild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUnavailableGuild',
			},
		},
		{
			kind: 'import',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/event.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/api/mod.ts',
				imported: 'DiscordUser',
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBaseUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 3,
							col: 2,
						},
						jsDoc: "the user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 5,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 7,
							col: 2,
						},
						jsDoc: "the user's 4-digit discord-tag",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 9,
							col: 2,
						},
						jsDoc: "the user's avatar hash",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordUser',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 13,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/user#users-resource',
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordBaseUser',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordBaseUser',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 15,
							col: 2,
						},
						jsDoc: "the user's id",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'username',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 17,
							col: 2,
						},
						jsDoc: "the user's username, not unique across the platform",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'discriminator',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 19,
							col: 2,
						},
						jsDoc: "the user's 4-digit discord-tag",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'avatar',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 21,
							col: 2,
						},
						jsDoc: "the user's avatar hash",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'bot',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 23,
							col: 2,
						},
						jsDoc: 'whether the user belongs to an OAuth2 application',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'system',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 25,
							col: 2,
						},
						jsDoc:
							'whether the user is an Official Discord System user (part of the urgent message system)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mfa_enabled',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 27,
							col: 2,
						},
						jsDoc: 'whether the user has two factor enabled on their account',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'locale',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 29,
							col: 2,
						},
						jsDoc: "the user's chosen language option",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'verified',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'whether the email on this account has been verified',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'email',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 33,
							col: 2,
						},
						jsDoc: "the user's email",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 35,
							col: 2,
						},
						jsDoc: "the flags on a user's account",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUserFlags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUserFlags',
							},
						},
						typeParams: [],
					},
					{
						name: 'premium_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 37,
							col: 2,
						},
						jsDoc: "the type of Nitro subscription on a user's account",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordPremiumTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordPremiumTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'public_flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 39,
							col: 2,
						},
						jsDoc: "the public flags on a user's account",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUserFlags',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUserFlags',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordUserFlags',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 43,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/user#users-resource',
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'DISCORD_EMPLOYEE',
						jsDoc: null,
					},
					{
						name: 'PARTNERED_SERVER_OWNER',
						jsDoc: null,
					},
					{
						name: 'HYPE_SQUAD_EVENTS',
						jsDoc: null,
					},
					{
						name: 'BUG_HUNTER_LEVEL_1',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BRAVERY',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BRILLIANCE',
						jsDoc: null,
					},
					{
						name: 'HOUSE_BALANCE',
						jsDoc: null,
					},
					{
						name: 'EARLY_SUPPORTER',
						jsDoc: null,
					},
					{
						name: 'TEAM_USER',
						jsDoc: null,
					},
					{
						name: 'SYSTEM',
						jsDoc: null,
					},
					{
						name: 'BUG_HUNTER_LEVEL_2',
						jsDoc: null,
					},
					{
						name: 'VERIFIED_BOT',
						jsDoc: null,
					},
					{
						name: 'EARLY_VERIFIED_BOT_DEVELOPER',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'enum',
			name: 'DiscordPremiumTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 61,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/user#users-resource',
			enumDef: {
				members: [
					{
						name: 'NONE',
						jsDoc: null,
					},
					{
						name: 'NITRO_CLASSIC',
						jsDoc: null,
					},
					{
						name: 'NITRO',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordBaseMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 68,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-structure',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 70,
							col: 2,
						},
						jsDoc: 'this users guild nickname',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 72,
							col: 2,
						},
						jsDoc: 'array of role payload ids',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'joined_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 74,
							col: 2,
						},
						jsDoc: 'when the user joined the guild',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 76,
							col: 2,
						},
						jsDoc: 'when the user started boosting the guild',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 78,
							col: 2,
						},
						jsDoc: 'whether the user is deafened in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 80,
							col: 2,
						},
						jsDoc: 'whether the user is muted in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'pending',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 82,
							col: 2,
						},
						jsDoc:
							"whether the user has not yet passed the guild's Membership Screening requirements",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
				line: 86,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-structure',
			interfaceDef: {
				extends: [
					{
						repr: 'DiscordBaseMember',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'DiscordBaseMember',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/member.ts',
							line: 88,
							col: 2,
						},
						jsDoc: 'the user this guild member represents',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordUser',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordUser',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DiscordVoiceRegion',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 3,
							col: 2,
						},
						jsDoc: 'unique ID for the region',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 5,
							col: 2,
						},
						jsDoc: 'name of the region',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'vip',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 7,
							col: 2,
						},
						jsDoc: 'true if this is a vip-only server',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'optimal',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 9,
							col: 2,
						},
						jsDoc:
							"true for a single server that is closet to the current user's client",
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'deprecated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 11,
							col: 2,
						},
						jsDoc:
							'whether this is a deprecated voice region (avoid switching to these)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'custom',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/api/voice.ts',
							line: 13,
							col: 2,
						},
						jsDoc:
							'whether this is a custom voice region (used for events/etc)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InteractionCommandPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 5,
							col: 2,
						},
						jsDoc: 'id of the interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 7,
							col: 2,
						},
						jsDoc: 'the type of interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'InteractionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InteractionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 9,
							col: 2,
						},
						jsDoc: 'the command data payload',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'InteractionData',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InteractionData',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 11,
							col: 2,
						},
						jsDoc: 'the guild it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 13,
							col: 2,
						},
						jsDoc: 'the channel it was sent from',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 15,
							col: 2,
						},
						jsDoc: 'guild member data for the invoking user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'MemberCreatePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MemberCreatePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 17,
							col: 2,
						},
						jsDoc: 'a continuation token for responding to the interaction',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'InteractionType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'PING',
						jsDoc:
							'This type is for ACK on webhook only setup. Discord may send these which require. In a sense its a heartbeat.',
					},
					{
						name: 'APPLICATION_COMMAND',
						jsDoc: 'Slash commands',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'InteractionData',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 27,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 29,
							col: 2,
						},
						jsDoc: 'the ID of the invoked command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'the name of the invoked command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 33,
							col: 2,
						},
						jsDoc: 'the params + values from the user',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'InteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'InteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InteractionDataOption',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 36,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 38,
							col: 2,
						},
						jsDoc: 'the name of the parameter',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 40,
							col: 2,
						},
						jsDoc:
							'the value of the pair. present if there was no more options',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 42,
							col: 2,
						},
						jsDoc: 'present if this option is a group or subcommand',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'InteractionDataOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'InteractionDataOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ApplicationCommand',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 46,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommand',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'unique id of the command',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'unique id of the parent application',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 52,
							col: 2,
						},
						jsDoc: '3-32 character name matching `^[\\w-]{3,32}$`',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 54,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 56,
							col: 2,
						},
						jsDoc: 'the parameters for the command',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'ApplicationCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ApplicationCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ApplicationCommandOption',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 60,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoption',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 62,
							col: 2,
						},
						jsDoc: 'the type of the option',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'ApplicationCommandOptionType',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ApplicationCommandOptionType',
							},
						},
						typeParams: [],
					},
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 64,
							col: 2,
						},
						jsDoc: '1-32 character name matching `^[\\w-]{1,32}$`',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'description',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 66,
							col: 2,
						},
						jsDoc: '1-100 character description',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'default',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 68,
							col: 2,
						},
						jsDoc:
							'the first `required` option for the user to complete--only one option can be `default`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'required',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 70,
							col: 2,
						},
						jsDoc: 'if the parameter is required or optional--default `false`',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'choices',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 72,
							col: 2,
						},
						jsDoc:
							'choices for `string` and `int` types for the user to pick from',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'ApplicationCommandOptionChoice',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ApplicationCommandOptionChoice',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'options',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 74,
							col: 2,
						},
						jsDoc:
							'if the option is a subcommand or subcommand group type, this nested options will be the parameters',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'ApplicationCommandOption',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'ApplicationCommandOption',
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'ApplicationCommandOptionType',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 78,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptiontype',
			enumDef: {
				members: [
					{
						name: 'SUB_COMMAND',
						jsDoc: null,
					},
					{
						name: 'SUB_COMMAND_GROUP',
						jsDoc: null,
					},
					{
						name: 'STRING',
						jsDoc: null,
					},
					{
						name: 'INTEGER',
						jsDoc: null,
					},
					{
						name: 'BOOLEAN',
						jsDoc: null,
					},
					{
						name: 'USER',
						jsDoc: null,
					},
					{
						name: 'CHANNEL',
						jsDoc: null,
					},
					{
						name: 'ROLE',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'ApplicationCommandOptionChoice',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 90,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptionchoice',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 92,
							col: 2,
						},
						jsDoc: '1-100 character choice name',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
							line: 94,
							col: 2,
						},
						jsDoc: 'value of the choice',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'typeAlias',
			name: 'ApplicationCommandEvent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 99,
				col: 0,
			},
			jsDoc: '@deprecated Use DiscordApplicationCommandEvent',
			typeAliasDef: {
				tsType: {
					repr: '',
					kind: 'intersection',
					intersection: [
						{
							repr: 'ApplicationCommand',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ApplicationCommand',
							},
						},
						{
							repr: '',
							kind: 'typeLiteral',
							typeLiteral: {
								methods: [],
								properties: [
									{
										name: 'guild_id',
										params: [],
										computed: false,
										optional: true,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										typeParams: [],
									},
								],
								callSignatures: [],
								indexSignatures: [],
							},
						},
					],
				},
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'MemberCreatePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				imported: 'MemberCreatePayload',
			},
		},
		{
			kind: 'interface',
			name: 'InvitePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
				line: 6,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/invite#invite-object',
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'code',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 8,
							col: 2,
						},
						jsDoc: 'the invite code (unique ID)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 10,
							col: 2,
						},
						jsDoc: 'the guild this invite is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'Guild',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'Guild',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'channel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 12,
							col: 2,
						},
						jsDoc: 'the channel this invite is for',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'ChannelCreatePayload',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'ChannelCreatePayload',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'inviter',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 14,
							col: 2,
						},
						jsDoc: 'the user who created the invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 16,
							col: 2,
						},
						jsDoc: 'the target user for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Partial',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'UserPayload',
										kind: 'typeRef',
										typeRef: {
											typeParams: null,
											typeName: 'UserPayload',
										},
									},
								],
								typeName: 'Partial',
							},
						},
						typeParams: [],
					},
					{
						name: 'target_user_type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 18,
							col: 2,
						},
						jsDoc: 'the type of user target for this invite',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'InviteTargetUserTypes',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'InviteTargetUserTypes',
							},
						},
						typeParams: [],
					},
					{
						name: 'approximate_presence_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 20,
							col: 2,
						},
						jsDoc:
							'approximate count of online members (only present when target_user is set)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'approximate_member_count',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
							line: 22,
							col: 2,
						},
						jsDoc: 'approximate count of total members',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'InviteTargetUserTypes',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
				line: 26,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/resources/invite#invite-resource',
			enumDef: {
				members: [
					{
						name: 'STREAM',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'ChannelCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/channel.ts',
				imported: 'ChannelCreatePayload',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/invite.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'interface',
			name: 'EditMemberOptions',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 5,
							col: 2,
						},
						jsDoc:
							'Value to set users nickname to. Requires MANAGE_NICKNAMES permission.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 7,
							col: 2,
						},
						jsDoc:
							'Array of role ids the member is assigned. Requires MANAGE_ROLES permission.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 9,
							col: 2,
						},
						jsDoc:
							'Whether the user is muted in voice channels. Requires MUTE_MEMBERS permission.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 11,
							col: 2,
						},
						jsDoc:
							'Whether the user is deafened in voice channels. Requires DEAFEN_MEMBERS permission.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'channel_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 14,
							col: 2,
						},
						jsDoc:
							'The id of the channel to move user to if they are connected to voice. To kick the user from their current channel, set to null. Requires MOVE_MEMBERS permission. When moving members to channels, must have permissions to both CONNECT to the channel and have the MOVE_MEMBER permission.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'MemberCreatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'user',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 19,
							col: 2,
						},
						jsDoc: 'The user this guild member represents',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 21,
							col: 2,
						},
						jsDoc: "The user's guild nickname if one is set.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 23,
							col: 2,
						},
						jsDoc: 'Array of role ids that the member has',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'joined_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 26,
							col: 2,
						},
						jsDoc: 'When the user joined the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'premium_since',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 29,
							col: 2,
						},
						jsDoc: 'When the user used their nitro boost on the server.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 31,
							col: 2,
						},
						jsDoc: 'Whether the user is deafened in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 33,
							col: 2,
						},
						jsDoc: 'Whether the user is muted in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'pending',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 35,
							col: 2,
						},
						jsDoc:
							"Whether the user has passed the guild's Membership Screening requirements",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildMember',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				line: 38,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'nick',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 40,
							col: 2,
						},
						jsDoc: "The user's guild nickname if one is set.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'roles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 42,
							col: 2,
						},
						jsDoc: 'Array of role ids that the member has',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'joinedAt',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 44,
							col: 2,
						},
						jsDoc: 'When the user joined the guild.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'premiumSince',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 46,
							col: 2,
						},
						jsDoc: 'When the user used their nitro boost on the server.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'deaf',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 48,
							col: 2,
						},
						jsDoc: 'Whether the user is deafened in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mute',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 50,
							col: 2,
						},
						jsDoc: 'Whether the user is muted in voice channels',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'pending',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 52,
							col: 2,
						},
						jsDoc:
							"Whether the user has passed the guild's Membership Screening requirements",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'InteractionMember',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				line: 55,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [
					{
						repr: 'GuildMember',
						kind: 'typeRef',
						typeRef: {
							typeParams: null,
							typeName: 'GuildMember',
						},
					},
				],
				methods: [],
				properties: [
					{
						name: 'permissions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
							line: 57,
							col: 2,
						},
						jsDoc:
							'total permissions of the member in the channel, including overrides, returned when in the interaction object',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/member.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'interface',
			name: 'ActivityPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 2,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 3,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'url',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 4,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'created_at',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 5,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'timestamps',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 6,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ActivityTimestamps',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ActivityTimestamps',
							},
						},
						typeParams: [],
					},
					{
						name: 'application_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 7,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'details',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 8,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'state',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 9,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'emoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 10,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ActivityEmoji',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ActivityEmoji',
							},
						},
						typeParams: [],
					},
					{
						name: 'party',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 11,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ActivityParty',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ActivityParty',
							},
						},
						typeParams: [],
					},
					{
						name: 'assets',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 12,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ActivityAssets',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ActivityAssets',
							},
						},
						typeParams: [],
					},
					{
						name: 'secrets',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 13,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'ActivitySecrets',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ActivitySecrets',
							},
						},
						typeParams: [],
					},
					{
						name: 'instance',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 14,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 15,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'ActivityType',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'Game',
						jsDoc: 'Example: "Playing Rocket League"',
					},
					{
						name: 'Streaming',
						jsDoc: 'Example: "Streaming Rocket League"',
					},
					{
						name: 'Listening',
						jsDoc: 'Example: "Listening to spotify"',
					},
					{
						name: 'Custom',
						jsDoc: 'Example: ":smiley: I am cool"',
					},
					{
						name: 'Competing',
						jsDoc: 'Example: "Competing in Arena World Champions"',
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'ActivityTimestamps',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 31,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'start',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 32,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'end',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 33,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ActivityEmoji',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 36,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'name',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 37,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 38,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'animated',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 39,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ActivityParty',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 42,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 43,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'size',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 44,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'tuple',
							tuple: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							],
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ActivityAssets',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'large_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 48,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'large_text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 49,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'small_image',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 50,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'small_text',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 51,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'ActivitySecrets',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 54,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'join',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 55,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'spectate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 56,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'match',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
							line: 57,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'ActivityFlags',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/activity.ts',
				line: 60,
				col: 0,
			},
			jsDoc: null,
			enumDef: {
				members: [
					{
						name: 'INSTANCE',
						jsDoc: null,
					},
					{
						name: 'JOIN',
						jsDoc: null,
					},
					{
						name: 'SPECTATE',
						jsDoc: null,
					},
					{
						name: 'JOIN_REQUEST',
						jsDoc: null,
					},
					{
						name: 'SYNC',
						jsDoc: null,
					},
					{
						name: 'PLAY',
						jsDoc: null,
					},
				],
			},
		},
		{
			kind: 'interface',
			name: 'BotConfig',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 35,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'token',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 36,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'compress',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 37,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'intents',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 38,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Intents',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Intents',
											},
										},
										{
											repr: '',
											kind: 'typeOperator',
											typeOperator: {
												operator: 'keyof',
												tsType: {
													repr: 'Intents',
													kind: 'typeQuery',
													typeQuery: 'Intents',
												},
											},
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'eventHandlers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 39,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'EventHandlers',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'EventHandlers',
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'GuildUpdateChange',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 42,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'key',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 43,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'oldValue',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 44,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'unknown',
							kind: 'keyword',
							keyword: 'unknown',
						},
						typeParams: [],
					},
					{
						name: 'value',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 45,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'unknown',
							kind: 'keyword',
							keyword: 'unknown',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'OldMessage',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 48,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'attachments',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 49,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Attachment',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Attachment',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 50,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 51,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'editedTimestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 52,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 53,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'pinned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 54,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'DebugArg',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 57,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 59,
							col: 2,
						},
						jsDoc:
							'Red is for errors or urgent issues. Yellow is for warnings/alerts. Green is for actions being taken. Blue is for',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'gatewayIdentify',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayIdentify',
									},
								},
								{
									repr: 'error',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'error',
									},
								},
								{
									repr: 'globallyRateLimited',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'globallyRateLimited',
									},
								},
								{
									repr: 'requestCreate',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'requestCreate',
									},
								},
								{
									repr: 'requestSuccess',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'requestSuccess',
									},
								},
								{
									repr: 'requestFetch',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'requestFetch',
									},
								},
								{
									repr: 'requestFetched',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'requestFetched',
									},
								},
								{
									repr: 'requestMembersProcessing',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'requestMembersProcessing',
									},
								},
								{
									repr: 'gatewayHeartbeat',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayHeartbeat',
									},
								},
								{
									repr: 'gatewayHeartbeatStopped',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayHeartbeatStopped',
									},
								},
								{
									repr: 'shardCreate',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'shardCreate',
									},
								},
								{
									repr: 'gatewayInvalidSession',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayInvalidSession',
									},
								},
								{
									repr: 'gatewayReconnect',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayReconnect',
									},
								},
								{
									repr: 'gatewayResume',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayResume',
									},
								},
								{
									repr: 'gatewayResumed',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'gatewayResumed',
									},
								},
								{
									repr: 'wsClose',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'wsClose',
									},
								},
								{
									repr: 'wsError',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'wsError',
									},
								},
								{
									repr: 'wsReconnect',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'wsReconnect',
									},
								},
								{
									repr: 'missingShard',
									kind: 'literal',
									literal: {
										kind: 'string',
										string: 'missingShard',
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'data',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 79,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'unknown',
							kind: 'keyword',
							keyword: 'unknown',
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'EventHandlers',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 97,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [],
				properties: [
					{
						name: 'rateLimit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 98,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'RateLimitData',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'RateLimitData',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'applicationCommandCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 100,
							col: 2,
						},
						jsDoc:
							'Sent when a new Slash Command is created, relevant to the current user.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'ApplicationCommandEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'ApplicationCommandEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'applicationCommandUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 104,
							col: 2,
						},
						jsDoc:
							'Sent when a Slash Command relevant to the current user is updated.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'ApplicationCommandEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'ApplicationCommandEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'applicationCommandDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 108,
							col: 2,
						},
						jsDoc:
							'Sent when a Slash Command relevant to the current user is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'ApplicationCommandEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'ApplicationCommandEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'botUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 112,
							col: 2,
						},
						jsDoc: 'Sent when properties about the user change.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'user',
										optional: false,
										tsType: {
											repr: 'UserPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'UserPayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'channelCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 114,
							col: 2,
						},
						jsDoc:
							'Sent when a new guild channel is created, relevant to the current user.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'channel',
										optional: false,
										tsType: {
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'channelUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 116,
							col: 2,
						},
						jsDoc:
							'Sent when a channel is updated. This is not sent when the field `last_message_id` is altered. To keep track of the `last_message_id` changes, you must listen for `MESSAGE_CREATE` events.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'channel',
										optional: false,
										tsType: {
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'cachedChannel',
										optional: false,
										tsType: {
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'channelDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 118,
							col: 2,
						},
						jsDoc:
							'Sent when a channel relevant to the current user is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'channel',
										optional: false,
										tsType: {
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'debug',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 119,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'args',
										optional: false,
										tsType: {
											repr: 'DebugArg',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DebugArg',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'dispatchRequirements',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 120,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'DiscordPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'shardID',
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildBanAdd',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 122,
							col: 2,
						},
						jsDoc: 'Sent when a user is banned from a guild.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'user',
										optional: false,
										tsType: {
											repr: 'UserPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'UserPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: true,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildBanRemove',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 124,
							col: 2,
						},
						jsDoc: 'Sent when a user is unbanned from a guild.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'user',
										optional: false,
										tsType: {
											repr: 'UserPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'UserPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: true,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 135,
							col: 2,
						},
						jsDoc:
							'This event can be sent in three different scenarios:\n1. When a user is initially connecting, to lazily load and backfill information for all unavailable guilds sent in the `READY` event. Guilds that are unavailable due to an outage will send a `GUILD_DELETE` event.\n2. When a Guild becomes available again to the client.\n3. When the current user joins a new Guild.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildLoaded',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 136,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 138,
							col: 2,
						},
						jsDoc: 'Sent when a guild is updated.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'changes',
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'GuildUpdateChange',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'GuildUpdateChange',
												},
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 140,
							col: 2,
						},
						jsDoc:
							'Sent when a guild becomes or was already unavailable due to an outage, or when the user leaves or is removed from a guild. If the `unavailable` field is not set, the user was removed from the guild.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildEmojisUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 142,
							col: 2,
						},
						jsDoc: "Sent when a guild's emojis have been updated.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'emojis',
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'Emoji',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Emoji',
												},
											},
										},
									},
									{
										kind: 'identifier',
										name: 'cachedEmojis',
										optional: false,
										tsType: {
											repr: '',
											kind: 'array',
											array: {
												repr: 'Emoji',
												kind: 'typeRef',
												typeRef: {
													typeParams: null,
													typeName: 'Emoji',
												},
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildMemberAdd',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 148,
							col: 2,
						},
						jsDoc: 'Sent when a new user joins a guild.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildMemberRemove',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 150,
							col: 2,
						},
						jsDoc: 'Sent when a user is removed from a guild (leave/kick/ban).',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'user',
										optional: false,
										tsType: {
											repr: 'UserPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'UserPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: true,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'guildMemberUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 156,
							col: 2,
						},
						jsDoc:
							'Sent when a guild member is updated. This will also fire when the user object of a guild member changes.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'cachedMember',
										optional: true,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'heartbeat',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 161,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'interactionCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 163,
							col: 2,
						},
						jsDoc: 'Sent when a user in a guild uses a Slash Command.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: '',
											kind: 'intersection',
											intersection: [
												{
													repr: 'Omit',
													kind: 'typeRef',
													typeRef: {
														typeParams: [
															{
																repr: 'InteractionCommandPayload',
																kind: 'typeRef',
																typeRef: {
																	typeParams: null,
																	typeName: 'InteractionCommandPayload',
																},
															},
															{
																repr: 'member',
																kind: 'literal',
																literal: {
																	kind: 'string',
																	string: 'member',
																},
															},
														],
														typeName: 'Omit',
													},
												},
												{
													repr: '',
													kind: 'typeLiteral',
													typeLiteral: {
														methods: [],
														properties: [
															{
																name: 'member',
																params: [],
																computed: false,
																optional: false,
																tsType: {
																	repr: 'Member',
																	kind: 'typeRef',
																	typeRef: {
																		typeParams: null,
																		typeName: 'Member',
																	},
																},
																typeParams: [],
															},
														],
														callSignatures: [],
														indexSignatures: [],
													},
												},
											],
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'messageCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 167,
							col: 2,
						},
						jsDoc: 'Sent when a message is created.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'message',
										optional: false,
										tsType: {
											repr: 'Message',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Message',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'messageDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 169,
							col: 2,
						},
						jsDoc: 'Sent when a message is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'partial',
										optional: false,
										tsType: {
											repr: 'PartialMessage',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'PartialMessage',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'message',
										optional: true,
										tsType: {
											repr: 'Message',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Message',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'messageUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 171,
							col: 2,
						},
						jsDoc: 'Sent when a message is updated.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'message',
										optional: false,
										tsType: {
											repr: 'Message',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Message',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'cachedMessage',
										optional: false,
										tsType: {
											repr: 'OldMessage',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'OldMessage',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'nicknameUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 172,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'nickname',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
									{
										kind: 'identifier',
										name: 'oldNickname',
										optional: true,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'presenceUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 179,
							col: 2,
						},
						jsDoc:
							"A user's presence is their current state on a guild. This event is sent when a user's presence or info, such as name or avatar, is updated.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'presence',
										optional: false,
										tsType: {
											repr: 'PresenceUpdatePayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'PresenceUpdatePayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'oldPresence',
										optional: true,
										tsType: {
											repr: 'PresenceUpdatePayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'PresenceUpdatePayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'raw',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 183,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'DiscordPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'DiscordPayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'rawGateway',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 184,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'unknown',
											kind: 'keyword',
											keyword: 'unknown',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'ready',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 185,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'reactionAdd',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 187,
							col: 2,
						},
						jsDoc: 'Sent when a user adds a reaction to a message.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'payload',
										optional: false,
										tsType: {
											repr: 'MessageReactionUncachedPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageReactionUncachedPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'emoji',
										optional: false,
										tsType: {
											repr: 'ReactionPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'ReactionPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'userID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
									{
										kind: 'identifier',
										name: 'message',
										optional: true,
										tsType: {
											repr: 'Message',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Message',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'reactionRemove',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 194,
							col: 2,
						},
						jsDoc: 'Sent when a user removes a reaction from a message.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'payload',
										optional: false,
										tsType: {
											repr: 'MessageReactionUncachedPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageReactionUncachedPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'emoji',
										optional: false,
										tsType: {
											repr: 'ReactionPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'ReactionPayload',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'userID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
									{
										kind: 'identifier',
										name: 'message',
										optional: true,
										tsType: {
											repr: 'Message',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Message',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'reactionRemoveAll',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 201,
							col: 2,
						},
						jsDoc:
							'Sent when a user explicitly removes all reactions from a message.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'BaseMessageReactionPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'BaseMessageReactionPayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'reactionRemoveEmoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 203,
							col: 2,
						},
						jsDoc:
							'Sent when a bot removes all instances of a given emoji from the reactions of a message.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'MessageReactionRemoveEmojiPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageReactionRemoveEmojiPayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'roleCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 205,
							col: 2,
						},
						jsDoc: 'Sent when a guild role is created.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'role',
										optional: false,
										tsType: {
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'roleDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 207,
							col: 2,
						},
						jsDoc: 'Sent when a guild role is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'role',
										optional: false,
										tsType: {
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'roleUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 209,
							col: 2,
						},
						jsDoc: 'Sent when a guild role is updated.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'role',
										optional: false,
										tsType: {
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'cachedRole',
										optional: false,
										tsType: {
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'roleGained',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 210,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'roleID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'roleLost',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 211,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'roleID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'shardReady',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 212,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'shardID',
										optional: false,
										tsType: {
											repr: 'number',
											kind: 'keyword',
											keyword: 'number',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'typingStart',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 214,
							col: 2,
						},
						jsDoc: 'Sent when a user starts typing in a channel.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'TypingStartPayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'TypingStartPayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'voiceChannelJoin',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 215,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'channelID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'voiceChannelLeave',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 216,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'channelID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'voiceChannelSwitch',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 217,
							col: 2,
						},
						jsDoc: null,
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'channelID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
									{
										kind: 'identifier',
										name: 'oldChannelID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'voiceStateUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 223,
							col: 2,
						},
						jsDoc: 'Sent when someone joins/leaves/moves voice channels.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'voiceState',
										optional: false,
										tsType: {
											repr: 'VoiceStateUpdatePayload',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'VoiceStateUpdatePayload',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'webhooksUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 228,
							col: 2,
						},
						jsDoc:
							"Sent when a guild channel's webhook is created, updated, or deleted.",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'channelID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
									{
										kind: 'identifier',
										name: 'guildID',
										optional: false,
										tsType: {
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'membershipScreeningPassed',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 230,
							col: 2,
						},
						jsDoc:
							"Sent when a member has passed the guild's Membership Screening requirements",
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'guild',
										optional: false,
										tsType: {
											repr: 'Guild',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Guild',
											},
										},
									},
									{
										kind: 'identifier',
										name: 'member',
										optional: false,
										tsType: {
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'integrationCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 232,
							col: 2,
						},
						jsDoc:
							'Sent when an integration is created on a server such as twitch, youtube etc..',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'IntegrationCreateUpdateEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'IntegrationCreateUpdateEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'integrationUpdate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 234,
							col: 2,
						},
						jsDoc: 'Sent when an integration is updated.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'IntegrationCreateUpdateEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'IntegrationCreateUpdateEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'integrationDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 236,
							col: 2,
						},
						jsDoc: 'Sent when an integration is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'undefined',
									kind: 'keyword',
									keyword: 'undefined',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'IntegrationDeleteEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'IntegrationDeleteEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'inviteCreate',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 238,
							col: 2,
						},
						jsDoc: 'Sent when a new invite to a channel is created.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'InviteCreateEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'InviteCreateEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
					{
						name: 'inviteDelete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
							line: 240,
							col: 2,
						},
						jsDoc: 'Sent when an invite is deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'fnOrConstructor',
							fnOrConstructor: {
								constructor: false,
								tsType: {
									repr: 'unknown',
									kind: 'keyword',
									keyword: 'unknown',
								},
								params: [
									{
										kind: 'identifier',
										name: 'data',
										optional: false,
										tsType: {
											repr: 'Camelize',
											kind: 'typeRef',
											typeRef: {
												typeParams: [
													{
														repr: 'InviteDeleteEvent',
														kind: 'typeRef',
														typeRef: {
															typeParams: null,
															typeName: 'InviteDeleteEvent',
														},
													},
												],
												typeName: 'Camelize',
											},
										},
									},
								],
								typeParams: [],
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'enum',
			name: 'Intents',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 244,
				col: 0,
			},
			jsDoc:
				'https://discord.com/developers/docs/topics/gateway#list-of-intents',
			enumDef: {
				members: [
					{
						name: 'GUILDS',
						jsDoc:
							'Enables the following events:\n- GUILD_CREATE\n- GUILD_DELETE\n- GUILD_ROLE_CREATE\n- GUILD_ROLE_UPDATE\n- GUILD_ROLE_DELETE\n- CHANNEL_CREATE\n- CHANNEL_UPDATE\n- CHANNEL_DELETE\n- CHANNEL_PINS_UPDATE',
					},
					{
						name: 'GUILD_MEMBERS',
						jsDoc:
							'Enables the following events:\n- GUILD_MEMBER_ADD\n- GUILD_MEMBER_UPDATE\n- GUILD_MEMBER_REMOVE',
					},
					{
						name: 'GUILD_BANS',
						jsDoc:
							'Enables the following events:\n- GUILD_BAN_ADD\n- GUILD_BAN_REMOVE',
					},
					{
						name: 'GUILD_EMOJIS',
						jsDoc: 'Enables the following events:\n- GUILD_EMOJIS_UPDATE',
					},
					{
						name: 'GUILD_INTEGRATIONS',
						jsDoc:
							'Enables the following events:\n- GUILD_INTEGRATIONS_UPDATE\n- INTEGRATION_CREATE\n- INTEGRATION_UPDATE\n- INTEGRATION_DELETE',
					},
					{
						name: 'GUILD_WEBHOOKS',
						jsDoc: 'Enables the following events:\n- WEBHOOKS_UPDATE',
					},
					{
						name: 'GUILD_INVITES',
						jsDoc:
							'Enables the following events:\n- INVITE_CREATE\n- INVITE_DELETE',
					},
					{
						name: 'GUILD_VOICE_STATES',
						jsDoc: 'Enables the following events:\n- VOICE_STATE_UPDATE',
					},
					{
						name: 'GUILD_PRESENCES',
						jsDoc: 'Enables the following events:\n- PRESENCE_UPDATE',
					},
					{
						name: 'GUILD_MESSAGES',
						jsDoc:
							'Enables the following events:\n- MESSAGE_CREATE\n- MESSAGE_UPDATE\n- MESSAGE_DELETE',
					},
					{
						name: 'GUILD_MESSAGE_REACTIONS',
						jsDoc:
							'Enables the following events:\n- MESSAGE_REACTION_ADD\n- MESSAGE_REACTION_REMOVE\n- MESSAGE_REACTION_REMOVE_ALL\n- MESSAGE_REACTION_REMOVE_EMOJI',
					},
					{
						name: 'GUILD_MESSAGE_TYPING',
						jsDoc: 'Enables the following events:\n- TYPING_START',
					},
					{
						name: 'DIRECT_MESSAGES',
						jsDoc:
							'Enables the following events:\n- CHANNEL_CREATE\n- MESSAGE_CREATE\n- MESSAGE_UPDATE\n- MESSAGE_DELETE\n- CHANNEL_PINS_UPDATE',
					},
					{
						name: 'DIRECT_MESSAGE_REACTIONS',
						jsDoc:
							'Enables the following events:\n- MESSAGE_REACTION_ADD\n- MESSAGE_REACTION_REMOVE\n- MESSAGE_REACTION_REMOVE_ALL\n- MESSAGE_REACTION_REMOVE_EMOJI',
					},
					{
						name: 'DIRECT_MESSAGE_TYPING',
						jsDoc: 'Enables the following events:\n- TYPING_START',
					},
				],
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Message',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Message',
			},
		},
		{
			kind: 'import',
			name: 'Role',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Role',
			},
		},
		{
			kind: 'import',
			name: 'DiscordPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'DiscordPayload',
			},
		},
		{
			kind: 'import',
			name: 'Emoji',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'Emoji',
			},
		},
		{
			kind: 'import',
			name: 'IntegrationCreateUpdateEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'IntegrationCreateUpdateEvent',
			},
		},
		{
			kind: 'import',
			name: 'IntegrationDeleteEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'IntegrationDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'InviteCreateEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'InviteCreateEvent',
			},
		},
		{
			kind: 'import',
			name: 'InviteDeleteEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'InviteDeleteEvent',
			},
		},
		{
			kind: 'import',
			name: 'PresenceUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'PresenceUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'TypingStartPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'TypingStartPayload',
			},
		},
		{
			kind: 'import',
			name: 'VoiceStateUpdatePayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 8,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/discord.ts',
				imported: 'VoiceStateUpdatePayload',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/guild.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'ApplicationCommandEvent',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				imported: 'ApplicationCommandEvent',
			},
		},
		{
			kind: 'import',
			name: 'InteractionCommandPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/interactions.ts',
				imported: 'InteractionCommandPayload',
			},
		},
		{
			kind: 'import',
			name: 'Attachment',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Attachment',
			},
		},
		{
			kind: 'import',
			name: 'BaseMessageReactionPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'BaseMessageReactionPayload',
			},
		},
		{
			kind: 'import',
			name: 'Embed',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'Embed',
			},
		},
		{
			kind: 'import',
			name: 'MessageReactionRemoveEmojiPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'MessageReactionRemoveEmojiPayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageReactionUncachedPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'MessageReactionUncachedPayload',
			},
		},
		{
			kind: 'import',
			name: 'PartialMessage',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'PartialMessage',
			},
		},
		{
			kind: 'import',
			name: 'ReactionPayload',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 24,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/message.ts',
				imported: 'ReactionPayload',
			},
		},
		{
			kind: 'import',
			name: 'Camelize',
			location: {
				filename: 'https://deno.land/x/discordeno@10.5.0/src/types/options.ts',
				line: 33,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/util.ts',
				imported: 'Camelize',
			},
		},
		{
			kind: 'function',
			name: 'memberIDHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 7,
				col: 0,
			},
			jsDoc:
				'Checks if the member has this permission. If the member is an owner or has admin perms it will always be true.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'memberHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 26,
				col: 0,
			},
			jsDoc:
				'Checks if the member has this permission. If the member is an owner or has admin perms it will always be true.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'guild',
						optional: false,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'memberRoleIDs',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'botHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 51,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'botHasChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 83,
				col: 0,
			},
			jsDoc: 'Checks if the bot has the permissions in a channel',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'hasChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 91,
				col: 0,
			},
			jsDoc: 'Checks if a user has permissions in a channel.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'calculatePermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 196,
				col: 0,
			},
			jsDoc: 'This function converts a bitwise string to permission strings',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'permissionBits',
						optional: false,
						tsType: {
							repr: 'bigint',
							kind: 'keyword',
							keyword: 'bigint',
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'calculateBits',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 204,
				col: 0,
			},
			jsDoc:
				'This function converts an array of permissions into the bitwise string.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'highestRole',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 211,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'memberID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'higherRolePosition',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 236,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'roleID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'otherRoleID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Role',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'Role',
			},
		},
		{
			kind: 'import',
			name: 'botID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 3,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/bot.ts',
				imported: 'botID',
			},
		},
		{
			kind: 'import',
			name: 'Permission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Permission',
			},
		},
		{
			kind: 'import',
			name: 'Permissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Permissions',
			},
		},
		{
			kind: 'import',
			name: 'RawOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				line: 4,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'RawOverwrite',
			},
		},
		{
			kind: 'function',
			name: 'channelOverwriteHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 30,
				col: 0,
			},
			jsDoc:
				'Checks if a channel overwrite for a user id or a role id has permission in this channel',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'guildID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'overwrites',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'RawOverwrite',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'RawOverwrite',
								},
							},
						},
					},
					{
						kind: 'identifier',
						name: 'permissions',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Permission',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Permission',
								},
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 51,
				col: 0,
			},
			jsDoc:
				'Fetch a single message from the server. Requires VIEW_CHANNEL and READ_MESSAGE_HISTORY',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'id',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getMessages',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 83,
				col: 0,
			},
			jsDoc:
				'Fetches between 2-100 messages. Requires VIEW_CHANNEL and READ_MESSAGE_HISTORY',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'GetMessagesAfter',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetMessagesAfter',
									},
								},
								{
									repr: 'GetMessagesBefore',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetMessagesBefore',
									},
								},
								{
									repr: 'GetMessagesAround',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetMessagesAround',
									},
								},
								{
									repr: 'GetMessages',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'GetMessages',
									},
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getPins',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 122,
				col: 0,
			},
			jsDoc: 'Get pinned messages in this channel.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'startTyping',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 135,
				col: 0,
			},
			jsDoc:
				'Trigger a typing indicator for the specified channel. Generally bots should **NOT** implement this route.\nHowever, if a bot is responding to a command and expects the computation to take a few seconds,\nthis endpoint may be called to let the user know that the bot is processing their message.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'sendMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 166,
				col: 0,
			},
			jsDoc:
				'Send a message to the channel. Requires SEND_MESSAGES permission.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'content',
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
								{
									repr: 'MessageContent',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageContent',
									},
								},
							],
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteMessages',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 282,
				col: 0,
			},
			jsDoc:
				'Delete messages from the channel. 2-100. Requires the MANAGE_MESSAGES permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'ids',
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getChannelInvites',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 318,
				col: 0,
			},
			jsDoc: 'Gets the invites for this channel. Requires MANAGE_CHANNEL',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'createInvite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 335,
				col: 0,
			},
			jsDoc:
				'Creates a new invite for this channel. Requires CREATE_INSTANT_INVITE',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'CreateInviteOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'CreateInviteOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getInvite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 372,
				col: 0,
			},
			jsDoc: 'Returns an invite for the given code.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'inviteCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'deleteInvite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 381,
				col: 0,
			},
			jsDoc:
				'Deletes an invite for the given code. Requires `MANAGE_CHANNELS` or `MANAGE_GUILD` permission',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'inviteCode',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'getChannelWebhooks',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 409,
				col: 0,
			},
			jsDoc: 'Gets the webhooks for this channel. Requires MANAGE_WEBHOOKS',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'editChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 474,
				col: 0,
			},
			jsDoc:
				"Update a channel's settings. Requires the `MANAGE_CHANNELS` permission for the guild.",
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'options',
						optional: false,
						tsType: {
							repr: 'ChannelEditOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'ChannelEditOptions',
							},
						},
					},
					{
						kind: 'identifier',
						name: 'reason',
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'followChannel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 546,
				col: 0,
			},
			jsDoc:
				'Follow a News Channel to send messages to a target channel. Requires the `MANAGE_WEBHOOKS` permission in the target channel. Returns the webhook id.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'sourceChannelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
					{
						kind: 'identifier',
						name: 'targetChannelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'isChannelSynced',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 575,
				col: 0,
			},
			jsDoc:
				'Checks whether a channel is synchronized with its parent/category channel or not.\n@param channelID The ID of the channel to test for synchronization\n@return Returns `true` if the channel is synchronized, otherwise `false`. Returns `false` if the channel is not cached.',
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'channelID',
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'RequestManager',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/rest/request_manager.ts',
				imported: 'RequestManager',
			},
		},
		{
			kind: 'import',
			name: 'ChannelEditOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelEditOptions',
			},
		},
		{
			kind: 'import',
			name: 'ChannelTypes',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'ChannelTypes',
			},
		},
		{
			kind: 'import',
			name: 'CreateInviteOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'CreateInviteOptions',
			},
		},
		{
			kind: 'import',
			name: 'Errors',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Errors',
			},
		},
		{
			kind: 'import',
			name: 'FollowedChannelPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'FollowedChannelPayload',
			},
		},
		{
			kind: 'import',
			name: 'GetMessages',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetMessages',
			},
		},
		{
			kind: 'import',
			name: 'GetMessagesAfter',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetMessagesAfter',
			},
		},
		{
			kind: 'import',
			name: 'GetMessagesAround',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetMessagesAround',
			},
		},
		{
			kind: 'import',
			name: 'GetMessagesBefore',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GetMessagesBefore',
			},
		},
		{
			kind: 'import',
			name: 'InvitePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'InvitePayload',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'MessageCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'Permission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Permission',
			},
		},
		{
			kind: 'import',
			name: 'Permissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Permissions',
			},
		},
		{
			kind: 'import',
			name: 'RawOverwrite',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'RawOverwrite',
			},
		},
		{
			kind: 'import',
			name: 'WebhookPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 2,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'WebhookPayload',
			},
		},
		{
			kind: 'import',
			name: 'endpoints',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/constants.ts',
				imported: 'endpoints',
			},
		},
		{
			kind: 'import',
			name: 'botHasChannelPermissions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 21,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasChannelPermissions',
			},
		},
		{
			kind: 'import',
			name: 'botHasPermission',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 21,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'botHasPermission',
			},
		},
		{
			kind: 'import',
			name: 'calculateBits',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 21,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/permissions.ts',
				imported: 'calculateBits',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 26,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'structures',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				line: 27,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/mod.ts',
				imported: 'structures',
			},
		},
		{
			kind: 'variable',
			name: 'controllers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 59,
				col: 0,
			},
			jsDoc: null,
			variableDef: {
				tsType: null,
				kind: 'let',
			},
		},
		{
			kind: 'typeAlias',
			name: 'Controllers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 101,
				col: 0,
			},
			jsDoc: null,
			typeAliasDef: {
				tsType: {
					repr: 'controllers',
					kind: 'typeQuery',
					typeQuery: 'controllers',
				},
				typeParams: [],
			},
		},
		{
			kind: 'function',
			name: 'updateControllers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 103,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'newControllers',
						optional: false,
						tsType: {
							repr: 'Controllers',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Controllers',
							},
						},
					},
				],
				returnType: null,
				isAsync: false,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildBanAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				imported: 'handleInternalGuildBanAdd',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildBanRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/bans.ts',
				imported: 'handleInternalGuildBanRemove',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalChannelCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				imported: 'handleInternalChannelCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalChannelDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				imported: 'handleInternalChannelDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalChannelUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 5,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/channels.ts',
				imported: 'handleInternalChannelUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				imported: 'handleInternalGuildCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				imported: 'handleInternalGuildDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildEmojisUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				imported: 'handleInternalGuildEmojisUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 10,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/guilds.ts',
				imported: 'handleInternalGuildUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalApplicationCommandCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/interactions.ts',
				imported: 'handleInternalApplicationCommandCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalApplicationCommandDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/interactions.ts',
				imported: 'handleInternalApplicationCommandDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalApplicationCommandUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/interactions.ts',
				imported: 'handleInternalApplicationCommandUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalInteractionCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/interactions.ts',
				imported: 'handleInternalInteractionCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildMemberAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				imported: 'handleInternalGuildMemberAdd',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildMemberRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				imported: 'handleInternalGuildMemberRemove',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildMembersChunk',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				imported: 'handleInternalGuildMembersChunk',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildMemberUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 22,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/members.ts',
				imported: 'handleInternalGuildMemberUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 28,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				imported: 'handleInternalMessageCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 28,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				imported: 'handleInternalMessageDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageDeleteBulk',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 28,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				imported: 'handleInternalMessageDeleteBulk',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 28,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/messages.ts',
				imported: 'handleInternalMessageUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalIntegrationCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalIntegrationCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalIntegrationDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalIntegrationDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalIntegrationUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalIntegrationUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalInviteCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalInviteCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalInviteDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalInviteDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalPresenceUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalPresenceUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalReady',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalReady',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalTypingStart',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalTypingStart',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalUserUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalUserUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalVoiceStateUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalVoiceStateUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalWebhooksUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 34,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/misc.ts',
				imported: 'handleInternalWebhooksUpdate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageReactionAdd',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				imported: 'handleInternalMessageReactionAdd',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageReactionRemove',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				imported: 'handleInternalMessageReactionRemove',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageReactionRemoveAll',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				imported: 'handleInternalMessageReactionRemoveAll',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalMessageReactionRemoveEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 47,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/reactions.ts',
				imported: 'handleInternalMessageReactionRemoveEmoji',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildRoleCreate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 53,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				imported: 'handleInternalGuildRoleCreate',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildRoleDelete',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 53,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				imported: 'handleInternalGuildRoleDelete',
			},
		},
		{
			kind: 'import',
			name: 'handleInternalGuildRoleUpdate',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/mod.ts',
				line: 53,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/roles.ts',
				imported: 'handleInternalGuildRoleUpdate',
			},
		},
		{
			kind: 'function',
			name: 'createMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 136,
				col: 0,
			},
			jsDoc: null,
			functionDef: {
				params: [
					{
						kind: 'identifier',
						name: 'data',
						optional: false,
						tsType: {
							repr: 'MessageCreateOptions',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'MessageCreateOptions',
							},
						},
					},
				],
				returnType: null,
				isAsync: true,
				isGenerator: false,
				typeParams: [],
			},
		},
		{
			kind: 'interface',
			name: 'Message',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 182,
				col: 0,
			},
			jsDoc: null,
			interfaceDef: {
				extends: [],
				methods: [
					{
						name: 'delete',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 256,
							col: 2,
						},
						jsDoc: 'Delete the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
							{
								kind: 'identifier',
								name: 'delayMilliseconds',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'deleteMessageByID',
										kind: 'typeQuery',
										typeQuery: 'deleteMessageByID',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'edit',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 261,
							col: 2,
						},
						jsDoc: 'Edit the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'editMessage',
										kind: 'typeQuery',
										typeQuery: 'editMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'pin',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 263,
							col: 2,
						},
						jsDoc: 'Pins the message in the channel',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'pin',
										kind: 'typeQuery',
										typeQuery: 'pin',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addReaction',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 265,
							col: 2,
						},
						jsDoc: 'Add a reaction to the message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addReaction',
										kind: 'typeQuery',
										typeQuery: 'addReaction',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'addReactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 267,
							col: 2,
						},
						jsDoc:
							'Add multiple reactions to the message without or without order.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reactions',
								optional: false,
								tsType: {
									repr: '',
									kind: 'array',
									array: {
										repr: 'string',
										kind: 'keyword',
										keyword: 'string',
									},
								},
							},
							{
								kind: 'identifier',
								name: 'ordered',
								optional: true,
								tsType: {
									repr: 'boolean',
									kind: 'keyword',
									keyword: 'boolean',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'addReactions',
										kind: 'typeQuery',
										typeQuery: 'addReactions',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'reply',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 272,
							col: 2,
						},
						jsDoc: 'Send a inline reply to this message',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'send',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 274,
							col: 2,
						},
						jsDoc: 'Send a message to this channel where this message is',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'sendMessage',
										kind: 'typeQuery',
										typeQuery: 'sendMessage',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'alert',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 276,
							col: 2,
						},
						jsDoc:
							'Send a message to this channel and then delete it after a bit. By default it will delete after 10 seconds with no reason provided.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
							{
								kind: 'identifier',
								name: 'timeout',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'Promise',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'void',
										kind: 'keyword',
										keyword: 'void',
									},
								],
								typeName: 'Promise',
							},
						},
						typeParams: [],
					},
					{
						name: 'alertReply',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 282,
							col: 2,
						},
						jsDoc:
							'Send a inline reply to this message but then delete it after a bit. By default it will delete after 10 seconds with no reason provided.',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'content',
								optional: false,
								tsType: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'string',
											kind: 'keyword',
											keyword: 'string',
										},
										{
											repr: 'MessageContent',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'MessageContent',
											},
										},
									],
								},
							},
							{
								kind: 'identifier',
								name: 'timeout',
								optional: true,
								tsType: {
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
							},
							{
								kind: 'identifier',
								name: 'reason',
								optional: true,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'Promise',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'unknown',
										kind: 'keyword',
										keyword: 'unknown',
									},
								],
								typeName: 'Promise',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeAllReactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 288,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeAllReactions',
										kind: 'typeQuery',
										typeQuery: 'removeAllReactions',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeReactionEmoji',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 290,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeReactionEmoji',
										kind: 'typeQuery',
										typeQuery: 'removeReactionEmoji',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
					{
						name: 'removeReaction',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 292,
							col: 2,
						},
						jsDoc: 'Remove all reactions',
						optional: false,
						params: [
							{
								kind: 'identifier',
								name: 'reaction',
								optional: false,
								tsType: {
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							},
						],
						returnType: {
							repr: 'ReturnType',
							kind: 'typeRef',
							typeRef: {
								typeParams: [
									{
										repr: 'removeReaction',
										kind: 'typeQuery',
										typeQuery: 'removeReaction',
									},
								],
								typeName: 'ReturnType',
							},
						},
						typeParams: [],
					},
				],
				properties: [
					{
						name: 'id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 184,
							col: 2,
						},
						jsDoc: 'The id of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'channelID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 186,
							col: 2,
						},
						jsDoc: 'The id of the channel the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'guildID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 188,
							col: 2,
						},
						jsDoc: 'The id of the guild the message was sent in',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'author',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 190,
							col: 2,
						},
						jsDoc:
							'The author of this message (not guaranteed to be a valid user such as a webhook.)',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'UserPayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'UserPayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'content',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 192,
							col: 2,
						},
						jsDoc: 'The contents of the message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'timestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 194,
							col: 2,
						},
						jsDoc: 'When this message was sent',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'editedTimestamp',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 196,
							col: 2,
						},
						jsDoc: 'When this message was edited (if it was not edited, null)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'number',
							kind: 'keyword',
							keyword: 'number',
						},
						typeParams: [],
					},
					{
						name: 'tts',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 198,
							col: 2,
						},
						jsDoc: 'Whether this was a TextToSpeech message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentionsEveryone',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 200,
							col: 2,
						},
						jsDoc: 'Whether this message mentions everyone',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'mentions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 202,
							col: 2,
						},
						jsDoc: 'Users specifically mentioned in the message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionRoleIDs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 204,
							col: 2,
						},
						jsDoc: 'Roles specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionChannelIDs',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 206,
							col: 2,
						},
						jsDoc: 'Channels specifically mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'string',
								kind: 'keyword',
								keyword: 'string',
							},
						},
						typeParams: [],
					},
					{
						name: 'attachments',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 208,
							col: 2,
						},
						jsDoc: 'Any attached files',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Attachment',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Attachment',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'embeds',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 210,
							col: 2,
						},
						jsDoc: 'Any embedded content',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Embed',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Embed',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'reactions',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 212,
							col: 2,
						},
						jsDoc: 'Reactions to the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'Reaction',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'Reaction',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'nonce',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 214,
							col: 2,
						},
						jsDoc: 'Used for validating a message was sent',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'number',
									kind: 'keyword',
									keyword: 'number',
								},
								{
									repr: 'string',
									kind: 'keyword',
									keyword: 'string',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'pinned',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 216,
							col: 2,
						},
						jsDoc: 'Whether this message is pinned',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'boolean',
							kind: 'keyword',
							keyword: 'boolean',
						},
						typeParams: [],
					},
					{
						name: 'webhook_id',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 218,
							col: 2,
						},
						jsDoc:
							'If the message is generated by a webhook, this is the webhooks id',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'type',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 220,
							col: 2,
						},
						jsDoc: 'The type of message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '0',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 0,
									},
								},
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '3',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 3,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '5',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 5,
									},
								},
								{
									repr: '6',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 6,
									},
								},
								{
									repr: '7',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 7,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '9',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 9,
									},
								},
								{
									repr: '10',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 10,
									},
								},
								{
									repr: '11',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 11,
									},
								},
								{
									repr: '12',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 12,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'activity',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 222,
							col: 2,
						},
						jsDoc:
							'The activities sent with Rich Presence-related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Activity',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Activity',
							},
						},
						typeParams: [],
					},
					{
						name: 'applications',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 224,
							col: 2,
						},
						jsDoc:
							'Applications that sent with Rich Presence related chat embeds.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Application',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Application',
							},
						},
						typeParams: [],
					},
					{
						name: 'messageReference',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 226,
							col: 2,
						},
						jsDoc: 'The reference data sent with crossposted messages',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'DiscordReferencePayload',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'DiscordReferencePayload',
							},
						},
						typeParams: [],
					},
					{
						name: 'flags',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 228,
							col: 2,
						},
						jsDoc:
							'The message flags combined like permission bits describe extra features of the message',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: '1',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 1,
									},
								},
								{
									repr: '2',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 2,
									},
								},
								{
									repr: '4',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 4,
									},
								},
								{
									repr: '8',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 8,
									},
								},
								{
									repr: '16',
									kind: 'literal',
									literal: {
										kind: 'number',
										number: 16,
									},
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'stickers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 230,
							col: 2,
						},
						jsDoc:
							'the stickers sent with the message (bots currently can only receive messages with stickers, not send)',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: 'MessageSticker',
								kind: 'typeRef',
								typeRef: {
									typeParams: null,
									typeName: 'MessageSticker',
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'referencedMessageID',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 232,
							col: 2,
						},
						jsDoc:
							'The message id of the original message if this message was sent as a reply. If null, the original message was deleted.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: '',
							kind: 'union',
							union: [
								{
									repr: 'MessageCreateOptions',
									kind: 'typeRef',
									typeRef: {
										typeParams: null,
										typeName: 'MessageCreateOptions',
									},
								},
								{
									repr: 'null',
									kind: 'keyword',
									keyword: 'null',
								},
							],
						},
						typeParams: [],
					},
					{
						name: 'channel',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 237,
							col: 2,
						},
						jsDoc:
							'The channel where this message was sent. Can be undefined if uncached.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Channel',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Channel',
							},
						},
						typeParams: [],
					},
					{
						name: 'guild',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 239,
							col: 2,
						},
						jsDoc:
							'The guild of this message. Can be undefined if not in cache or in DM',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Guild',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Guild',
							},
						},
						typeParams: [],
					},
					{
						name: 'member',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 241,
							col: 2,
						},
						jsDoc:
							'The member for the user who sent the message. Can be undefined if not in cache or in dm.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'Member',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'Member',
							},
						},
						typeParams: [],
					},
					{
						name: 'guildMember',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 243,
							col: 2,
						},
						jsDoc:
							'The guild member details for this guild and member. Can be undefined if not in cache or in dm.',
						params: [],
						computed: false,
						optional: true,
						tsType: {
							repr: 'GuildMember',
							kind: 'typeRef',
							typeRef: {
								typeParams: null,
								typeName: 'GuildMember',
							},
						},
						typeParams: [],
					},
					{
						name: 'link',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 245,
							col: 2,
						},
						jsDoc: 'The url link to this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: 'string',
							kind: 'keyword',
							keyword: 'string',
						},
						typeParams: [],
					},
					{
						name: 'mentionedRoles',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 247,
							col: 2,
						},
						jsDoc:
							'The role objects for all the roles that were mentioned in this message',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Role',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Role',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionedChannels',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 249,
							col: 2,
						},
						jsDoc:
							'The channel objects for all the channels that were mentioned in this message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Channel',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Channel',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
					{
						name: 'mentionedMembers',
						location: {
							filename:
								'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
							line: 251,
							col: 2,
						},
						jsDoc:
							'The member objects for all the members that were mentioned in this message.',
						params: [],
						computed: false,
						optional: false,
						tsType: {
							repr: '',
							kind: 'array',
							array: {
								repr: '',
								kind: 'parenthesized',
								parenthesized: {
									repr: '',
									kind: 'union',
									union: [
										{
											repr: 'Member',
											kind: 'typeRef',
											typeRef: {
												typeParams: null,
												typeName: 'Member',
											},
										},
										{
											repr: 'undefined',
											kind: 'keyword',
											keyword: 'undefined',
										},
									],
								},
							},
						},
						typeParams: [],
					},
				],
				callSignatures: [],
				indexSignatures: [],
				typeParams: [],
			},
		},
		{
			kind: 'import',
			name: 'Activity',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Activity',
			},
		},
		{
			kind: 'import',
			name: 'Application',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Application',
			},
		},
		{
			kind: 'import',
			name: 'Attachment',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Attachment',
			},
		},
		{
			kind: 'import',
			name: 'DiscordReferencePayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'DiscordReferencePayload',
			},
		},
		{
			kind: 'import',
			name: 'Embed',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Embed',
			},
		},
		{
			kind: 'import',
			name: 'GuildMember',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'GuildMember',
			},
		},
		{
			kind: 'import',
			name: 'MessageContent',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageContent',
			},
		},
		{
			kind: 'import',
			name: 'MessageCreateOptions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageCreateOptions',
			},
		},
		{
			kind: 'import',
			name: 'MessageSticker',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'MessageSticker',
			},
		},
		{
			kind: 'import',
			name: 'Reaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Reaction',
			},
		},
		{
			kind: 'import',
			name: 'Reference',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'Reference',
			},
		},
		{
			kind: 'import',
			name: 'UserPayload',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 1,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/types/mod.ts',
				imported: 'UserPayload',
			},
		},
		{
			kind: 'import',
			name: 'cache',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 15,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/cache.ts',
				imported: 'cache',
			},
		},
		{
			kind: 'import',
			name: 'createNewProp',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 16,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/util/utils.ts',
				imported: 'createNewProp',
			},
		},
		{
			kind: 'import',
			name: 'cacheHandlers',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 17,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/controllers/cache.ts',
				imported: 'cacheHandlers',
			},
		},
		{
			kind: 'import',
			name: 'sendMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 18,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/channel.ts',
				imported: 'sendMessage',
			},
		},
		{
			kind: 'import',
			name: 'sendDirectMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 19,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/handlers/member.ts',
				imported: 'sendDirectMessage',
			},
		},
		{
			kind: 'import',
			name: 'addReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'addReaction',
			},
		},
		{
			kind: 'import',
			name: 'addReactions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'addReactions',
			},
		},
		{
			kind: 'import',
			name: 'deleteMessageByID',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'deleteMessageByID',
			},
		},
		{
			kind: 'import',
			name: 'editMessage',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'editMessage',
			},
		},
		{
			kind: 'import',
			name: 'pin',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'pin',
			},
		},
		{
			kind: 'import',
			name: 'removeAllReactions',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'removeAllReactions',
			},
		},
		{
			kind: 'import',
			name: 'removeReaction',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'removeReaction',
			},
		},
		{
			kind: 'import',
			name: 'removeReactionEmoji',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 20,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/handlers/message.ts',
				imported: 'removeReactionEmoji',
			},
		},
		{
			kind: 'import',
			name: 'Channel',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 30,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/channel.ts',
				imported: 'Channel',
			},
		},
		{
			kind: 'import',
			name: 'Guild',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 31,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/guild.ts',
				imported: 'Guild',
			},
		},
		{
			kind: 'import',
			name: 'Member',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 32,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/member.ts',
				imported: 'Member',
			},
		},
		{
			kind: 'import',
			name: 'Role',
			location: {
				filename:
					'https://deno.land/x/discordeno@10.5.0/src/api/structures/message.ts',
				line: 33,
				col: 0,
			},
			jsDoc: null,
			importDef: {
				src: 'https://deno.land/x/discordeno@10.5.0/src/api/structures/role.ts',
				imported: 'Role',
			},
		},
	],
};
